{"componentChunkName":"component---src-pages-tutorials-manage-graph-ql-index-mdx","path":"/tutorials/ManageGraphQL/","result":{"pageContext":{"frontmatter":{"title":"API Lifecycle Lab - Manage GraphQL API"},"relativePagePath":"/tutorials/ManageGraphQL/index.mdx","titleType":"page","MdxNode":{"id":"df6f0875-7db5-5ead-acfb-617d22e8f1cb","children":[],"parent":"833878fc-c893-5cbc-91c1-c9f6334455a6","internal":{"content":"---\ntitle: API Lifecycle Lab - Manage GraphQL API\n---\n\nimport ArticleDetails from '../../../../src/gatsby-theme-carbon/components/ArticleDetails'\n\n\n<FeatureCard\n  title=\"API Lifecycle Lab - Manage GraphQL API\"\n  color=\"dark\"\n  >\n\n![banner](images/api-lab-banner.jpg)\n\n</FeatureCard>\n\n<AnchorLinks>\n  <AnchorLink>Lab Overview</AnchorLink>\n  <AnchorLink>Prerequisites</AnchorLink>\n  <AnchorLink>Business Context</AnchorLink>\n  <AnchorLink>Create a GraphQL Proxy API</AnchorLink>\n  <AnchorLink>Edit and Test API</AnchorLink>\n  <AnchorLink>Create a Product and apply GraphQL RateLimits</AnchorLink>\n  <AnchorLink>Explore the API from Developer Portal</AnchorLink>\n  <AnchorLink>Summary</AnchorLink>\n</AnchorLinks>\n\n***\n\n<ArticleDetails name=\"Ravi Katikala\" lastUpdated=\"May 2021\" readTimeMinutes=\"45\" />\n\nNeed support? Contact **Rafael Osorio**\n\n***\n\n## Lab Overview\n\nIn this tutorial, you use the IBM Cloud Pak for Integration 2021.1.1 to define GraphQL APIs that proxy to a backend GraphQL server. GraphQL is a query language for APIs that gives an application client greater control over what data it retrieves in an API request when compared with a REST API request.\n\nAPI Connect GraphQL support also allows rate limiting and other controls using API Gateway.\n\nIn this tutorial, you will explore the following key capabilities:\n- Create a GraphQL Proxy API\n- Learn about GraphQL introspection and Schema Editor\n- Test APIs by using the built-in GraphQL editor\n- Review API Assembly Policies for the cost end point\n\n***\n\n## Prerequisites\n\n  - You need to have your personal CP4I on ROKS environment. [Check here how to request it](https://ibm-garage-tsa.github.io/cp4i-demohub/cp4i-on-roks/)\n\n***\n\n## Business Context\n\nAs a developer, you are having problems to manage the use of GraphQL APIs in your company.\n\nGraphQL provides the following particular advantages over REST APIs:\n  - The application client can request only the data that it needs. For example, when retrieving bank account records, request only the account number and current balance for each account, but not the customer name and address details. With a REST API request, either the backend REST service must provide separate endpoints for different data subsets, or the application client must retrieve the complete records and then discard the unwanted data.\n  - The application client can retrieve multiple related resources in a single request. For example, a customer's bank account record might include an array that references other finance products that the customer holds. If an application client wants to retrieve the bank account details for a specific customer, and details of the other finance products for that customer, then with a REST API the client would first retrieve the bank account details, then make separate requests for each of the other products. A GraphQL API can be designed to allow the client to retrieve all this information in a single request.\n\nHowever, this flexibility presents rate limiting challenges, because two seemingly very similar requests might return vastly different amounts of data, and what might have required multiple REST API requests, each counting towards the rate limit, might require only a single GraphQL API request. It is important therefore that rate limiting controls are imposed that reflect the amount of data that is retrieved. \n\nCloud Pak for Integration API Connect enables you to create a GraphQL API proxy definition that proxies a backend GraphQL server.  API Connect extends the GraphQL standard by providing, in a GraphQL API definition, the ability to configure a range of settings that are used to calculate the complexity of a GraphQL request and an associated cost that counts towards the rate limit.\n\n***\n\n## Create a GraphQL Proxy API\n\n1.Open a browser and go to your **Cloud Pak for Integration Platform Navigation**. On the **API Lifecycle management** box, click to open your **API Connect** Runtime.\n\n  ![](images/graphql-cp4i-home.png)\n\n2.On the Log In page, if you are using admin user, select *Common Services User Registry*. But if you are using LDAP users, you need to select your **LDAP User Registry** on the right side. Go ahead and **log in**.\n\n  ![](images/graphql-login.png)\n\n3.Select **Develop APIs and products**.\n\n  ![](images/graphql-develop-apis.png)\n\n  Then click **Add-\\>API (from REST, GraphQL or SOAP)**.\n\n  ![](images/add-api-graphql.png)\n\n4.To create a GraphQL proxy, select **From Existing GraphQL service (GraphQL proxy)**. When you point to an existing GraphQL server, API Connect introspects the service and automatically creates a GraphQL proxy service.\n\n  ![](images/tutorial_html_797b2f887d77017c.png)\n\n5.Enter the following values and click **Next**. You can use default values for the rest.\n\n  Title: **accounts**\n\n  GraphQL server URL: **https://graphql-test-server.us-east.cf.appdomain.cloud/accounts/graphql**\n\n  ![](images/tutorial_html_f83e60ae96763438.png)\n\n  ![](images/tutorial_html_90e0cbad29eca5a.png)\n\n6.In the Paths section, select **all** the available end points.\n\n  ![](images/all-endpoints.png)\n\n7.The schema validator reports warning and errors if found. There are two warnings in the accounts schema. Click **View** to get the Warning details. A review of the schema shows that no limit is set on the size of the list. You will fix this warning in later steps. Click Next to continue.\n\n  ![](images/view-warning-graphql.png)\n\n  ![](images/tutorial_html_8104c10fce21e609.png)\n\n8.Keep both **Secure using Client ID** and **CORS** checked and click **Next**.\n\n  ![](images/tutorial_html_464f81f24c7d47dd.png)\n\n9.API Connect successfully created a GraphQL proxy API.\n\n  ![](images/api-graphql-success.png)\n\n***\n\n## Edit and Test API\n\n1.Now, let's edit the API to view more details on the proxy API just created. Click **Edit API** to continue.\n\n  ![](images/tutorial_html_e70bb58508f9b662.png)\n\n2.GraphQL APIs are structured the same as REST APIs with some additional options. Just like REST APIs, you will be able to add security definitions, properties and Activity logs from the left menu bar. You can also view the *Source* and *Assemble* tabs similar to REST APIs. You will notice a new tab for GraphQL APIs. Click on **GraphQL Schema** tab to view the schema.\n\n  ![](images/tutorial_html_b27d147e1a49276b.png)\n\n3.GraphQL Schema editor displays *Type* and *Type Weight* information. The weighting factor is used when calculating the type cost for a request to the GraphQL API. For example, a field that requires extensive CPU or memory use on the server to retrieve its value would be given a higher cost.\n\n  ![](images/graphql-schema.png)\n\n4.Let's view the *Warning* message in the *Query* field. In addition to the warning details, the Warning window gives an option to fix the warning by applying the limits. Click **Apply all** and **Apply** again.\n\n  ![](images/fixing-warnings.png)\n\n5.After applyting the recommendation the warning message is removed. Click **Save** to save the API definition .\n\n  ![](images/tutorial_html_63ce76efdb0032d7.png)\n\n6.Now, let's open the **Assembly** view. The flow is automatically created as part of the initial API creation. You may apply addition logic by dragging and dropping items from the pallet to the canvas. In this tutorial, you are not adding additional logic.\n\n  ![](images/tutorial_html_a2cd4daada4f2ca5.png)\n\n7.To publish the API toggle the button from offline to **online**.\n\n  ![](images/tutorial_html_965b91d211caf432.png)\n\n8.After successfully publishing the API to API Gateway, additional tabs appear on the screen. Select **Test** tab to test the API.\n\n  ![](images/graphql-editor.png)\n\n9.The Test feature also includes a GraphQL Editor. Enter the following JSON in the GraphQL Editor. You may use *Prettify* option to improve the visualization of the JSON.\n\n```\n{\n  accounts(limit: 2) {\n    name {\n      first\n      last\n    }\n  }\n}\n```\n\n10.Click **Run** button to send the GraphQL request to the end point.\n\n  ![](images/graphql-run.png)\n\n11.An exception window will appear when you use test the API for the first time. Click accept Exception to continue.\n\n  ![](images/tutorial_html_98d8f253e9342c8b.png)\n\n  You may see an invalid certificate issue page when you continue. This is because valid certificates are not applied in this test environment. If you are using Chrome browser you can accept the exception by typing \"thisisunsafe\" anywhere in the window. Similar workarounds are available for other browsers. For firefox browser, follow the steps from here - <https://support.mozilla.org/en-US/kb/error-codes-secure-websites>\n\n  ![](images/tutorial_html_ac0c773416db4db7.png)\n\n12.The results for GraphQL request are displayed on the right panel. In the request we limited the values to 2, so only two accounts are displayed. Change the value to 5 and submit the request again and notice that more accounts are returned in the results window.\n\n  ![](images/graphql-run2.png)\n\n13.You can request additional data fields (refer to the schema editor for details), GraphQL may reject if certain fields are locked or prohibited. To test this, enter CreditCard information in the request field.\n\n  The complete request looks as follows:\n\n```\n{\n  accounts(limit: 2) {\n    name {\n      first\n      last\n    }\n    shippingAddress {\n      building\n      street\n    }\n  }\n  creditCard {\n    number\n    expirationDate\n  }\n}\n```\n\n  You will notice that an error message is displayed in the results window instead of the account values. This was caused because the server restricts the query field creditCard.\n\n\n  ![](images/credit-card.png)\n\n15.Submit another request to get account and shipping address details. This time the values are turned without errors.\n\n```\n{\n  accounts(limit: 2) {\n    name {\n      first\n      last\n    }\n    shippingAddress {\n      building\n      street\n      state\n      zip\n    }\n  }\n}\n```\n\n  ![](images/shipping-address.png)\n\n16.On *breadcrumbs*, return to **Develop** page.\n\n  ![](images/develop-page.png)\n\n\n***\n\n## Create a Product and apply GraphQL RateLimits\n\n1.Click **Add-\\>Product**.\n\n  ![](images/tutorial_html_4f43bda35452bd65.png)\n\n2.Select **New product** and click **Next**.\n\n  ![](images/new-product.png)\n\n3.Name the product as **Accounts Product** and click **Next**.\n\n  ![](images/tutorial_html_d0c3992a4bd7bc24.png)\n\n4.Add Accounts API to the product by selecting accounts. Click Next to continue to create the accounts-product.\n\n  ![](images/tutorial_html_4ae09f5fddd82bab.png)\n\n5.The *Default Plan* contains traditional rate limiting options, but in next steps, you will be able to list GraphQL Rate Limits.\n\n  ![](images/default-traditional-rate.png)\n\n6.Publish the Product to Sandbox Catalog by selecting **Publish product**. Accept the default for *Visibility* and *Subscribability* and click **Next**.\n\n  ![](images/publish-product.png)\n\n7.Great! You have your ner product. Click **Done**.\n\n  ![](images/product-done.png)\n\n8.Back to the *Develop* view, open **Products** tab and click on **Accounts Product**.\n\n  ![](images/accounts-product.png)\n\n9.Open the **Plans** section, and on the *Default Plan*, open the *Context menu* and select **Edit**.\n\n  ![](images/accounts-plan.png)\n\n10.Scroll down, and now you can see the *GraphQL rate limits*. You will be able to adjust GraphQL cost parameters from this section (including costs per field or type). You can set a limit or make it unlimited. In this tutorial, you will not be making any changes.\n\n  If you want to understand how the GraphQL rate limits work, check this [documentation page](https://www.ibm.com/docs/en/api-connect/10.0.x?topic=api-securing-graphql-by-using-client-id). On the left menu, click **Manage** icon to manage our Sandbox catalog.\n\n  ![](images/graphql-rate-limits.png)\n\n***\n\n## Explore the API from Developer Portal\n\nNow that we’ve published our API, we need to make sure that our API consumers can discover it and use it. Our Portal will allow customers to view the APIs, sign up and subscribe to plans in a self-service manner, test the APIs, download the OpenAPI - Swagger documents and more. Let’s explore it.\n\n1.Let's get our Portal URL. On *Manage* page, open the **Sandbox** catalog.\n\n  ![](images/sandbox-catalog.png)\n\n2.Click **Catalog settings** and open the **Portal** tab.\n\n  ![](images/catalog-settings.png)\n\n3.Great, here you have your *Portal URL*. **Copy** it, and open it in a new browser tab.\n\n  ![](images/portal-url.png)\n\n4.Sign in to Developer Portal using your developer username and password. If you don't have one, you are welcome to create a Developer account.\n\n  ![](images/tutorial_html_c34973eb377015ce.png)\n\n5.Developer Portal displays all the products that are currently published. Locate accounts-product and select the product.\n\n  ![](images/tutorial_html_2635d049f12d59c6.png)\n\n6.The selected product lists one API (accounts api) and one Plan (Default Plan). Select Subscribe option to subscribe to the plan.\n\n  ![](images/tutorial_html_bd0ea34d4f40d756.png)\n\n7.The Plan subscription requires an Application. You can create a new Application or select the IBM Consumer application that is already created.\n\n  ![](images/tutorial_html_2fd3cf48168675e5.png)\n\n8.Select accounts API to review and test the API. Click accounts to continue\n\n  ![](images/tutorial_html_8a5975dd9780a924.png)\n\n9.Developer Portal displays the type as GrahQL API. Currently Client ID security is enforced. Since there is only on Plan and one Consumer Application, the Consumer ID filed is already populated.\n\n  ![](images/tutorial_html_e8892b4b3da410fc.png)\n\n10.To continue to test the API, use the GraphQL Editor. Submit requests with different field names and watch how quickly the results are returned in the results window. If this was a REST API multiple end points will be needed to achieve the same result.\n\n  ![](images/tutorial_html_9575e27d8184b8fc.png)\n\n***\n\n## Summary\n\nCongratulations! You have successfully created a GraphQL Proxy API, published the API as part of a Product, applied controls and rate limits, and tested using Developer Portal.\n\nTo learn more about Cloud Pak for Integration and API Life Cycle Management, visit <https://www.ibm.com/cloud/cloud-pak-for-integration>\n","type":"Mdx","contentDigest":"e689852d59b013fe7abdd85007c7afa3","counter":1435,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"API Lifecycle Lab - Manage GraphQL API"},"exports":{},"rawBody":"---\ntitle: API Lifecycle Lab - Manage GraphQL API\n---\n\nimport ArticleDetails from '../../../../src/gatsby-theme-carbon/components/ArticleDetails'\n\n\n<FeatureCard\n  title=\"API Lifecycle Lab - Manage GraphQL API\"\n  color=\"dark\"\n  >\n\n![banner](images/api-lab-banner.jpg)\n\n</FeatureCard>\n\n<AnchorLinks>\n  <AnchorLink>Lab Overview</AnchorLink>\n  <AnchorLink>Prerequisites</AnchorLink>\n  <AnchorLink>Business Context</AnchorLink>\n  <AnchorLink>Create a GraphQL Proxy API</AnchorLink>\n  <AnchorLink>Edit and Test API</AnchorLink>\n  <AnchorLink>Create a Product and apply GraphQL RateLimits</AnchorLink>\n  <AnchorLink>Explore the API from Developer Portal</AnchorLink>\n  <AnchorLink>Summary</AnchorLink>\n</AnchorLinks>\n\n***\n\n<ArticleDetails name=\"Ravi Katikala\" lastUpdated=\"May 2021\" readTimeMinutes=\"45\" />\n\nNeed support? Contact **Rafael Osorio**\n\n***\n\n## Lab Overview\n\nIn this tutorial, you use the IBM Cloud Pak for Integration 2021.1.1 to define GraphQL APIs that proxy to a backend GraphQL server. GraphQL is a query language for APIs that gives an application client greater control over what data it retrieves in an API request when compared with a REST API request.\n\nAPI Connect GraphQL support also allows rate limiting and other controls using API Gateway.\n\nIn this tutorial, you will explore the following key capabilities:\n- Create a GraphQL Proxy API\n- Learn about GraphQL introspection and Schema Editor\n- Test APIs by using the built-in GraphQL editor\n- Review API Assembly Policies for the cost end point\n\n***\n\n## Prerequisites\n\n  - You need to have your personal CP4I on ROKS environment. [Check here how to request it](https://ibm-garage-tsa.github.io/cp4i-demohub/cp4i-on-roks/)\n\n***\n\n## Business Context\n\nAs a developer, you are having problems to manage the use of GraphQL APIs in your company.\n\nGraphQL provides the following particular advantages over REST APIs:\n  - The application client can request only the data that it needs. For example, when retrieving bank account records, request only the account number and current balance for each account, but not the customer name and address details. With a REST API request, either the backend REST service must provide separate endpoints for different data subsets, or the application client must retrieve the complete records and then discard the unwanted data.\n  - The application client can retrieve multiple related resources in a single request. For example, a customer's bank account record might include an array that references other finance products that the customer holds. If an application client wants to retrieve the bank account details for a specific customer, and details of the other finance products for that customer, then with a REST API the client would first retrieve the bank account details, then make separate requests for each of the other products. A GraphQL API can be designed to allow the client to retrieve all this information in a single request.\n\nHowever, this flexibility presents rate limiting challenges, because two seemingly very similar requests might return vastly different amounts of data, and what might have required multiple REST API requests, each counting towards the rate limit, might require only a single GraphQL API request. It is important therefore that rate limiting controls are imposed that reflect the amount of data that is retrieved. \n\nCloud Pak for Integration API Connect enables you to create a GraphQL API proxy definition that proxies a backend GraphQL server.  API Connect extends the GraphQL standard by providing, in a GraphQL API definition, the ability to configure a range of settings that are used to calculate the complexity of a GraphQL request and an associated cost that counts towards the rate limit.\n\n***\n\n## Create a GraphQL Proxy API\n\n1.Open a browser and go to your **Cloud Pak for Integration Platform Navigation**. On the **API Lifecycle management** box, click to open your **API Connect** Runtime.\n\n  ![](images/graphql-cp4i-home.png)\n\n2.On the Log In page, if you are using admin user, select *Common Services User Registry*. But if you are using LDAP users, you need to select your **LDAP User Registry** on the right side. Go ahead and **log in**.\n\n  ![](images/graphql-login.png)\n\n3.Select **Develop APIs and products**.\n\n  ![](images/graphql-develop-apis.png)\n\n  Then click **Add-\\>API (from REST, GraphQL or SOAP)**.\n\n  ![](images/add-api-graphql.png)\n\n4.To create a GraphQL proxy, select **From Existing GraphQL service (GraphQL proxy)**. When you point to an existing GraphQL server, API Connect introspects the service and automatically creates a GraphQL proxy service.\n\n  ![](images/tutorial_html_797b2f887d77017c.png)\n\n5.Enter the following values and click **Next**. You can use default values for the rest.\n\n  Title: **accounts**\n\n  GraphQL server URL: **https://graphql-test-server.us-east.cf.appdomain.cloud/accounts/graphql**\n\n  ![](images/tutorial_html_f83e60ae96763438.png)\n\n  ![](images/tutorial_html_90e0cbad29eca5a.png)\n\n6.In the Paths section, select **all** the available end points.\n\n  ![](images/all-endpoints.png)\n\n7.The schema validator reports warning and errors if found. There are two warnings in the accounts schema. Click **View** to get the Warning details. A review of the schema shows that no limit is set on the size of the list. You will fix this warning in later steps. Click Next to continue.\n\n  ![](images/view-warning-graphql.png)\n\n  ![](images/tutorial_html_8104c10fce21e609.png)\n\n8.Keep both **Secure using Client ID** and **CORS** checked and click **Next**.\n\n  ![](images/tutorial_html_464f81f24c7d47dd.png)\n\n9.API Connect successfully created a GraphQL proxy API.\n\n  ![](images/api-graphql-success.png)\n\n***\n\n## Edit and Test API\n\n1.Now, let's edit the API to view more details on the proxy API just created. Click **Edit API** to continue.\n\n  ![](images/tutorial_html_e70bb58508f9b662.png)\n\n2.GraphQL APIs are structured the same as REST APIs with some additional options. Just like REST APIs, you will be able to add security definitions, properties and Activity logs from the left menu bar. You can also view the *Source* and *Assemble* tabs similar to REST APIs. You will notice a new tab for GraphQL APIs. Click on **GraphQL Schema** tab to view the schema.\n\n  ![](images/tutorial_html_b27d147e1a49276b.png)\n\n3.GraphQL Schema editor displays *Type* and *Type Weight* information. The weighting factor is used when calculating the type cost for a request to the GraphQL API. For example, a field that requires extensive CPU or memory use on the server to retrieve its value would be given a higher cost.\n\n  ![](images/graphql-schema.png)\n\n4.Let's view the *Warning* message in the *Query* field. In addition to the warning details, the Warning window gives an option to fix the warning by applying the limits. Click **Apply all** and **Apply** again.\n\n  ![](images/fixing-warnings.png)\n\n5.After applyting the recommendation the warning message is removed. Click **Save** to save the API definition .\n\n  ![](images/tutorial_html_63ce76efdb0032d7.png)\n\n6.Now, let's open the **Assembly** view. The flow is automatically created as part of the initial API creation. You may apply addition logic by dragging and dropping items from the pallet to the canvas. In this tutorial, you are not adding additional logic.\n\n  ![](images/tutorial_html_a2cd4daada4f2ca5.png)\n\n7.To publish the API toggle the button from offline to **online**.\n\n  ![](images/tutorial_html_965b91d211caf432.png)\n\n8.After successfully publishing the API to API Gateway, additional tabs appear on the screen. Select **Test** tab to test the API.\n\n  ![](images/graphql-editor.png)\n\n9.The Test feature also includes a GraphQL Editor. Enter the following JSON in the GraphQL Editor. You may use *Prettify* option to improve the visualization of the JSON.\n\n```\n{\n  accounts(limit: 2) {\n    name {\n      first\n      last\n    }\n  }\n}\n```\n\n10.Click **Run** button to send the GraphQL request to the end point.\n\n  ![](images/graphql-run.png)\n\n11.An exception window will appear when you use test the API for the first time. Click accept Exception to continue.\n\n  ![](images/tutorial_html_98d8f253e9342c8b.png)\n\n  You may see an invalid certificate issue page when you continue. This is because valid certificates are not applied in this test environment. If you are using Chrome browser you can accept the exception by typing \"thisisunsafe\" anywhere in the window. Similar workarounds are available for other browsers. For firefox browser, follow the steps from here - <https://support.mozilla.org/en-US/kb/error-codes-secure-websites>\n\n  ![](images/tutorial_html_ac0c773416db4db7.png)\n\n12.The results for GraphQL request are displayed on the right panel. In the request we limited the values to 2, so only two accounts are displayed. Change the value to 5 and submit the request again and notice that more accounts are returned in the results window.\n\n  ![](images/graphql-run2.png)\n\n13.You can request additional data fields (refer to the schema editor for details), GraphQL may reject if certain fields are locked or prohibited. To test this, enter CreditCard information in the request field.\n\n  The complete request looks as follows:\n\n```\n{\n  accounts(limit: 2) {\n    name {\n      first\n      last\n    }\n    shippingAddress {\n      building\n      street\n    }\n  }\n  creditCard {\n    number\n    expirationDate\n  }\n}\n```\n\n  You will notice that an error message is displayed in the results window instead of the account values. This was caused because the server restricts the query field creditCard.\n\n\n  ![](images/credit-card.png)\n\n15.Submit another request to get account and shipping address details. This time the values are turned without errors.\n\n```\n{\n  accounts(limit: 2) {\n    name {\n      first\n      last\n    }\n    shippingAddress {\n      building\n      street\n      state\n      zip\n    }\n  }\n}\n```\n\n  ![](images/shipping-address.png)\n\n16.On *breadcrumbs*, return to **Develop** page.\n\n  ![](images/develop-page.png)\n\n\n***\n\n## Create a Product and apply GraphQL RateLimits\n\n1.Click **Add-\\>Product**.\n\n  ![](images/tutorial_html_4f43bda35452bd65.png)\n\n2.Select **New product** and click **Next**.\n\n  ![](images/new-product.png)\n\n3.Name the product as **Accounts Product** and click **Next**.\n\n  ![](images/tutorial_html_d0c3992a4bd7bc24.png)\n\n4.Add Accounts API to the product by selecting accounts. Click Next to continue to create the accounts-product.\n\n  ![](images/tutorial_html_4ae09f5fddd82bab.png)\n\n5.The *Default Plan* contains traditional rate limiting options, but in next steps, you will be able to list GraphQL Rate Limits.\n\n  ![](images/default-traditional-rate.png)\n\n6.Publish the Product to Sandbox Catalog by selecting **Publish product**. Accept the default for *Visibility* and *Subscribability* and click **Next**.\n\n  ![](images/publish-product.png)\n\n7.Great! You have your ner product. Click **Done**.\n\n  ![](images/product-done.png)\n\n8.Back to the *Develop* view, open **Products** tab and click on **Accounts Product**.\n\n  ![](images/accounts-product.png)\n\n9.Open the **Plans** section, and on the *Default Plan*, open the *Context menu* and select **Edit**.\n\n  ![](images/accounts-plan.png)\n\n10.Scroll down, and now you can see the *GraphQL rate limits*. You will be able to adjust GraphQL cost parameters from this section (including costs per field or type). You can set a limit or make it unlimited. In this tutorial, you will not be making any changes.\n\n  If you want to understand how the GraphQL rate limits work, check this [documentation page](https://www.ibm.com/docs/en/api-connect/10.0.x?topic=api-securing-graphql-by-using-client-id). On the left menu, click **Manage** icon to manage our Sandbox catalog.\n\n  ![](images/graphql-rate-limits.png)\n\n***\n\n## Explore the API from Developer Portal\n\nNow that we’ve published our API, we need to make sure that our API consumers can discover it and use it. Our Portal will allow customers to view the APIs, sign up and subscribe to plans in a self-service manner, test the APIs, download the OpenAPI - Swagger documents and more. Let’s explore it.\n\n1.Let's get our Portal URL. On *Manage* page, open the **Sandbox** catalog.\n\n  ![](images/sandbox-catalog.png)\n\n2.Click **Catalog settings** and open the **Portal** tab.\n\n  ![](images/catalog-settings.png)\n\n3.Great, here you have your *Portal URL*. **Copy** it, and open it in a new browser tab.\n\n  ![](images/portal-url.png)\n\n4.Sign in to Developer Portal using your developer username and password. If you don't have one, you are welcome to create a Developer account.\n\n  ![](images/tutorial_html_c34973eb377015ce.png)\n\n5.Developer Portal displays all the products that are currently published. Locate accounts-product and select the product.\n\n  ![](images/tutorial_html_2635d049f12d59c6.png)\n\n6.The selected product lists one API (accounts api) and one Plan (Default Plan). Select Subscribe option to subscribe to the plan.\n\n  ![](images/tutorial_html_bd0ea34d4f40d756.png)\n\n7.The Plan subscription requires an Application. You can create a new Application or select the IBM Consumer application that is already created.\n\n  ![](images/tutorial_html_2fd3cf48168675e5.png)\n\n8.Select accounts API to review and test the API. Click accounts to continue\n\n  ![](images/tutorial_html_8a5975dd9780a924.png)\n\n9.Developer Portal displays the type as GrahQL API. Currently Client ID security is enforced. Since there is only on Plan and one Consumer Application, the Consumer ID filed is already populated.\n\n  ![](images/tutorial_html_e8892b4b3da410fc.png)\n\n10.To continue to test the API, use the GraphQL Editor. Submit requests with different field names and watch how quickly the results are returned in the results window. If this was a REST API multiple end points will be needed to achieve the same result.\n\n  ![](images/tutorial_html_9575e27d8184b8fc.png)\n\n***\n\n## Summary\n\nCongratulations! You have successfully created a GraphQL Proxy API, published the API as part of a Product, applied controls and rate limits, and tested using Developer Portal.\n\nTo learn more about Cloud Pak for Integration and API Life Cycle Management, visit <https://www.ibm.com/cloud/cloud-pak-for-integration>\n","fileAbsolutePath":"/Users/rosorio@br.ibm.com/Documents/GitHub/cp4i-demohub/src/pages/tutorials/ManageGraphQL/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}