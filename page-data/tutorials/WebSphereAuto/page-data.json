{"componentChunkName":"component---src-pages-tutorials-web-sphere-auto-index-mdx","path":"/tutorials/WebSphereAuto/","result":{"pageContext":{"frontmatter":{"title":"Strengthen Operational Security with IBM WebSphere Automation"},"relativePagePath":"/tutorials/WebSphereAuto/index.mdx","titleType":"page","MdxNode":{"id":"b0fee8e8-5a17-592f-b136-8e7983cc644a","children":[],"parent":"f5f47921-e3f5-5b58-af23-4e927b56dc4f","internal":{"content":"---\r\ntitle: Strengthen Operational Security with IBM WebSphere Automation\r\n---\r\n\r\nimport ArticleDetails from '../../../../src/gatsby-theme-carbon/components/ArticleDetails'\r\n\r\n\r\n<FeatureCard\r\n  title=\"Strengthen Operational Security with IBM WebSphere Automation\"\r\n  color=\"dark\"\r\n  >\r\n\r\n![banner](images/automation.jpg)\r\n\r\n</FeatureCard>\r\n\r\n<AnchorLinks>\r\n  <AnchorLink>Introduction</AnchorLink>\r\n  <AnchorLink>Prerequisites</AnchorLink>\r\n  <AnchorLink>Business Context</AnchorLink>\r\n  <AnchorLink>Accessing and starting the environment</AnchorLink>\r\n  <AnchorLink>Receiving vulnerability notifications</AnchorLink>\r\n  <AnchorLink>Getting configuration parameters</AnchorLink>\r\n  <AnchorLink>Configuring Liberty server v20.0.0.12</AnchorLink>\r\n  <AnchorLink>Configuring Liberty server v20.0.0.9</AnchorLink>\r\n  <AnchorLink>Configuring traditional WebSphere (tWAS) v9.0.5.6</AnchorLink>\r\n  <AnchorLink>Configuring traditional WebSphere (tWAS) v9.0.5.7</AnchorLink>\r\n  <AnchorLink>Update Liberty server v20.0.0.9 to fix the vulnerability</AnchorLink>\r\n  <AnchorLink>Update tWAS server v9.0.5.7 to fix the vulnerability</AnchorLink>\r\n  <AnchorLink>Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional)</AnchorLink>\r\n  <AnchorLink>Summary</AnchorLink>\r\n</AnchorLinks>\r\n\r\n***\r\n\r\n<ArticleDetails name=\"Tien-Thanh Le\" lastUpdated=\"June 2021\" readTimeMinutes=\"45\" />\r\n\r\nNeed support? Contact **Rafael Osorio** and **Kevin Postreich**\r\n\r\n***\r\n\r\n## Introduction\r\n\r\nOrganizations are challenged to transform quickly and maximize ROI, while keeping traditional and modern applications running together securely. Reclaiming productivity is key to giving teams back the time required to innovate and build resiliency.\r\n\r\nUnfortunately, massive transformation programs are hard to greenlight and most fail to deliver immediate results. According to Gartner, AI augmentation will recover 6.2 billion hours of worker productivity in 20211 – time that can be invested in creating a solid and secure base for WebSphere transformation.\r\n\r\nBy leveraging AI and automation, organizations can achieve immediate savings and business benefits, while laying a solid and secure technology foundation for future growth.\r\n\r\nWith AI and automation, teams can modernize and secure their IT estate as well as adapt and respond to incidents efficiently. WebSphere system administrators can reduce the cost, effort, and risk of addressing vulnerabilities and anomalies, automate critical activities, preserve uptime and remediate capacity incidents.\r\n\r\nIBM WebSphere Automation makes business efficiency and resiliency standard. It helps teams work less on maintenance tasks and gives time back to focus more on strategic activities, to extend the life, increase the ROI, and unlock new value from WebSphere investments.\r\n\r\nIBM WebSphere Automation is a complete solution to help administrators and operators quickly unlock value with increased security, resiliency and performance.\r\n\r\n**Secure operations to reduce risk and meet compliance**\r\n  – Automatically recognize and recommend relevant CVEs for specific server deployments.\r\n  – Deliver security patches more efficiently to targeted environments.\r\n  – Maintain the notification system for all the security response team members from a central location.\r\n\r\n**Build operational resiliency**\r\n  – Sense and respond to security vulnerabilities faster to avoid disruptions for WebSphere apps.\r\n\r\n**Optimize runtimes and applications for operational performance**\r\n  – Access consolidated information for a streamlined operational experience.\r\n  – Reduce tedious tasks and achieve cost and time savings through optimal resource utilization, capacity provisioning and implementation of best practices across environments.\r\n\r\n**Start small, scale and standardize on IBM Automation**\r\n  – Build automation capabilities on top of the IBM Automation foundation for enterprise-level hybrid application management, observability, governance and compliance.\r\n\r\nIBM WebSphere Automation is available as a stand-alone offering or as an addition to IBM Cloud Pak® for Watson AIOps. As part of IBM Automation platform, IBM WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere’s incidents, hybrid applications, and cost with complete observability, governance and compliance. Deploy virtually anywhere through containers supported by Red Hat® OpenShift® software, on IBM Cloud®, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that’s designed to be easy to consume.\r\n\r\n***\r\n\r\n## Prerequisites\r\n\r\n  - You need to have the WebSphere Automation Skytap Image. [Request here](/)\r\n\r\n***\r\n\r\n## Business Context\r\n\r\nYou are a WebSphere Administrator part of a WebSphere Operations Team. Today, you subscribe and receive IBM Security Bulletins to be aware about vulnerabilities, its potential impact, severity and recommended solutions. Based on that you check if this CVE applies to your managed inventory. Now, your inventory is a spreadsheet, with all the information about your servers, which versions, which operational system, which iFixes were applied, etc. It is very manual process and you are trying to automate it.\r\n\r\nYou would like to have:\r\n- **Management dashboard:** Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs).\r\n- **Automated vulnerability tracking:** Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers.\r\n- **Contextual notifications:** Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team.\r\n- **Shared, live visibility to key stakeholders:** WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication.\r\n\r\nIn this tutorial, you use the IBM WebSphere Automation to secure operatios to reduce risk and meet compliance.\r\n\r\nAt the end of this lab, you will be able to connect teams with the most relevant information through a single dashboard to discover, analyze and remediate common vulnerabilities and exposures across instances.\r\n\r\n***\r\n\r\n## Accessing and starting the environment\r\n\r\n1.When the demo environment is provisioned you should receive the email with link and access password. Open the link and provide the password. You should see the following screen:\r\n\r\n  ![](images/skytap-1.png)\r\n\r\n  WebSphere Automation is pre-installed in the OCP cluster hosted on the VMs.\r\n\r\n2.Start the environment with the Play button in the top-right corner. It takes about 10-15 minutes for the environment to start and stabilize.\r\n\r\n  ![](images/skytap-2.png)\r\n\r\n3.You will be working on the Student VM only. This VM is installed with OCP client (oc) and all thee scripts and files you need for the lab.\r\n\r\n  All the WebSphere images and iFixes required for the lab are pre-installed:\r\n  - /opt/IBM/WebSphere/Liberty200012/\r\n  - /opt/IBM/WebSphere/Liberty20009/\r\n  - /opt/IBM/WebSphere/AppServer9057/\r\n  - /opt/IBM/WebSphere/AppServer9056/\r\n\r\n  Click the screen representing the **STUDENT** VM.\r\n\r\n  ![](images/student-vm.png)\r\n\r\n4.Once you log in to the Student VM you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.)\r\n\r\n  ![](images/student-vm-screen.png)\r\n\r\n5.You can resize the virtual desktop with the Fit to window button.\r\n\r\n  ![](images/fit-to-window.png)\r\n\r\n***\r\n\r\n## Receiving vulnerability notifications\r\n\r\n### Accessing the WebSphere Automation UI\r\n\r\nA WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Server and WebSphere Application Server Liberty servers for vulnerability tracking and by configuring email notifications. WebSphere administrators can also view the results of vulnerability assessment in WebSphere Automation to plan their response for the WebSphere Application Server and WebSphere Application Server Liberty servers that they manage.\r\n\r\nFor this tutorial, WebSphere Automation is pre-installed on an OCP cluster. You have your individual WebSphere Automation installation. Let's access your environment.\r\n\r\n1.On the *Student VM*, open a browser and enter the following URL:\r\n```\r\nhttps://cpd-websphere-automation.apps.ocp.ibm.edu\r\n```\r\n\r\n  ![](images/opening-browser.png)\r\n\r\n  If necessary, accept all the warnings and certificates. Depending on your browser, you might have to scroll down to permit access.\r\n\r\n2.On the login page, select the **OpenShift authentication** as the authentication type.\r\n\r\n  ![](images/openshift-authentication.png)\r\n\r\n3.Enter **ocadmin** as username and **ibmocp46** as password. And click **Log In**.\r\n\r\n  ![](images/ocp-ui-login.png)\r\n\r\n4.The *IBM Automation Welcome page* appears.\r\n\r\n  ![](images/welcome-page.png)\r\n\r\n5.On the Welcome page, open the **Menu**, click **Operate**, and then click **Application runtimes**.\r\n\r\n  ![](images/welcome-menu.png)\r\n\r\n6.The Application runtimes page appears. There should be no data since no WebSphere servers are registered/configured yet.\r\n\r\n  ![](images/app-runtime.png)\r\n\r\n7.However, before start to register servers to our Dashboard, let's configure your email to received notifications abouts CVEs. Open the **Notification configuration** tab.\r\n\r\n  ![](images/notification-config.png)\r\n\r\n8.The Email server configuration is pre-configured for this lab. You only need to add your personal email to receive notifications of new security vulnerabilities. Click **Add email address** (1) and enter *your email* and click **Save** (2).\r\n\r\n  ![](images/notification-email.png)\r\n\r\n  Great! Your email is configured to receive security notifications. Next section, you start to register our servers to WebSphere Automation.\r\n\r\n***\r\n\r\n## Getting configuration parameters\r\n\r\nAdd each of your WebSphere® Application Server servers and WebSphere Application Server Liberty servers to WebSphere Automation by registering them with the usage metering service.\r\n\r\nTo register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. To configure the usage metering feature in each of your application servers, you must obtain the following usage metering items:\r\n- **URL**: The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server servers and Liberty servers with WebSphere Automation so that you can track security vulnerabilities.\r\n- **API Key**: The token used to authenticate the WebSphere Application Server servers and Liberty servers during the registration process.\r\n- **Usage metering certificate**: The certificate that contains the public key. This key allows an application server that is registering with WebSphere Automation to do an SSL handshake with the metering service.\r\n\r\nIn this section, you will get these configuration parameters. Let's start it!\r\n\r\n1.Back to the desktop, open a **terminal** window.\r\n\r\n  ![](images/open-terminal.png)\r\n\r\n2.Log in as **root**.\r\n```\r\nsu root\r\n```\r\n  Enter the following password when prompted:\r\n```\r\n1bm2021rhjb\r\n```\r\n\r\n3.Now, let's log in to the OCP Cluster using the command below:\r\n```\r\noc login --username=ocadmin --password=ibmocp46 --insecure-skip-tls-verify=true --server=https://api.ocp.ibm.edu:6443\r\n```\r\n\r\n  ![](images/oc-login.png)\r\n\r\n4.Make sure that the project you are working on is websphere-automation:\r\n```\r\noc project websphere-automation\r\n```\r\n\r\n5.Now, let's use the oc command to get the URL of the usage metering service in WebSphere Automation and save it in a file:\r\n```\r\necho https://$(oc get route cpd -n websphere-automation -o jsonpath='{.spec.host}')/websphereauto/meteringapi > /opt/IBM/WebSphere/metering-url.txt\r\n```\r\n\r\n6.Let's get the api-key and save it in a file too.\r\n```\r\noc -n websphere-automation get secret automation-secure-metering-apis-encrypted-tokens -o jsonpath='{.data.automation-secure-metering-apis-sa}' | base64 -d > /opt/IBM/WebSphere/api-key.txt; echo >> /opt/IBM/WebSphere/api-key.txt\r\n```\r\n\r\n7.Finally, let's get the Server certificate and save it in a file.\r\n```\r\noc get secret external-tls-secret -n websphere-automation -o jsonpath='{.data.cert\\.crt}' | base64 -d > /opt/IBM/WebSphere/cacert.pem\r\n```\r\n\r\n  Great! Now you have all the configuration parameters to register your application servers with the usage metering service in WebSphere Automation. Next section, you register your first server in WebSphere Automation.\r\n\r\n***\r\n\r\n## Configuring Liberty server v20.0.0.12\r\n\r\nIn this section, you configure Liberty Server version 20.0.0.12 to register to WebSphere Automation.\r\n\r\n1.Let's create a Liberty server version 20.0.0.12, using the command below:\r\n```\r\n/opt/IBM/WebSphere/Liberty200012/bin/server create Liberty_200012_server\r\n```\r\n\r\n  ![](images/2012-server-created.png)\r\n\r\n2.Now you need to configure the server to use TLS/SSL using the provided server_tls.xml file:\r\n```\r\n\\cp -f /home/ibmuser/Desktop/lab_backup/liberty200012/server_tls.xml /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml\r\n```\r\n\r\n3.Let's start the Liberty server:\r\n```\r\n/opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server\r\n```\r\n\r\n  ![](images/starting-server-200012.png)\r\n\r\n4.Now, you need to update the DefaultKeyStore with the server certificate to trust the server for https connection:\r\n```\r\nkeytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt\r\n```\r\n\r\n  ![](images/certificate-store.png)\r\n\r\n5.It's time to configure the usage metering in the new server. Edit the **server.xml** file.\r\n```\r\nvi /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml\r\n```\r\n\r\n6.Add the **usageMetering-1.0** feature to the existing features in the `<featureManager>` element (check the picture below)\r\n```\r\n<feature>usageMetering-1.0</feature>\r\n```\r\n\r\n  ![](images/vi-server-200012.png)\r\n\r\n7.Add the **usageMetering** element below:\r\n```\r\n<usageMetering url=\"<metering-url>\" apiKey=\"<api-key>\" sslRef=\"defaultSSL\"/>\r\n```\r\n\r\n  ![](images/usage-metering-200012.png)\r\n\r\n8.You need to replace the `<metering-url>` with the output of the following command. Open another terminal window, and run the cat command below:\r\n```\r\ncat /opt/IBM/WebSphere/metering-url.txt\r\n```\r\n\r\n  ![](images/metering-url.png)\r\n\r\n9.Replace `<api-key>` above with the output of the following cat command. Use the second terminal to run the cat command:\r\n```\r\ncat /opt/IBM/WebSphere/api-key.txt\r\n```\r\n\r\n  ![](images/api-key.png)\r\n\r\n10.**Save** and **Close** the server.xml file.\r\n\r\n11.Back to the WebSphere Automation Dashboard on your browser, open the **Servers** view.\r\n\r\n  ![](images/app_runtimes_servers.png)\r\n\r\n12.Confirm that the Liberty server is registered to WebSphere Automation Application runtimes page.\r\n\r\n  ![](images/dashboard-server-1.png)\r\n\r\n  Maybe your server vulnerability is a little bit different of the picture above. That is a possibility, since new vulnerabilities are constantly discovered.\r\n\r\n***\r\n\r\n## Configuring Liberty server v20.0.0.9\r\n\r\nIn this section, you configure another Liberty Server to your WebSphere Automation dashboard. The process is the same (using the usage metering service in WebSphere Automation). However, to simplify tha lab we have pre-created the configuration files to make the configuration simpler.\r\n\r\n1.First, you need to create the Liberty server version 20.0.0.9, using the command below:\r\n```\r\n/opt/IBM/WebSphere/Liberty20009/bin/server create Liberty_20009_server\r\n```\r\n\r\n2.Since you have already configured usageMetering feature for Liberty version 20.0.0.12, we have a provided couple of server.xml files to make the configuration simpler. First copy the tls configuration:\r\n```\r\n\\cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_tls.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml\r\n```\r\n\r\n3.Start the Liberty server:\r\n\r\n```\r\n/opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server\r\n```\r\n\r\n4.Update the DefaultKeyStore with the server certificate to trust the server for https connections:\r\n\r\n```\r\nkeytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt\r\n```\r\n\r\n5.Copy the server.xml that contains the usageMetering feature and properties (url, api-key):\r\n\r\n```\r\n\\cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_configured.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml\r\n```\r\n6.Back to the WebSphere Automation dashboard, confirm that the new Liberty server is registered.\r\n\r\n   ![](images/dashboard-server2.png)\r\n\r\n  The dashboard shows that this server is vulnerable for some CVEs, including the CVE-2020-10693.\r\n\r\n    ![](images/dashboard-CVE-2020-10693.png)\r\n\r\n7.Check your email. A mail notification was sent indicating the vulnerability. In the email message, there will be a link that would redirect to the console to show more details on the vulnerability. Because of network restrictions in the lab environment, this link will not work.\r\n\r\n   ![](images/vulnerability-email.png)\r\n\r\n\r\n***\r\n\r\n## Configuring traditional WebSphere (tWAS) v9.0.5.6\r\n\r\nIn this section, you configure a traditional WebSphere Application Server to your WebSphere Automation dashboard. Here you use the wsadmin script to configure the usage metering service. Let's do it!\r\n\r\n1.First, let's start the tWAS 9.0.5.6 server. Back to the terminal window, execute the command below:\r\n```\r\n/opt/IBM/WebSphere/AppServer9056/bin/startServer.sh tWAS_9056_server\r\n```\r\n\r\n2.Now, you need to configure usage-metering using the wsadmin script below:\r\n```\r\n/opt/IBM/WebSphere/AppServer9056/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword\r\n```\r\n\r\n3.Great, you first traditional WAS server is configured. Let's check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.6 is registered.\r\n\r\n  ![](images/dashboard-tWAS1.png)\r\n\r\n  You should see that this server is vulnerable to 15 or more CVEs (new vulnerabilities are discovered constantly, so the number of CVEs depends when you run this lab).\r\n\r\n4.Check your email. A mail notification was sent showing the vulnerabilitiy.\r\n\r\n  ![](images/email-vulnerability2.png)\r\n\r\n***\r\n\r\n## Configuring traditional WebSphere (tWAS) v9.0.5.7\r\n\r\nIn this section, you configure another version of a traditional WebSphere Application Server to your WebSphere Automation dashboard. The steps here are the same of the last section.\r\n\r\n1.First, you just need to start the tWAS 9.0.5.7 server. On the terminal window, execute the command below:\r\n```\r\n/opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server\r\n```\r\n\r\n2.Again, you need to configure the usage-metering.\r\n```\r\n/opt/IBM/WebSphere/AppServer9057/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword\r\n```\r\n\r\n3.Great, you second traditional WAS server is configured. Let's check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.7 is registered.\r\n\r\n  ![](images/dashboard-tWAS2.png)\r\n\r\n  You should see that this server is vulnerable to CVE-2021-26296. As explained before, maybe your server has more vulnerability than displayed in the picture, because it depends when you execute your lab, since new vulnerabilities are discovered constantly.\r\n\r\n4.Again, check your email. A mail notification was sent showing the vulnerability.\r\n\r\n  ![](images/email-inbox.png)\r\n\r\n***\r\n\r\n## Update Liberty server v20.0.0.9 to fix the vulnerability\r\n\r\nIn this section, you will fix one vulnerability in our Liberty Server v20.0.0.9 using two different approaches. First, you fix only updating configuraiton. Later, you apply an iFix to solve the vulnerability. Let's see how to do it.\r\n\r\n### Updating configurations\r\n\r\nLiberty 20.0.0.9 is impacted by CVE-2020-10693. This is because it configures the beanValidation-2.0 feature. See [CVE-2020-10693](https://www.ibm.com/support/pages/node/6348216) for more info.\r\n\r\nWe should resolve this by applying the iFix. However, for the lab, we can also do a quick test by unconfiguring this feature:\r\n\r\n1.Edit the server.xml, using the command below:\r\n```\r\nvi /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml\r\n```\r\n\r\n2.Comment out the feature:\r\n```\r\n<!-- <feature>beanValidation-2.0</feature> -->\r\n```\r\n\r\n  ![](images/edit-beanvalidation.png)\r\n\r\n3.**Save** and **close** the *server.xml* file.\r\n\r\n4.Back to your browser, check that the Liberty 20.0.0.9 server does not show the CVE-2020-10693 vulnerability. The update is picked up automatically.\r\n\r\n  ![](images/no-CVE-2020-10693.png)\r\n\r\n  Great, you removed the vulnerability by updating the configuration.\r\n\r\n### By Applying an IFIX\r\n\r\nHowever, instead of remove the beanValidationFeature-2.0, the correct process is to apply the appropriate iFix to get rid of the vulnerability. Let's do it in this part.\r\n\r\n5.First, let's add back the beanValidation feature:\r\n\r\n```\r\nvi /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml\r\n```\r\n\r\n6.Uncomment out the feature:\r\n```\r\n<feature>beanValidation-2.0</feature>\r\n```\r\n\r\n  ![](images/uncomment.png)\r\n\r\n7.**Save** and **Close** the server.xml file.\r\n\r\n8.Back to the browser, make sure the vulnerability shows up again.\r\n\r\n  ![](images/cve-back.png)\r\n\r\n9.An email will also be sent out.\r\n\r\n  ![](images/email-again.png)\r\n\r\n10.You need to stop the server, before apply the iFix. Back to the terminal window, run the command below:\r\n```\r\n/opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server\r\n```\r\n\r\n11.Now, let's apply the iFix.\r\n```\r\n/iFix/PH29942/imcl_ifix_install.sh 20009\r\n```\r\n\r\n  ![](images/apply-fix.png)\r\n\r\n12.Great, you iFix was applied. Now, start the server again:\r\n```\r\n/opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server\r\n```\r\n\r\n13.Now, in your WebSphere Automation Dashboard you should notice that the CVE was removed:\r\n\r\n  ![](images/no-CVE-2020-10693.png)\r\n\r\n***\r\n\r\n## Update tWAS server v9.0.5.7 to fix the vulnerability\r\n\r\nIn this section, you will apply an iFix in tWAS 9.0.5.7 to remove the CVE-2021-26296 vulnerability.\r\n\r\n1.Notice in the console that tWAS 9.0.5.7 is vulnerable to CVE-2021-26296.\r\n\r\n  ![](images/CVE-2021-26296.png)\r\n\r\n  We will fix it by applying the appropriate iFix.\r\n\r\n2.First, stop the server, wait until it has stopped:\r\n```\r\n/opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server\r\n```\r\n\r\n3.Run the following script to install the iFix:\r\n```\r\n/iFix/PH34711/imcl_ifix_install.sh 9057\r\n```\r\n\r\n4.Start the server once the installation has completed:\r\n```\r\n/opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server\r\n```\r\n\r\n5.Go back to the WebSphere Automation dashboard. Notice that the CVE-2021-26296 was removed from tWAS 9.0.5.7.  Also, you can see on the right under \"Applied iFixes\" there are 4 applied fixes.\r\n\r\n  ![](images/ifix-applied.png)\r\n\r\n***\r\n\r\n## Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional)\r\n\r\nYou can remove the iFix that was applied to confirm that the CVE-2021-26296 shows up in the unresolved CVE list\r\n\r\n1.Stop the server:\r\n```\r\n/opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server\r\n```\r\n\r\n2.Uninstall the iFix:\r\n```\r\n/iFix/PH34711/imcl_ifix_uninstall.sh 9057\r\n```\r\n\r\n3.Start the server:\r\n```\r\n/opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server\r\n```\r\n\r\n4.Go back to the WebSphere Automation Dashboard on your browser. Notice that CVE-2021-26296 is now again in the tWAS 9.0.5.7 server:\r\n\r\n  ![](images/CVE-2021-26296.png)\r\n\r\n  Check your email. A mail notification was sent showing the vulnerability.\r\n\r\n***\r\n\r\n## Summary\r\n\r\nCongratulations! You have completed the WebSphere Automation lab.\r\n\r\nWith automated tooling and insights, IBM WebSphere Automation enables teams to modernize and secure IT estates, adapt and respond to incidents efficiently, and optimize WebSphere operations. WebSphere system operators and administrators can reduce the cost, effort, and risk of addressing vulnerabilities, automate critical activities, and preserve uptime with early detection, notification, and remediation of incidents.\r\n\r\nIBM WebSphere Automation helps teams remove manual toil to work less on maintenance tasks and more on strategic activities, while unlocking new value, extending the life, and increasing ROI of WebSphere investments.\r\n\r\nIBM WebSphere Automation is part of IBM Automation, a set of shared automation services that help you get insight into how your processes run, visualize hotspots and bottlenecks, and use financial impact information to prioritize which issues to address first.\r\n\r\nTo learn more about IBM WebSphere Automation, visit [ibm.com/cloud/websphere-automation](http://ibm.com/cloud/websphere-automation).\r\n","type":"Mdx","contentDigest":"7cfdbc2d70ee2296b91310fd92b679c1","counter":1600,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Strengthen Operational Security with IBM WebSphere Automation"},"exports":{},"rawBody":"---\r\ntitle: Strengthen Operational Security with IBM WebSphere Automation\r\n---\r\n\r\nimport ArticleDetails from '../../../../src/gatsby-theme-carbon/components/ArticleDetails'\r\n\r\n\r\n<FeatureCard\r\n  title=\"Strengthen Operational Security with IBM WebSphere Automation\"\r\n  color=\"dark\"\r\n  >\r\n\r\n![banner](images/automation.jpg)\r\n\r\n</FeatureCard>\r\n\r\n<AnchorLinks>\r\n  <AnchorLink>Introduction</AnchorLink>\r\n  <AnchorLink>Prerequisites</AnchorLink>\r\n  <AnchorLink>Business Context</AnchorLink>\r\n  <AnchorLink>Accessing and starting the environment</AnchorLink>\r\n  <AnchorLink>Receiving vulnerability notifications</AnchorLink>\r\n  <AnchorLink>Getting configuration parameters</AnchorLink>\r\n  <AnchorLink>Configuring Liberty server v20.0.0.12</AnchorLink>\r\n  <AnchorLink>Configuring Liberty server v20.0.0.9</AnchorLink>\r\n  <AnchorLink>Configuring traditional WebSphere (tWAS) v9.0.5.6</AnchorLink>\r\n  <AnchorLink>Configuring traditional WebSphere (tWAS) v9.0.5.7</AnchorLink>\r\n  <AnchorLink>Update Liberty server v20.0.0.9 to fix the vulnerability</AnchorLink>\r\n  <AnchorLink>Update tWAS server v9.0.5.7 to fix the vulnerability</AnchorLink>\r\n  <AnchorLink>Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional)</AnchorLink>\r\n  <AnchorLink>Summary</AnchorLink>\r\n</AnchorLinks>\r\n\r\n***\r\n\r\n<ArticleDetails name=\"Tien-Thanh Le\" lastUpdated=\"June 2021\" readTimeMinutes=\"45\" />\r\n\r\nNeed support? Contact **Rafael Osorio** and **Kevin Postreich**\r\n\r\n***\r\n\r\n## Introduction\r\n\r\nOrganizations are challenged to transform quickly and maximize ROI, while keeping traditional and modern applications running together securely. Reclaiming productivity is key to giving teams back the time required to innovate and build resiliency.\r\n\r\nUnfortunately, massive transformation programs are hard to greenlight and most fail to deliver immediate results. According to Gartner, AI augmentation will recover 6.2 billion hours of worker productivity in 20211 – time that can be invested in creating a solid and secure base for WebSphere transformation.\r\n\r\nBy leveraging AI and automation, organizations can achieve immediate savings and business benefits, while laying a solid and secure technology foundation for future growth.\r\n\r\nWith AI and automation, teams can modernize and secure their IT estate as well as adapt and respond to incidents efficiently. WebSphere system administrators can reduce the cost, effort, and risk of addressing vulnerabilities and anomalies, automate critical activities, preserve uptime and remediate capacity incidents.\r\n\r\nIBM WebSphere Automation makes business efficiency and resiliency standard. It helps teams work less on maintenance tasks and gives time back to focus more on strategic activities, to extend the life, increase the ROI, and unlock new value from WebSphere investments.\r\n\r\nIBM WebSphere Automation is a complete solution to help administrators and operators quickly unlock value with increased security, resiliency and performance.\r\n\r\n**Secure operations to reduce risk and meet compliance**\r\n  – Automatically recognize and recommend relevant CVEs for specific server deployments.\r\n  – Deliver security patches more efficiently to targeted environments.\r\n  – Maintain the notification system for all the security response team members from a central location.\r\n\r\n**Build operational resiliency**\r\n  – Sense and respond to security vulnerabilities faster to avoid disruptions for WebSphere apps.\r\n\r\n**Optimize runtimes and applications for operational performance**\r\n  – Access consolidated information for a streamlined operational experience.\r\n  – Reduce tedious tasks and achieve cost and time savings through optimal resource utilization, capacity provisioning and implementation of best practices across environments.\r\n\r\n**Start small, scale and standardize on IBM Automation**\r\n  – Build automation capabilities on top of the IBM Automation foundation for enterprise-level hybrid application management, observability, governance and compliance.\r\n\r\nIBM WebSphere Automation is available as a stand-alone offering or as an addition to IBM Cloud Pak® for Watson AIOps. As part of IBM Automation platform, IBM WebSphere Automation includes containerized components and common software services on top of a common automation layer, to manage WebSphere’s incidents, hybrid applications, and cost with complete observability, governance and compliance. Deploy virtually anywhere through containers supported by Red Hat® OpenShift® software, on IBM Cloud®, on essentially any existing infrastructure on-premises, or through private and public clouds. Use only the capabilities you need with a fully modular approach that’s designed to be easy to consume.\r\n\r\n***\r\n\r\n## Prerequisites\r\n\r\n  - You need to have the WebSphere Automation Skytap Image. [Request here](/)\r\n\r\n***\r\n\r\n## Business Context\r\n\r\nYou are a WebSphere Administrator part of a WebSphere Operations Team. Today, you subscribe and receive IBM Security Bulletins to be aware about vulnerabilities, its potential impact, severity and recommended solutions. Based on that you check if this CVE applies to your managed inventory. Now, your inventory is a spreadsheet, with all the information about your servers, which versions, which operational system, which iFixes were applied, etc. It is very manual process and you are trying to automate it.\r\n\r\nYou would like to have:\r\n- **Management dashboard:** Consolidated dashboard increases awareness and response time to common vulnerabilities and exposures (CVEs).\r\n- **Automated vulnerability tracking:** Let WebSphere Automation track new security bulletins across your existing traditional WebSphere and Liberty environments, on virtual machines or containers.\r\n- **Contextual notifications:** Receive security bulletin notifications only when new vulnerabilities affect the environment you manage, reducing noise and interruptions to the WebSphere operations team.\r\n- **Shared, live visibility to key stakeholders:** WebSphere operators and security compliance teams can see the real-time security posture of the WebSphere estate, accelerating action and minimizing the risk of miscommunication.\r\n\r\nIn this tutorial, you use the IBM WebSphere Automation to secure operatios to reduce risk and meet compliance.\r\n\r\nAt the end of this lab, you will be able to connect teams with the most relevant information through a single dashboard to discover, analyze and remediate common vulnerabilities and exposures across instances.\r\n\r\n***\r\n\r\n## Accessing and starting the environment\r\n\r\n1.When the demo environment is provisioned you should receive the email with link and access password. Open the link and provide the password. You should see the following screen:\r\n\r\n  ![](images/skytap-1.png)\r\n\r\n  WebSphere Automation is pre-installed in the OCP cluster hosted on the VMs.\r\n\r\n2.Start the environment with the Play button in the top-right corner. It takes about 10-15 minutes for the environment to start and stabilize.\r\n\r\n  ![](images/skytap-2.png)\r\n\r\n3.You will be working on the Student VM only. This VM is installed with OCP client (oc) and all thee scripts and files you need for the lab.\r\n\r\n  All the WebSphere images and iFixes required for the lab are pre-installed:\r\n  - /opt/IBM/WebSphere/Liberty200012/\r\n  - /opt/IBM/WebSphere/Liberty20009/\r\n  - /opt/IBM/WebSphere/AppServer9057/\r\n  - /opt/IBM/WebSphere/AppServer9056/\r\n\r\n  Click the screen representing the **STUDENT** VM.\r\n\r\n  ![](images/student-vm.png)\r\n\r\n4.Once you log in to the Student VM you will see the Desktop, which contains all the programs that you will be using (browsers, terminal, etc.)\r\n\r\n  ![](images/student-vm-screen.png)\r\n\r\n5.You can resize the virtual desktop with the Fit to window button.\r\n\r\n  ![](images/fit-to-window.png)\r\n\r\n***\r\n\r\n## Receiving vulnerability notifications\r\n\r\n### Accessing the WebSphere Automation UI\r\n\r\nA WebSphere administrator sets up WebSphere Automation by registering and configuring WebSphere Application Server and WebSphere Application Server Liberty servers for vulnerability tracking and by configuring email notifications. WebSphere administrators can also view the results of vulnerability assessment in WebSphere Automation to plan their response for the WebSphere Application Server and WebSphere Application Server Liberty servers that they manage.\r\n\r\nFor this tutorial, WebSphere Automation is pre-installed on an OCP cluster. You have your individual WebSphere Automation installation. Let's access your environment.\r\n\r\n1.On the *Student VM*, open a browser and enter the following URL:\r\n```\r\nhttps://cpd-websphere-automation.apps.ocp.ibm.edu\r\n```\r\n\r\n  ![](images/opening-browser.png)\r\n\r\n  If necessary, accept all the warnings and certificates. Depending on your browser, you might have to scroll down to permit access.\r\n\r\n2.On the login page, select the **OpenShift authentication** as the authentication type.\r\n\r\n  ![](images/openshift-authentication.png)\r\n\r\n3.Enter **ocadmin** as username and **ibmocp46** as password. And click **Log In**.\r\n\r\n  ![](images/ocp-ui-login.png)\r\n\r\n4.The *IBM Automation Welcome page* appears.\r\n\r\n  ![](images/welcome-page.png)\r\n\r\n5.On the Welcome page, open the **Menu**, click **Operate**, and then click **Application runtimes**.\r\n\r\n  ![](images/welcome-menu.png)\r\n\r\n6.The Application runtimes page appears. There should be no data since no WebSphere servers are registered/configured yet.\r\n\r\n  ![](images/app-runtime.png)\r\n\r\n7.However, before start to register servers to our Dashboard, let's configure your email to received notifications abouts CVEs. Open the **Notification configuration** tab.\r\n\r\n  ![](images/notification-config.png)\r\n\r\n8.The Email server configuration is pre-configured for this lab. You only need to add your personal email to receive notifications of new security vulnerabilities. Click **Add email address** (1) and enter *your email* and click **Save** (2).\r\n\r\n  ![](images/notification-email.png)\r\n\r\n  Great! Your email is configured to receive security notifications. Next section, you start to register our servers to WebSphere Automation.\r\n\r\n***\r\n\r\n## Getting configuration parameters\r\n\r\nAdd each of your WebSphere® Application Server servers and WebSphere Application Server Liberty servers to WebSphere Automation by registering them with the usage metering service.\r\n\r\nTo register your application servers with the usage metering service in WebSphere Automation, you must configure the usage metering feature in each application server. To configure the usage metering feature in each of your application servers, you must obtain the following usage metering items:\r\n- **URL**: The URL of the usage metering service in WebSphere Automation. This service registers WebSphere Application Server servers and Liberty servers with WebSphere Automation so that you can track security vulnerabilities.\r\n- **API Key**: The token used to authenticate the WebSphere Application Server servers and Liberty servers during the registration process.\r\n- **Usage metering certificate**: The certificate that contains the public key. This key allows an application server that is registering with WebSphere Automation to do an SSL handshake with the metering service.\r\n\r\nIn this section, you will get these configuration parameters. Let's start it!\r\n\r\n1.Back to the desktop, open a **terminal** window.\r\n\r\n  ![](images/open-terminal.png)\r\n\r\n2.Log in as **root**.\r\n```\r\nsu root\r\n```\r\n  Enter the following password when prompted:\r\n```\r\n1bm2021rhjb\r\n```\r\n\r\n3.Now, let's log in to the OCP Cluster using the command below:\r\n```\r\noc login --username=ocadmin --password=ibmocp46 --insecure-skip-tls-verify=true --server=https://api.ocp.ibm.edu:6443\r\n```\r\n\r\n  ![](images/oc-login.png)\r\n\r\n4.Make sure that the project you are working on is websphere-automation:\r\n```\r\noc project websphere-automation\r\n```\r\n\r\n5.Now, let's use the oc command to get the URL of the usage metering service in WebSphere Automation and save it in a file:\r\n```\r\necho https://$(oc get route cpd -n websphere-automation -o jsonpath='{.spec.host}')/websphereauto/meteringapi > /opt/IBM/WebSphere/metering-url.txt\r\n```\r\n\r\n6.Let's get the api-key and save it in a file too.\r\n```\r\noc -n websphere-automation get secret automation-secure-metering-apis-encrypted-tokens -o jsonpath='{.data.automation-secure-metering-apis-sa}' | base64 -d > /opt/IBM/WebSphere/api-key.txt; echo >> /opt/IBM/WebSphere/api-key.txt\r\n```\r\n\r\n7.Finally, let's get the Server certificate and save it in a file.\r\n```\r\noc get secret external-tls-secret -n websphere-automation -o jsonpath='{.data.cert\\.crt}' | base64 -d > /opt/IBM/WebSphere/cacert.pem\r\n```\r\n\r\n  Great! Now you have all the configuration parameters to register your application servers with the usage metering service in WebSphere Automation. Next section, you register your first server in WebSphere Automation.\r\n\r\n***\r\n\r\n## Configuring Liberty server v20.0.0.12\r\n\r\nIn this section, you configure Liberty Server version 20.0.0.12 to register to WebSphere Automation.\r\n\r\n1.Let's create a Liberty server version 20.0.0.12, using the command below:\r\n```\r\n/opt/IBM/WebSphere/Liberty200012/bin/server create Liberty_200012_server\r\n```\r\n\r\n  ![](images/2012-server-created.png)\r\n\r\n2.Now you need to configure the server to use TLS/SSL using the provided server_tls.xml file:\r\n```\r\n\\cp -f /home/ibmuser/Desktop/lab_backup/liberty200012/server_tls.xml /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml\r\n```\r\n\r\n3.Let's start the Liberty server:\r\n```\r\n/opt/IBM/WebSphere/Liberty200012/bin/server start Liberty_200012_server\r\n```\r\n\r\n  ![](images/starting-server-200012.png)\r\n\r\n4.Now, you need to update the DefaultKeyStore with the server certificate to trust the server for https connection:\r\n```\r\nkeytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt\r\n```\r\n\r\n  ![](images/certificate-store.png)\r\n\r\n5.It's time to configure the usage metering in the new server. Edit the **server.xml** file.\r\n```\r\nvi /opt/IBM/WebSphere/Liberty200012/usr/servers/Liberty_200012_server/server.xml\r\n```\r\n\r\n6.Add the **usageMetering-1.0** feature to the existing features in the `<featureManager>` element (check the picture below)\r\n```\r\n<feature>usageMetering-1.0</feature>\r\n```\r\n\r\n  ![](images/vi-server-200012.png)\r\n\r\n7.Add the **usageMetering** element below:\r\n```\r\n<usageMetering url=\"<metering-url>\" apiKey=\"<api-key>\" sslRef=\"defaultSSL\"/>\r\n```\r\n\r\n  ![](images/usage-metering-200012.png)\r\n\r\n8.You need to replace the `<metering-url>` with the output of the following command. Open another terminal window, and run the cat command below:\r\n```\r\ncat /opt/IBM/WebSphere/metering-url.txt\r\n```\r\n\r\n  ![](images/metering-url.png)\r\n\r\n9.Replace `<api-key>` above with the output of the following cat command. Use the second terminal to run the cat command:\r\n```\r\ncat /opt/IBM/WebSphere/api-key.txt\r\n```\r\n\r\n  ![](images/api-key.png)\r\n\r\n10.**Save** and **Close** the server.xml file.\r\n\r\n11.Back to the WebSphere Automation Dashboard on your browser, open the **Servers** view.\r\n\r\n  ![](images/app_runtimes_servers.png)\r\n\r\n12.Confirm that the Liberty server is registered to WebSphere Automation Application runtimes page.\r\n\r\n  ![](images/dashboard-server-1.png)\r\n\r\n  Maybe your server vulnerability is a little bit different of the picture above. That is a possibility, since new vulnerabilities are constantly discovered.\r\n\r\n***\r\n\r\n## Configuring Liberty server v20.0.0.9\r\n\r\nIn this section, you configure another Liberty Server to your WebSphere Automation dashboard. The process is the same (using the usage metering service in WebSphere Automation). However, to simplify tha lab we have pre-created the configuration files to make the configuration simpler.\r\n\r\n1.First, you need to create the Liberty server version 20.0.0.9, using the command below:\r\n```\r\n/opt/IBM/WebSphere/Liberty20009/bin/server create Liberty_20009_server\r\n```\r\n\r\n2.Since you have already configured usageMetering feature for Liberty version 20.0.0.12, we have a provided couple of server.xml files to make the configuration simpler. First copy the tls configuration:\r\n```\r\n\\cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_tls.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml\r\n```\r\n\r\n3.Start the Liberty server:\r\n\r\n```\r\n/opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server\r\n```\r\n\r\n4.Update the DefaultKeyStore with the server certificate to trust the server for https connections:\r\n\r\n```\r\nkeytool -import -trustcacerts -file /opt/IBM/WebSphere/cacert.pem -keystore /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/resources/security/key.p12 -storetype PKCS12 -storepass th1nkpassword -noprompt\r\n```\r\n\r\n5.Copy the server.xml that contains the usageMetering feature and properties (url, api-key):\r\n\r\n```\r\n\\cp -f /home/ibmuser/Desktop/lab_backup/liberty20009/server_configured.xml /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml\r\n```\r\n6.Back to the WebSphere Automation dashboard, confirm that the new Liberty server is registered.\r\n\r\n   ![](images/dashboard-server2.png)\r\n\r\n  The dashboard shows that this server is vulnerable for some CVEs, including the CVE-2020-10693.\r\n\r\n    ![](images/dashboard-CVE-2020-10693.png)\r\n\r\n7.Check your email. A mail notification was sent indicating the vulnerability. In the email message, there will be a link that would redirect to the console to show more details on the vulnerability. Because of network restrictions in the lab environment, this link will not work.\r\n\r\n   ![](images/vulnerability-email.png)\r\n\r\n\r\n***\r\n\r\n## Configuring traditional WebSphere (tWAS) v9.0.5.6\r\n\r\nIn this section, you configure a traditional WebSphere Application Server to your WebSphere Automation dashboard. Here you use the wsadmin script to configure the usage metering service. Let's do it!\r\n\r\n1.First, let's start the tWAS 9.0.5.6 server. Back to the terminal window, execute the command below:\r\n```\r\n/opt/IBM/WebSphere/AppServer9056/bin/startServer.sh tWAS_9056_server\r\n```\r\n\r\n2.Now, you need to configure usage-metering using the wsadmin script below:\r\n```\r\n/opt/IBM/WebSphere/AppServer9056/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword\r\n```\r\n\r\n3.Great, you first traditional WAS server is configured. Let's check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.6 is registered.\r\n\r\n  ![](images/dashboard-tWAS1.png)\r\n\r\n  You should see that this server is vulnerable to 15 or more CVEs (new vulnerabilities are discovered constantly, so the number of CVEs depends when you run this lab).\r\n\r\n4.Check your email. A mail notification was sent showing the vulnerabilitiy.\r\n\r\n  ![](images/email-vulnerability2.png)\r\n\r\n***\r\n\r\n## Configuring traditional WebSphere (tWAS) v9.0.5.7\r\n\r\nIn this section, you configure another version of a traditional WebSphere Application Server to your WebSphere Automation dashboard. The steps here are the same of the last section.\r\n\r\n1.First, you just need to start the tWAS 9.0.5.7 server. On the terminal window, execute the command below:\r\n```\r\n/opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server\r\n```\r\n\r\n2.Again, you need to configure the usage-metering.\r\n```\r\n/opt/IBM/WebSphere/AppServer9057/bin/wsadmin.sh -f /api-usagemetering/scripts/configuretWasUsageMetering.py url=$(cat /opt/IBM/WebSphere/metering-url.txt) apiKey=$(cat /opt/IBM/WebSphere/api-key.txt) trustStorePassword=th1nkpassword\r\n```\r\n\r\n3.Great, you second traditional WAS server is configured. Let's check our WebSphere Automation dashboard. Back to the browser, dashboard, confirm that the tWAS v9.0.5.7 is registered.\r\n\r\n  ![](images/dashboard-tWAS2.png)\r\n\r\n  You should see that this server is vulnerable to CVE-2021-26296. As explained before, maybe your server has more vulnerability than displayed in the picture, because it depends when you execute your lab, since new vulnerabilities are discovered constantly.\r\n\r\n4.Again, check your email. A mail notification was sent showing the vulnerability.\r\n\r\n  ![](images/email-inbox.png)\r\n\r\n***\r\n\r\n## Update Liberty server v20.0.0.9 to fix the vulnerability\r\n\r\nIn this section, you will fix one vulnerability in our Liberty Server v20.0.0.9 using two different approaches. First, you fix only updating configuraiton. Later, you apply an iFix to solve the vulnerability. Let's see how to do it.\r\n\r\n### Updating configurations\r\n\r\nLiberty 20.0.0.9 is impacted by CVE-2020-10693. This is because it configures the beanValidation-2.0 feature. See [CVE-2020-10693](https://www.ibm.com/support/pages/node/6348216) for more info.\r\n\r\nWe should resolve this by applying the iFix. However, for the lab, we can also do a quick test by unconfiguring this feature:\r\n\r\n1.Edit the server.xml, using the command below:\r\n```\r\nvi /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml\r\n```\r\n\r\n2.Comment out the feature:\r\n```\r\n<!-- <feature>beanValidation-2.0</feature> -->\r\n```\r\n\r\n  ![](images/edit-beanvalidation.png)\r\n\r\n3.**Save** and **close** the *server.xml* file.\r\n\r\n4.Back to your browser, check that the Liberty 20.0.0.9 server does not show the CVE-2020-10693 vulnerability. The update is picked up automatically.\r\n\r\n  ![](images/no-CVE-2020-10693.png)\r\n\r\n  Great, you removed the vulnerability by updating the configuration.\r\n\r\n### By Applying an IFIX\r\n\r\nHowever, instead of remove the beanValidationFeature-2.0, the correct process is to apply the appropriate iFix to get rid of the vulnerability. Let's do it in this part.\r\n\r\n5.First, let's add back the beanValidation feature:\r\n\r\n```\r\nvi /opt/IBM/WebSphere/Liberty20009/usr/servers/Liberty_20009_server/server.xml\r\n```\r\n\r\n6.Uncomment out the feature:\r\n```\r\n<feature>beanValidation-2.0</feature>\r\n```\r\n\r\n  ![](images/uncomment.png)\r\n\r\n7.**Save** and **Close** the server.xml file.\r\n\r\n8.Back to the browser, make sure the vulnerability shows up again.\r\n\r\n  ![](images/cve-back.png)\r\n\r\n9.An email will also be sent out.\r\n\r\n  ![](images/email-again.png)\r\n\r\n10.You need to stop the server, before apply the iFix. Back to the terminal window, run the command below:\r\n```\r\n/opt/IBM/WebSphere/Liberty20009/bin/server stop Liberty_20009_server\r\n```\r\n\r\n11.Now, let's apply the iFix.\r\n```\r\n/iFix/PH29942/imcl_ifix_install.sh 20009\r\n```\r\n\r\n  ![](images/apply-fix.png)\r\n\r\n12.Great, you iFix was applied. Now, start the server again:\r\n```\r\n/opt/IBM/WebSphere/Liberty20009/bin/server start Liberty_20009_server\r\n```\r\n\r\n13.Now, in your WebSphere Automation Dashboard you should notice that the CVE was removed:\r\n\r\n  ![](images/no-CVE-2020-10693.png)\r\n\r\n***\r\n\r\n## Update tWAS server v9.0.5.7 to fix the vulnerability\r\n\r\nIn this section, you will apply an iFix in tWAS 9.0.5.7 to remove the CVE-2021-26296 vulnerability.\r\n\r\n1.Notice in the console that tWAS 9.0.5.7 is vulnerable to CVE-2021-26296.\r\n\r\n  ![](images/CVE-2021-26296.png)\r\n\r\n  We will fix it by applying the appropriate iFix.\r\n\r\n2.First, stop the server, wait until it has stopped:\r\n```\r\n/opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server\r\n```\r\n\r\n3.Run the following script to install the iFix:\r\n```\r\n/iFix/PH34711/imcl_ifix_install.sh 9057\r\n```\r\n\r\n4.Start the server once the installation has completed:\r\n```\r\n/opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server\r\n```\r\n\r\n5.Go back to the WebSphere Automation dashboard. Notice that the CVE-2021-26296 was removed from tWAS 9.0.5.7.  Also, you can see on the right under \"Applied iFixes\" there are 4 applied fixes.\r\n\r\n  ![](images/ifix-applied.png)\r\n\r\n***\r\n\r\n## Update tWAS server v9.0.5.7 to introduce the vulnerability back (optional)\r\n\r\nYou can remove the iFix that was applied to confirm that the CVE-2021-26296 shows up in the unresolved CVE list\r\n\r\n1.Stop the server:\r\n```\r\n/opt/IBM/WebSphere/AppServer9057/bin/stopServer.sh tWAS_9057_server\r\n```\r\n\r\n2.Uninstall the iFix:\r\n```\r\n/iFix/PH34711/imcl_ifix_uninstall.sh 9057\r\n```\r\n\r\n3.Start the server:\r\n```\r\n/opt/IBM/WebSphere/AppServer9057/bin/startServer.sh tWAS_9057_server\r\n```\r\n\r\n4.Go back to the WebSphere Automation Dashboard on your browser. Notice that CVE-2021-26296 is now again in the tWAS 9.0.5.7 server:\r\n\r\n  ![](images/CVE-2021-26296.png)\r\n\r\n  Check your email. A mail notification was sent showing the vulnerability.\r\n\r\n***\r\n\r\n## Summary\r\n\r\nCongratulations! You have completed the WebSphere Automation lab.\r\n\r\nWith automated tooling and insights, IBM WebSphere Automation enables teams to modernize and secure IT estates, adapt and respond to incidents efficiently, and optimize WebSphere operations. WebSphere system operators and administrators can reduce the cost, effort, and risk of addressing vulnerabilities, automate critical activities, and preserve uptime with early detection, notification, and remediation of incidents.\r\n\r\nIBM WebSphere Automation helps teams remove manual toil to work less on maintenance tasks and more on strategic activities, while unlocking new value, extending the life, and increasing ROI of WebSphere investments.\r\n\r\nIBM WebSphere Automation is part of IBM Automation, a set of shared automation services that help you get insight into how your processes run, visualize hotspots and bottlenecks, and use financial impact information to prioritize which issues to address first.\r\n\r\nTo learn more about IBM WebSphere Automation, visit [ibm.com/cloud/websphere-automation](http://ibm.com/cloud/websphere-automation).\r\n","fileAbsolutePath":"C:/Users/ruffa/Documents/GitHub/cp4i-demohub/src/pages/tutorials/WebSphereAuto/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550","768070550"]}