{"componentChunkName":"component---src-pages-tutorials-access-backend-systems-old-index-mdx","path":"/tutorials/AccessBackendSystems-old/","result":{"pageContext":{"frontmatter":{"title":"Access backend systems using APIs and Messaging"},"relativePagePath":"/tutorials/AccessBackendSystems-old/index.mdx","titleType":"page","MdxNode":{"id":"a521e905-dc86-5160-a23c-afa395743f55","children":[],"parent":"dfff2144-5fcc-50e0-bd4c-cba1ac708c96","internal":{"content":"---\ntitle: Access backend systems using APIs and Messaging\n---\n\nimport ArticleDetails from '../../../../src/gatsby-theme-carbon/components/ArticleDetails'\n\n<ArticleDetails name=\"Carlos Hirata, Ravi Katikala\" lastUpdated=\"January 2021\" readTimeMinutes=\"45\" />\n\nIn this tutorial, you use the Cloud Pak for Integration 2020.4.1 to create an App Integration flow (IBM App Connect Enterprise) that sends messages to a queue (IBM MQ) on OpenShift 4.6.\n\n<AnchorLinks>\n  <AnchorLink>Introduction</AnchorLink>\n  <AnchorLink>Configure IBM MQ</AnchorLink>\n  <AnchorLink>Working with App Connect Enterprise toolkit</AnchorLink>\n  <AnchorLink>Deploying a BAR file</AnchorLink>\n  <AnchorLink>Using Operational Dashboard</AnchorLink>\n  <AnchorLink>Summary</AnchorLink>\n</AnchorLinks>\n\n### Takeaways\n\n\n- Configuring IBM MQ\n- Creating an integration flow that connects to a message queue\n- Deploy the integration flow as a container in Kubernetes\n- Checking the message using MQ Web Console\n- Checking this message using Operational Dashboard (tracing)\n\n## Configuring IBM MQ\n\n### Task 1 - Configure Message Queue (IBM MQ) to Authorize and Accept Data\n\nAs this is a brand-new deployment of the Cloud Pak for Integration, all instances of integrations, message queues, and APIs are deployed as microservices. You need to authorize the Message Queue service to accept incoming data from the integration running on a separate server.\n\n1.Open a browser and enter https://github.com/ibm-cloudintegration/dte-labs/tree/master/Lab2-AccessBackendSystems/resources.You need to configure the MQ security.\n\n![](images/lab2-task1.1.png)\n\n2.Click **Download** for both zip files.\n\n![](images/lab2-task1.2.png)\n\n3.Open a terminal window and enter unzip es-mq.zip. Unzip creates a directory mqconf.zip ~/Downloads/ directory. Do not unzip ace-mq.zip (this is a App Connect project).\n\n![](images/lab2-task1.3.png))\n\n4.In terminal window, find the mq pods, using this command: **oc get pods | grep mq**. Copy the mq pods (mq-quickstart-ibm-mq-0).\n\n![](images/lab2-task1.4.png))\n\n5.Execute the shell script to run MQ configuration (update the channel and security). Go to ~/Downloads/mqconf directory and enter ./loadmq.sh mq-quickstart-ibm-mq-0. The MQ configuration will be updated for this lab.\n\n![](images/ace-mq-download-ace-mq.png)\n\n6.Open a browser and select on the Bookmark Bar (IBM Cloud Pak for Integration). From here, you are able to navigate to all the integration and development technology contained within the platform. Today, this technology Capabilities and Runtimes instances. Capabilities include: API Connect, App Connect Dashboard, App Connect Designer , Asset Repository and Operations Dashboard. To access IBM MQ click the Runtimes link. This task covers administering and creating a new queue in IBM MQ. IBM MQ for Cloud Pak for Integration has a web GUI, which the Integration Developer, with security authorization, is able to manage the different IBM MQ objects (queues, channels, topics and so on).\n\n![](images/lab2-task1.6.png))\n\nYou might see this warning (Potential Security Risk Ahead). Click Advance.  And then click the link, Accept the Risk and Continue). Don’t worry there is no Risk for your workstation.\n\n7.You see the IBM MQ Welcome Page and an important tile that can help you learn about MQ technology. Click **Create a queue**.\n\n![](images/ace-mq-createaqueue.png)\n\n8.In Create a queue page. You can choose queue type: Local, Alias, Remote, and Model. Click **Local** to create a queue.\n\n![](images/ace-mq-localqueue.png)\n\n9.Enter the queue name: **NEWORDER** and keep the default values and the click **Create**.\n\n![](images/ace-mq-neworder.png)\n\n10.In the **Manage** page, locate the queues and click **NEWORDER** queue link.\n\n![](images/ace-mq-check-neworder.png)\n\n11.You see that the **NEWORDER** queue is empty. Click **QUICKSTART** link (the queue manager).\n\n![](images/ace-mq-neworder-empty.png)\n\n\n## Working with App Connect Enterprisa Toolkit (integration)\n\n### Task 2 - Configuring the app integration flow\n\nIn this task, take an existing integration flow in ACE and modify it to send only the payload data to the NEWORDER queue.\n\n1.Open a terminal window by right-clicking on the desktop and selecting Open Terminal.\n\n2.Before starting App Connect Enterprise toolkit, let’s check IBM MQ IP address. In th terminal window, enter the OpenShift command, **oc get svc -n cp4i | grep mq** to get a list of services in the namespaces. and copy the IP address (**172.30.152.157**) which the port is **1414**.\n\n![](images/lab2-task2.2.png)\n\n3.Enter **ace toolkit** to open the App Connect Enterprise Toolkit.\n\n![](images/ace-mq-acetoolkit.png)\n\n4.In the Workspace Launcher window, create the workspace **/IBM/ACET11/workspace/ace-mq**. Click **OK**.\n\n![](images/ace-mq-create-ace-mq-workspace.png)\n\n5.The toolkit opens the project. Import the ace-mq.zip file that you downloaded ( see ~/Downloads/ace-mq.zip ). Select **File->Import->Project Interchange** and click **Next**.\n\n![](images/ace-mq-import-zipfile.png)\n\n![](images/ace-mq-projectinterchange.png)\n\n6.Select ace-mq.zip in Downloads folder and then click Ok.\n\n![](images/lab2-task2.6.png)\n\n7.Verify **neworder** project is checked and click **Finish**. To view the integration flow that you deploy, click **neworder -> Resources -> Subflows -> getid.subflow**.\n\n![](images/ace-mq-opengetid.png)\n\n8.Click the **MQ Output** tile. In the lower-right of the Properties pane, open the Properties tab and click **Basic**. Enter the queue name: **NEWORDER**.\n\n![](images/ace-mq-basic-neworder.png)\n\n9.Click the MQ Connection parameter and enter the following settings:\n\n```\n  1.\tConnection*: Select **MQ client connection properties** from the drop-down.\n  2.\tDestination queue manager name: **QUICKSTART** (case-sensitive).\n  3.\tQueue manager hostname: **172.30.152.157**. (When you entered **oc get svc**)\n  4.\tListener: **1414**.\n  5.\tChannel name: **SYSTEM.DEF.SRVCONN** (Server Connection).\n  6.  Save the flow (**CRTL+S**)\n\n```\n![](images/ace-mq-mqconnection.png)\n\n10.Now, you need to generate a bar (broker archive) file. The App Connect Enterprise server uses BAR (Broker Archive) files to save compiled message flows, libraries, etc. We have created a file **neworder.bar** for this lab. In the Application Development window in the upper-left, on **neworder application**, right-click and select New then **BAR** file.\n\n![](images/ace-mq-create-bar-file.png)\n\n11.On the Window New Bar file, type the name of bar file: **neworder**.\n\n![](images/ace-mq-neworder-bar-file.png)\n\n12.\tApp Connect Enterprise opens a window: **Prepare window** .\n\n```\n\n  1.\tCheck REST APIs\n  2.\tCheck Compile and inline resources\n  3.\tClick Build and Save\n  4.\tA popup window displays “Operation completed successfully.”\n  5.\tClick Ok and exit out of the toolkit.\n\nApp Connect Enterprise Toolkit saves and compile message flows, sub flows into a BAR file.\n\n```\n![](images/ace-mq-save-bar-file.png)\n\n## Deploying a BAR file\n\n### Task 3 - Deploy Integration BAR file as containers\n\n\nIn this task, deploy the integration flow as App Connect Enterprise containers running in Kubernetes on the Cloud Pak for Integration. You then test the integration API by calling the API to create a new order and confirm the response payload and data in the queue.\n\n1.In your browser, return to the IBM Cloud Pak for Integration.Under **Capabilities**, select the **App Connect Dashboard** line and click the instance.\n\n![](images/lab2-task3.1.png)\n\n2.When you deploy a BAR file, you create a new instance of App Connect Enterprise. Click **Create Server**.\n\n![](images/ace-mq-create-server.png)\n\n3.Now, in the Create an **App Connect Integration Server** page, define which integration tool generated the **BAR File**. Select **Toolkit Integration** and then click **Next**.\n\n![](images/ace-mq-select-toolkit.png)\n\n4.In this step, drag a BAR file or click to upload\n\n![](images/ace-mq-drag-bar-file.png)\n\n5.In the File Upload window. Open **/home/student/IBM/ACET11/workspace/ace-mq/BARfiles** and select the file new **neworder.bar** and click **Open**. Verify the path routes to the **ace-mq** folder.\n\n![](images/ace-mq-new-file-neworder.png)\n\n6.You see that **neworder.bar** has uploaded to be deployed. Click **Next**.\n\n![](images/ace-mq-confirm-neworder-bar.png)\n\n7.You do not need to use the configuration package (**Configuration package contains the files that you can use for App Connect Enterprise works with Databases, Event Streams, etc**) click **Next**.\n\n![](images/ace-mq-configuration.png)\n\n8.Now you configure App Connect, enter the parameters:\n\n```\n\n  1.\tEnter Integration Server name: **neworder**.\n  2.\tSwitch to **ON** to use **Operational Dashboard (tracing)**.\n  3.\tEnter Operational Dashboard instance namespace: **cp4i**.\n  4.\tClick **Create** .\n\n```\n![](images/lab2-task3.8.png)\n\n9.You see the **App Connect Enterprise Dashboard** with the Integration Server **neworder** deployed and started. Click the **neworder** server icon.\n\n**Note:** The deployment process takes up to 5 minutes, refresh the browser to see the BAR file deployed and started.\n\n![](images/ace-mq-neworder-server.png)\n\n10.Click the **neworder API** icon.\n\n![](images/ace-mq-neworder-api.png)\n\n11.This page displays and copy the REST API Base URL (**Endpoint**), use the base URL (in the example :  http://neworder-http-cp4i.mycluster-dal12-c3c-32x-4e85092308b6e4e8c206c47df210f622-0000.us-south.containers.appdomain.cloud:80/neworder/v1/). It might be different.\nIn this page, you can download a swagger file (you can import this file in API Connect and access by way of API Connect).\n\n![](images/ace-mq-neworder-endpoint.png)\n\n12.Open a terminal window and enter the curl command: curl -k  --request GET http://neworder-http-cp4i.mycluster-dal12-c3c-32x-4e85092308b6e4e8c206c47df210f622-0000.us-south.containers.appdomain.cloud:80/neworder/v1/00000. And see the results\n\n![](images/ace-mq-curl-result.png)\n\n13.You check the message arrived in queue **NEWORDER** in IBM MQ (**QUICKSTART**). You can check using IBM MQ Console. Open a browser and click **Cloud Pak Platform Navigator** and go to **Runtimes** and click **mq-demo** in the instance **Queue Manager**.\n\n![](images/ace-mq-ckeck-message-neworder.png)\n\n14.You see a new message has arrived in **NEWORDER** queue.\n\n![](images/ace-mq-message-arrived.png)\n\n## Using Operations Dashboard (tracing)\n\n\nCloud Pak for Integration - Operations Dashboard Add-on is based on Jaeger open source project and the OpenTracing standard to monitor and troubleshoot microservices-based distributed systems. Operations Dashboard can distinguish call paths and latencies. DevOps personnel, developers, and performance specialists now have one tool to visualize throughput and latency across integration components that run on Cloud Pak for Integration. Cloud Pak for Integration - Operations Dashboard Add-on is designed to help organizations that need to meet and ensure maximum service availability and react quickly to any variations in their systems.\n\n1.Back to the browser with Operations Dashboard opened. Click the Overview option and you see all the tracing of **MQ, App Connect and APIC** (You see how to configure tracing in APIC lab). Operations Dashboard Add-on is based on Jaeger open source project and the **OpenTracing** standard to monitor and troubleshoot microservices-based distributed systems. Operations Dashboard can distinguish call paths and latencies. DevOps personnel, developers, and performance engineers now have one tool to visualize throughput and latency across integration components that run on Cloud Pak for Integration. Cloud Pak for Integration - Operations Dashboard Add-on is designed to help organizations that need to meet and ensure maximum service availability and react quickly to any variations in their systems.\n\n![](images/ace-mq-tracing-overview.png)\n\n2.You can see also MQ tracing, click **MQ Overview** in Dashboard.\n\n![](images/ace-mq-tracing-mq-overview.png)\n\n3.You can see **App C tracing**, click **App C Overview** in Dashboard.\n\n![](images/ace-mq-tracing-appc-overview.png)\n\n4.In the tracing page in **Dashboards**, select **Traces** the menu on the left.\n\n![](images/ace-mq-tracing-traces.png)\n\n5.Operations Dashboard generated a list of tracing. Select a line to analyze the trace of MQ and App Connect Enterprise.\n\n![](images/ace-mq-tracing-trace-chart.png)\n\n## Summary\n\n\nYou've completed this tutorial. In this lab you learned how to:\n1.\tIncrease efficiency by creating, testing, and debugging an integration flow with a message queue within a single, unified experience\n2.\tIncrease scale by deploying integration flows and message queues as containers on Kubernetes.\n","type":"Mdx","contentDigest":"e9cca38d2c827ed087822a733805aca1","counter":1527,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Access backend systems using APIs and Messaging"},"exports":{},"rawBody":"---\ntitle: Access backend systems using APIs and Messaging\n---\n\nimport ArticleDetails from '../../../../src/gatsby-theme-carbon/components/ArticleDetails'\n\n<ArticleDetails name=\"Carlos Hirata, Ravi Katikala\" lastUpdated=\"January 2021\" readTimeMinutes=\"45\" />\n\nIn this tutorial, you use the Cloud Pak for Integration 2020.4.1 to create an App Integration flow (IBM App Connect Enterprise) that sends messages to a queue (IBM MQ) on OpenShift 4.6.\n\n<AnchorLinks>\n  <AnchorLink>Introduction</AnchorLink>\n  <AnchorLink>Configure IBM MQ</AnchorLink>\n  <AnchorLink>Working with App Connect Enterprise toolkit</AnchorLink>\n  <AnchorLink>Deploying a BAR file</AnchorLink>\n  <AnchorLink>Using Operational Dashboard</AnchorLink>\n  <AnchorLink>Summary</AnchorLink>\n</AnchorLinks>\n\n### Takeaways\n\n\n- Configuring IBM MQ\n- Creating an integration flow that connects to a message queue\n- Deploy the integration flow as a container in Kubernetes\n- Checking the message using MQ Web Console\n- Checking this message using Operational Dashboard (tracing)\n\n## Configuring IBM MQ\n\n### Task 1 - Configure Message Queue (IBM MQ) to Authorize and Accept Data\n\nAs this is a brand-new deployment of the Cloud Pak for Integration, all instances of integrations, message queues, and APIs are deployed as microservices. You need to authorize the Message Queue service to accept incoming data from the integration running on a separate server.\n\n1.Open a browser and enter https://github.com/ibm-cloudintegration/dte-labs/tree/master/Lab2-AccessBackendSystems/resources.You need to configure the MQ security.\n\n![](images/lab2-task1.1.png)\n\n2.Click **Download** for both zip files.\n\n![](images/lab2-task1.2.png)\n\n3.Open a terminal window and enter unzip es-mq.zip. Unzip creates a directory mqconf.zip ~/Downloads/ directory. Do not unzip ace-mq.zip (this is a App Connect project).\n\n![](images/lab2-task1.3.png))\n\n4.In terminal window, find the mq pods, using this command: **oc get pods | grep mq**. Copy the mq pods (mq-quickstart-ibm-mq-0).\n\n![](images/lab2-task1.4.png))\n\n5.Execute the shell script to run MQ configuration (update the channel and security). Go to ~/Downloads/mqconf directory and enter ./loadmq.sh mq-quickstart-ibm-mq-0. The MQ configuration will be updated for this lab.\n\n![](images/ace-mq-download-ace-mq.png)\n\n6.Open a browser and select on the Bookmark Bar (IBM Cloud Pak for Integration). From here, you are able to navigate to all the integration and development technology contained within the platform. Today, this technology Capabilities and Runtimes instances. Capabilities include: API Connect, App Connect Dashboard, App Connect Designer , Asset Repository and Operations Dashboard. To access IBM MQ click the Runtimes link. This task covers administering and creating a new queue in IBM MQ. IBM MQ for Cloud Pak for Integration has a web GUI, which the Integration Developer, with security authorization, is able to manage the different IBM MQ objects (queues, channels, topics and so on).\n\n![](images/lab2-task1.6.png))\n\nYou might see this warning (Potential Security Risk Ahead). Click Advance.  And then click the link, Accept the Risk and Continue). Don’t worry there is no Risk for your workstation.\n\n7.You see the IBM MQ Welcome Page and an important tile that can help you learn about MQ technology. Click **Create a queue**.\n\n![](images/ace-mq-createaqueue.png)\n\n8.In Create a queue page. You can choose queue type: Local, Alias, Remote, and Model. Click **Local** to create a queue.\n\n![](images/ace-mq-localqueue.png)\n\n9.Enter the queue name: **NEWORDER** and keep the default values and the click **Create**.\n\n![](images/ace-mq-neworder.png)\n\n10.In the **Manage** page, locate the queues and click **NEWORDER** queue link.\n\n![](images/ace-mq-check-neworder.png)\n\n11.You see that the **NEWORDER** queue is empty. Click **QUICKSTART** link (the queue manager).\n\n![](images/ace-mq-neworder-empty.png)\n\n\n## Working with App Connect Enterprisa Toolkit (integration)\n\n### Task 2 - Configuring the app integration flow\n\nIn this task, take an existing integration flow in ACE and modify it to send only the payload data to the NEWORDER queue.\n\n1.Open a terminal window by right-clicking on the desktop and selecting Open Terminal.\n\n2.Before starting App Connect Enterprise toolkit, let’s check IBM MQ IP address. In th terminal window, enter the OpenShift command, **oc get svc -n cp4i | grep mq** to get a list of services in the namespaces. and copy the IP address (**172.30.152.157**) which the port is **1414**.\n\n![](images/lab2-task2.2.png)\n\n3.Enter **ace toolkit** to open the App Connect Enterprise Toolkit.\n\n![](images/ace-mq-acetoolkit.png)\n\n4.In the Workspace Launcher window, create the workspace **/IBM/ACET11/workspace/ace-mq**. Click **OK**.\n\n![](images/ace-mq-create-ace-mq-workspace.png)\n\n5.The toolkit opens the project. Import the ace-mq.zip file that you downloaded ( see ~/Downloads/ace-mq.zip ). Select **File->Import->Project Interchange** and click **Next**.\n\n![](images/ace-mq-import-zipfile.png)\n\n![](images/ace-mq-projectinterchange.png)\n\n6.Select ace-mq.zip in Downloads folder and then click Ok.\n\n![](images/lab2-task2.6.png)\n\n7.Verify **neworder** project is checked and click **Finish**. To view the integration flow that you deploy, click **neworder -> Resources -> Subflows -> getid.subflow**.\n\n![](images/ace-mq-opengetid.png)\n\n8.Click the **MQ Output** tile. In the lower-right of the Properties pane, open the Properties tab and click **Basic**. Enter the queue name: **NEWORDER**.\n\n![](images/ace-mq-basic-neworder.png)\n\n9.Click the MQ Connection parameter and enter the following settings:\n\n```\n  1.\tConnection*: Select **MQ client connection properties** from the drop-down.\n  2.\tDestination queue manager name: **QUICKSTART** (case-sensitive).\n  3.\tQueue manager hostname: **172.30.152.157**. (When you entered **oc get svc**)\n  4.\tListener: **1414**.\n  5.\tChannel name: **SYSTEM.DEF.SRVCONN** (Server Connection).\n  6.  Save the flow (**CRTL+S**)\n\n```\n![](images/ace-mq-mqconnection.png)\n\n10.Now, you need to generate a bar (broker archive) file. The App Connect Enterprise server uses BAR (Broker Archive) files to save compiled message flows, libraries, etc. We have created a file **neworder.bar** for this lab. In the Application Development window in the upper-left, on **neworder application**, right-click and select New then **BAR** file.\n\n![](images/ace-mq-create-bar-file.png)\n\n11.On the Window New Bar file, type the name of bar file: **neworder**.\n\n![](images/ace-mq-neworder-bar-file.png)\n\n12.\tApp Connect Enterprise opens a window: **Prepare window** .\n\n```\n\n  1.\tCheck REST APIs\n  2.\tCheck Compile and inline resources\n  3.\tClick Build and Save\n  4.\tA popup window displays “Operation completed successfully.”\n  5.\tClick Ok and exit out of the toolkit.\n\nApp Connect Enterprise Toolkit saves and compile message flows, sub flows into a BAR file.\n\n```\n![](images/ace-mq-save-bar-file.png)\n\n## Deploying a BAR file\n\n### Task 3 - Deploy Integration BAR file as containers\n\n\nIn this task, deploy the integration flow as App Connect Enterprise containers running in Kubernetes on the Cloud Pak for Integration. You then test the integration API by calling the API to create a new order and confirm the response payload and data in the queue.\n\n1.In your browser, return to the IBM Cloud Pak for Integration.Under **Capabilities**, select the **App Connect Dashboard** line and click the instance.\n\n![](images/lab2-task3.1.png)\n\n2.When you deploy a BAR file, you create a new instance of App Connect Enterprise. Click **Create Server**.\n\n![](images/ace-mq-create-server.png)\n\n3.Now, in the Create an **App Connect Integration Server** page, define which integration tool generated the **BAR File**. Select **Toolkit Integration** and then click **Next**.\n\n![](images/ace-mq-select-toolkit.png)\n\n4.In this step, drag a BAR file or click to upload\n\n![](images/ace-mq-drag-bar-file.png)\n\n5.In the File Upload window. Open **/home/student/IBM/ACET11/workspace/ace-mq/BARfiles** and select the file new **neworder.bar** and click **Open**. Verify the path routes to the **ace-mq** folder.\n\n![](images/ace-mq-new-file-neworder.png)\n\n6.You see that **neworder.bar** has uploaded to be deployed. Click **Next**.\n\n![](images/ace-mq-confirm-neworder-bar.png)\n\n7.You do not need to use the configuration package (**Configuration package contains the files that you can use for App Connect Enterprise works with Databases, Event Streams, etc**) click **Next**.\n\n![](images/ace-mq-configuration.png)\n\n8.Now you configure App Connect, enter the parameters:\n\n```\n\n  1.\tEnter Integration Server name: **neworder**.\n  2.\tSwitch to **ON** to use **Operational Dashboard (tracing)**.\n  3.\tEnter Operational Dashboard instance namespace: **cp4i**.\n  4.\tClick **Create** .\n\n```\n![](images/lab2-task3.8.png)\n\n9.You see the **App Connect Enterprise Dashboard** with the Integration Server **neworder** deployed and started. Click the **neworder** server icon.\n\n**Note:** The deployment process takes up to 5 minutes, refresh the browser to see the BAR file deployed and started.\n\n![](images/ace-mq-neworder-server.png)\n\n10.Click the **neworder API** icon.\n\n![](images/ace-mq-neworder-api.png)\n\n11.This page displays and copy the REST API Base URL (**Endpoint**), use the base URL (in the example :  http://neworder-http-cp4i.mycluster-dal12-c3c-32x-4e85092308b6e4e8c206c47df210f622-0000.us-south.containers.appdomain.cloud:80/neworder/v1/). It might be different.\nIn this page, you can download a swagger file (you can import this file in API Connect and access by way of API Connect).\n\n![](images/ace-mq-neworder-endpoint.png)\n\n12.Open a terminal window and enter the curl command: curl -k  --request GET http://neworder-http-cp4i.mycluster-dal12-c3c-32x-4e85092308b6e4e8c206c47df210f622-0000.us-south.containers.appdomain.cloud:80/neworder/v1/00000. And see the results\n\n![](images/ace-mq-curl-result.png)\n\n13.You check the message arrived in queue **NEWORDER** in IBM MQ (**QUICKSTART**). You can check using IBM MQ Console. Open a browser and click **Cloud Pak Platform Navigator** and go to **Runtimes** and click **mq-demo** in the instance **Queue Manager**.\n\n![](images/ace-mq-ckeck-message-neworder.png)\n\n14.You see a new message has arrived in **NEWORDER** queue.\n\n![](images/ace-mq-message-arrived.png)\n\n## Using Operations Dashboard (tracing)\n\n\nCloud Pak for Integration - Operations Dashboard Add-on is based on Jaeger open source project and the OpenTracing standard to monitor and troubleshoot microservices-based distributed systems. Operations Dashboard can distinguish call paths and latencies. DevOps personnel, developers, and performance specialists now have one tool to visualize throughput and latency across integration components that run on Cloud Pak for Integration. Cloud Pak for Integration - Operations Dashboard Add-on is designed to help organizations that need to meet and ensure maximum service availability and react quickly to any variations in their systems.\n\n1.Back to the browser with Operations Dashboard opened. Click the Overview option and you see all the tracing of **MQ, App Connect and APIC** (You see how to configure tracing in APIC lab). Operations Dashboard Add-on is based on Jaeger open source project and the **OpenTracing** standard to monitor and troubleshoot microservices-based distributed systems. Operations Dashboard can distinguish call paths and latencies. DevOps personnel, developers, and performance engineers now have one tool to visualize throughput and latency across integration components that run on Cloud Pak for Integration. Cloud Pak for Integration - Operations Dashboard Add-on is designed to help organizations that need to meet and ensure maximum service availability and react quickly to any variations in their systems.\n\n![](images/ace-mq-tracing-overview.png)\n\n2.You can see also MQ tracing, click **MQ Overview** in Dashboard.\n\n![](images/ace-mq-tracing-mq-overview.png)\n\n3.You can see **App C tracing**, click **App C Overview** in Dashboard.\n\n![](images/ace-mq-tracing-appc-overview.png)\n\n4.In the tracing page in **Dashboards**, select **Traces** the menu on the left.\n\n![](images/ace-mq-tracing-traces.png)\n\n5.Operations Dashboard generated a list of tracing. Select a line to analyze the trace of MQ and App Connect Enterprise.\n\n![](images/ace-mq-tracing-trace-chart.png)\n\n## Summary\n\n\nYou've completed this tutorial. In this lab you learned how to:\n1.\tIncrease efficiency by creating, testing, and debugging an integration flow with a message queue within a single, unified experience\n2.\tIncrease scale by deploying integration flows and message queues as containers on Kubernetes.\n","fileAbsolutePath":"/Users/rafaelosorio/Documents/GitHub/cp4i-demohub/src/pages/tutorials/AccessBackendSystems-old/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}