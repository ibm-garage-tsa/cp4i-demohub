{"componentChunkName":"component---src-pages-tutorials-access-backend-systems-index-mdx","path":"/tutorials/AccessBackendSystems/","result":{"pageContext":{"frontmatter":{"title":"Access backend systems using APIs and Messaging"},"relativePagePath":"/tutorials/AccessBackendSystems/index.mdx","titleType":"page","MdxNode":{"id":"2d4b0a04-367e-5008-9aa3-5203d04ecf04","children":[],"parent":"4509958c-719f-51b5-975c-0c6179b646c3","internal":{"content":"---\ntitle: Access backend systems using APIs and Messaging\n---\n\nimport ArticleDetails from '../../../../src/gatsby-theme-carbon/components/ArticleDetails'\n\n<FeatureCard\n  title=\"Access backend systems using APIs and Messaging\"\n  color=\"dark\"\n  >\n\n![banner](images/lab2-banner.png)\n\n</FeatureCard>\n\n<AnchorLinks>\n  <AnchorLink>Lab Overview</AnchorLink>\n  <AnchorLink>Prerequisites</AnchorLink>\n  <AnchorLink>Configure IBM MQ</AnchorLink>\n  <AnchorLink>Working with App Connect Enterprise toolkit</AnchorLink>\n  <AnchorLink>Deploying a BAR file</AnchorLink>\n  <AnchorLink>Using Operational Dashboard</AnchorLink>\n  <AnchorLink>Summary</AnchorLink>\n</AnchorLinks>\n\n***\n\n<ArticleDetails name=\"Carlos Hirata, Ravi Katikala\" lastUpdated=\"April 2021\" readTimeMinutes=\"45\" />\n\n***\n\n## Lab Overview\n\nIn this tutorial, you use the Cloud Pak for Integration 2021.1.1 to create an App Integration flow (IBM App Connect Enterprise) that sends messages to a queue (IBM MQ) on OpenShift 4.6.\n\n\n### Takeaways\n\n- Configuring IBM MQ\n- Creating an integration flow that connects to a message queue\n- Deploy the integration flow as a container in Kubernetes\n- Checking the message using MQ Web Console\n- Checking this message using Operational Dashboard (tracing)\n\n***\n\n## Prerequisites\n\n  - You need to have your personal CP4I on ROKS environment. [Check here how to request it](https://ibm-garage-tsa.github.io/cp4i-demohub/cp4i-on-roks/)\n  - You need to have the OC CLI and you should have logged in your ROKS cluster via command line. [Check here how to do it](https://ibm-garage-tsa.github.io/cp4i-demohub/cp4i-on-roks/#access-your-roks-cluster-by-command-line)\n  - You should have an MQ Queue Manager runtime pre-created in your CP4I on ROKS environment.\n  - You need to have the IBM App Connect Enterprise Toolkit installed in your desktop. Follow the sections **Download IBM App Connect Enterprise for Developers** and **Install IBM App Connect Enterprise** from [this tutorial](https://www.ibm.com/docs/en/app-connect/11.0.0?topic=started-get-hands-experience) to install it.\n\n***\n\n## Configure IBM MQ\n\n### Task 1 - Configure Message Queue (IBM MQ) to Authorize and Accept Data\n\nAs this is a brand-new deployment of the Cloud Pak for Integration, all instances of integrations, message queues, and APIs are deployed as microservices. You need to authorize the Message Queue service to accept incoming data from the integration running on a separate server.\n\n1.Let's configure the MQ security. Open a browser and go to [https://github.com/ibm-cloudintegration/dte-labs/tree/master/Lab2-AccessBackendSystems/resources](https://github.com/ibm-cloudintegration/dte-labs/tree/master/Lab2-AccessBackendSystems/resources).\n\n![](images/lab2-task1.1.png)\n\n2.Click **Download** for both zip files.\n\n![](images/lab2-task1.2.png)\n\n3.Open a terminal window and enter **unzip es-mq.zip**. Unzip creates a directory mqconf.zip ~/Downloads/ directory. Do not unzip ace-mq.zip (this is a App Connect Interchange Project).\n\n![](images/lab2-task1.3.png))\n\n4.In terminal window, find the mq pods, using this command: **oc get pods | grep mq**. Copy the mq pods (mq-quickstart-ibm-mq-0).\n\n![](images/lab2-task1.4.png))\n\n5.Execute the shell script to run MQ configuration (update the channel and security). Go to **~/Downloads/mqconf** directory and enter **./loadmq.sh mq-quickstart-ibm-mq-0**. The MQ configuration will be updated for this lab.\n\n![](images/ace-mq-download-ace-mq.png)\n\n6.Open a browser and go to your **Cloud Pak for Integration Platform Navigation**. From here, you are able to navigate to all the integration runtimes and capabilities available in the platform. Capabilities include: API Connect, App Connect Dashboard, App Connect Designer , Asset Repository and Operations Dashboard. Let's explore the Message Runtime. IBM MQ for Cloud Pak for Integration has a web GUI, which the Integration Developer, with security authorization, is able to manage the different MQ objects (queues, channels, topics and so on). On the *Cloud Pak for Integration Home*, scroll down to see the **Message** box, and click to open your **MQ Queue Manager Runtime**.\n\n![](images/mq-runtime-home.png)\n\n7.Now you are on the IBM MQ Welcome Page. Let's create a queue: click **Create a queue**.\n\n![](images/ace-mq-createaqueue.png)\n\n8.In Create a queue page. Choose **Local** as your queue type.\n\n![](images/ace-mq-localqueue.png)\n\n9.Enter the queue name: **NEWORDER**, keep the default values and the click **Create**.\n\n![](images/ace-mq-neworder.png)\n\n10.In the **Manage** page, locate the queues and click **NEWORDER** queue link.\n\n![](images/ace-mq-check-neworder.png)\n\n11.Here, you can see that the **NEWORDER** queue is empty. Ok, let's return to the queue manager screen. On the breadcrumbs, click **QUICKSTART** link.\n\n![](images/ace-mq-neworder-empty.png)\n\n***\n\n## Working with App Connect Enterprise toolkit\n\n### Task 2 - Configuring the app integration flow\n\nIn this task, take an existing integration flow in ACE and modify it to send only the payload data to the NEWORDER queue.\n\n1.Open a **Terminal** window.\n\n2.Before starting App Connect Enterprise toolkit, letâ€™s check IBM MQ IP address. In th terminal window, enter the OpenShift command, **oc get svc -n cp4i | grep mq** to get a list of services in the namespaces. and copy the IP address (**172.30.152.157**) which the port is **1414**.\n\n![](images/lab2-task2.2.png)\n\n3.Open your App Connect Enterprise Toolkit by clicking the icon on the Launchapad (MAC OS) or Desktop (Windows) or executing **ace toolkit** in terminal window.\n\n4.In the Workspace Launcher window, create the workspace **/IBM/ACET11/workspace/ace-mq**. Click **OK**.\n\n![](images/ace-mq-create-ace-mq-workspace.png)\n\n5.The toolkit opens the project (if necessary closes the Welcome screen). Now, let's import the ace-mq.zip file that you downloaded ( available on ~/Downloads/ace-mq.zip ). Select **File->Import->Project Interchange** and click **Next**.\n\n![](images/ace-mq-import-zipfile.png)\n\n![](images/ace-mq-projectinterchange.png)\n\n6.Select **ace-mq.zip** in Downloads folder and then click **Ok**.\n\n![](images/lab2-task2.6.png)\n\n7.Verify **neworder** project is checked and click **Finish**. To view the integration flow that you deploy, click **neworder -> Resources -> Subflows -> getid.subflow**.\n\n![](images/ace-mq-opengetid.png)\n\n8.Click the **MQ Output** tile. In the lower-right of the Properties pane, open the Properties tab and click **Basic**. Enter the queue name: **NEWORDER**.\n\n![](images/ace-mq-basic-neworder.png)\n\n9.Open the **MQ Connection** tab. On the *Connection* field, select **MQ client connection properties** (1). On *Destination queue manager name*, enter **QUICKSTART** (case-sensitive) (2). On *Queue manager host name*, enter the **MQ ip** identified in the previous step, when you entered *oc get svc* (3). On *Listener port number*, enter **1414** (4). On *Channel name* field, enter **SYSTEM.DEF.SRVCONN** (5). **Save** the flow (**CRTL+S**).\n\n![](images/ace-mq-mqconnection.png)\n\n10.Now, you need to generate a BAR (broker archive) file. The App Connect Enterprise server uses BAR files to save compiled message flows, libraries, etc. In the Application Development window in the upper-left, on *neworder application*, right-click and select **New** then **BAR file**.\n\n![](images/ace-mq-create-bar-file.png)\n\n11.On the Window New Bar file, type the name of bar file: **neworder**.\n\n![](images/ace-mq-neworder-bar-file.png)\n\n12.On the *Prepare* screen, mark the **REST APIs** checkbox (1). Check **Compile and in-line resources** (2). Click **Build and Save** (3). Now, a popup window displays *Operation completed successfully*. Click **Ok**.\n\n![](images/ace-mq-save-bar-file.png)\n\nCongratulations! You have the BAR file. Next section you will deploy the file as container in Cloud Pak for Integration. Now, you are welcome to **close** the Toolkit.\n\n***\n\n## Deploying a BAR file\n\n### Task 3 - Deploy Integration BAR file as containers\n\n\nIn this task, deploy the integration flow as App Connect Enterprise containers running in Kubernetes on the Cloud Pak for Integration. You then test the integration API by calling the API to create a new order and confirm the response payload and data in the queue.\n\n1.Back to the **Cloud Pak Platform Navigator** in the browser. Open the **Menu** and on the **Run** section, open the **Integrations** dashboard.\n\n  ![](images/open-ace-dashboard.png)\n\n2.To deploy a BAR file, you need to create an Integration server. Let's do it! Click **Create a server**.\n\n![](images/ace-mq-create-server.png)\n\n3.In the *Create an Integration Server* page, you have two options to deploy a BAR file: Deploy a BAR file from *App Connect Toolkit* or from *App Connect Designer*. In this lab you use the App Connect Toolkit. Select **Quick start toolkit integration** option and click **NEXT**.\n\n![](images/create-integration-server.png)\n\n4.Click to upload your BAR File. And select the **neworders.bar** (~/IBM/ACET11/workspace/ace-mq/BARfiles). And click **Next**.\n\n![](images/neworder-integration-server.png)\n\n5.You do not need to use the configuration package (*configuration package contains the files that you can use for App Connect Enterprise works with Databases, Event Streams, etc*) click **Next**.\n\n![](images/ace-mq-configuration.png)\n\n6.On *Create an Integration Server* page, enter the Integration Server name as **neworder** (1). Switch to **ON** to use *Operations Dashboard tracing* (2). Enter Operational Dashboard instance namespace as **cp4i** (3). Then click **Create** (4).\n\n![](images/neworder-server-details.png)\n\n7.Here you can see the **App Connect Enterprise Dashboard** with the Integration Server **neworder** deployed and started. Click the **neworder** server icon.\n\n**Note:** The deployment process takes up to 5 minutes, refresh the browser to see the BAR file deployed and started.\n\n![](images/ace-mq-neworder-server.png)\n\n8.Click the **neworder API** icon.\n\n![](images/ace-mq-neworder-api.png)\n\n9.This page displays the **Endpoint** URL (for example :  http://neworder-http-cp4i.mycluster-dal12-c3c-32x-4e85092308b6e4e8c206c47df210f622-0000.us-south.containers.appdomain.cloud:80/neworder/v1/).\nIn this page, you can download a swagger file. But in this lab, you just need the Endpoint URL.\n\n![](images/neworder-endpoint.png)\n\n10.Now let's test it. Open a terminal window and enter the curl command below:\n```\ncurl -G -k  http://neworder-http-cp4i.mycluster-dal12-c3c-32x-4e85092308b6e4e8c206c47df210f622-0000.us-south.containers.appdomain.cloud:80/neworder/v1/00000\n```\n*Note: Replace the API URL with your Endpoint snd don't forget to include 0000 as order number at the end of the URL.*\n\n![](images/ace-mq-curl-result.png)\n\n11.Now, let's check the message arrived in the *NEWORDER* queue in IBM MQ. Let's use IBM MQ Console to check it. Open the **Menu** again, and on **Run** section, click on **Messaging**.\n\n![](images/open-mq.png)\n\n12.Click **Manage QUICKSTART**.\n\n![](images/manage-quickstart.png)\n\n13.Here you can see that a new message has arrived in *NEWORDER* queue.\n\n![](images/ace-mq-ckeck-message-neworder.png)\n\n14.You are welcome, to click on the *NEWORDER* queue, to explore the message.\n\n![](images/ace-mq-message-arrived.png)\n\n***\n\n## Using Operational Dashboard\n\nCloud Pak for Integration - Operations Dashboard Add-on is based on Jaeger open source project and the OpenTracing standard to monitor and troubleshoot microservices-based distributed systems. Operations Dashboard can distinguish call paths and latencies. DevOps personnel, developers, and performance engineers now have one tool to visualize throughput and latency across integration components that run on Cloud Pak for Integration. Cloud Pak for Integration - Operations Dashboard Add-on is designed to help organizations that need to meet and ensure maximum service availability and react quickly to any variations in their systems.\n\n1.Let's explore the Operations Dashboard. Open again the **Menu**, and on the **Administration** section, open **Integration capabilities**.\n\n![](images/integration-capabilities.png)\n\n2.From the Capabilities list, open *Integration tracing* link: **tracing-demo**.\n\n![](images/tracing-demo.png)\n\n3.In the Tracing page, check the **Overview page**. Here you are able to select the product that you want to trace: APIC ,APP Connect and MQ. (more tracing products will add in the future releases).\n\n![](images/ace-mq-tracing-overview.png)\n\n4.Let's see the MQ tracing, click **MQ Overview** in Dashboard.\n\n![](images/ace-mq-tracing-mq-overview.png)\n\n5.You can see **App C tracing**, click **App C Overview** in Dashboard.\n\n![](images/ace-mq-tracing-appc-overview.png)\n\n6.In the tracing page in **Dashboards**, select **Traces** the menu on the left.\n\n![](images/ace-mq-tracing-traces.png)\n\n7.Operations Dashboard generated a list of tracing. Select a line to analyze the trace of MQ and App Connect Enterprise.\n\n![](images/ace-mq-tracing-trace-chart.png)\n\n  Congratulations!! Here you finished this lab!\n***\n\n## Summary\n\nYou've completed this tutorial. In this lab you learned how to:\n1.\tIncrease efficiency by creating, testing, and debugging an integration flow with a message queue within a single, unified experience\n2.\tIncrease scale by deploying integration flows and message queues as containers on Kubernetes.\n","type":"Mdx","contentDigest":"72af8a4d61bd96b95c43b6670a973bc8","counter":1529,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Access backend systems using APIs and Messaging"},"exports":{},"rawBody":"---\ntitle: Access backend systems using APIs and Messaging\n---\n\nimport ArticleDetails from '../../../../src/gatsby-theme-carbon/components/ArticleDetails'\n\n<FeatureCard\n  title=\"Access backend systems using APIs and Messaging\"\n  color=\"dark\"\n  >\n\n![banner](images/lab2-banner.png)\n\n</FeatureCard>\n\n<AnchorLinks>\n  <AnchorLink>Lab Overview</AnchorLink>\n  <AnchorLink>Prerequisites</AnchorLink>\n  <AnchorLink>Configure IBM MQ</AnchorLink>\n  <AnchorLink>Working with App Connect Enterprise toolkit</AnchorLink>\n  <AnchorLink>Deploying a BAR file</AnchorLink>\n  <AnchorLink>Using Operational Dashboard</AnchorLink>\n  <AnchorLink>Summary</AnchorLink>\n</AnchorLinks>\n\n***\n\n<ArticleDetails name=\"Carlos Hirata, Ravi Katikala\" lastUpdated=\"April 2021\" readTimeMinutes=\"45\" />\n\n***\n\n## Lab Overview\n\nIn this tutorial, you use the Cloud Pak for Integration 2021.1.1 to create an App Integration flow (IBM App Connect Enterprise) that sends messages to a queue (IBM MQ) on OpenShift 4.6.\n\n\n### Takeaways\n\n- Configuring IBM MQ\n- Creating an integration flow that connects to a message queue\n- Deploy the integration flow as a container in Kubernetes\n- Checking the message using MQ Web Console\n- Checking this message using Operational Dashboard (tracing)\n\n***\n\n## Prerequisites\n\n  - You need to have your personal CP4I on ROKS environment. [Check here how to request it](https://ibm-garage-tsa.github.io/cp4i-demohub/cp4i-on-roks/)\n  - You need to have the OC CLI and you should have logged in your ROKS cluster via command line. [Check here how to do it](https://ibm-garage-tsa.github.io/cp4i-demohub/cp4i-on-roks/#access-your-roks-cluster-by-command-line)\n  - You should have an MQ Queue Manager runtime pre-created in your CP4I on ROKS environment.\n  - You need to have the IBM App Connect Enterprise Toolkit installed in your desktop. Follow the sections **Download IBM App Connect Enterprise for Developers** and **Install IBM App Connect Enterprise** from [this tutorial](https://www.ibm.com/docs/en/app-connect/11.0.0?topic=started-get-hands-experience) to install it.\n\n***\n\n## Configure IBM MQ\n\n### Task 1 - Configure Message Queue (IBM MQ) to Authorize and Accept Data\n\nAs this is a brand-new deployment of the Cloud Pak for Integration, all instances of integrations, message queues, and APIs are deployed as microservices. You need to authorize the Message Queue service to accept incoming data from the integration running on a separate server.\n\n1.Let's configure the MQ security. Open a browser and go to [https://github.com/ibm-cloudintegration/dte-labs/tree/master/Lab2-AccessBackendSystems/resources](https://github.com/ibm-cloudintegration/dte-labs/tree/master/Lab2-AccessBackendSystems/resources).\n\n![](images/lab2-task1.1.png)\n\n2.Click **Download** for both zip files.\n\n![](images/lab2-task1.2.png)\n\n3.Open a terminal window and enter **unzip es-mq.zip**. Unzip creates a directory mqconf.zip ~/Downloads/ directory. Do not unzip ace-mq.zip (this is a App Connect Interchange Project).\n\n![](images/lab2-task1.3.png))\n\n4.In terminal window, find the mq pods, using this command: **oc get pods | grep mq**. Copy the mq pods (mq-quickstart-ibm-mq-0).\n\n![](images/lab2-task1.4.png))\n\n5.Execute the shell script to run MQ configuration (update the channel and security). Go to **~/Downloads/mqconf** directory and enter **./loadmq.sh mq-quickstart-ibm-mq-0**. The MQ configuration will be updated for this lab.\n\n![](images/ace-mq-download-ace-mq.png)\n\n6.Open a browser and go to your **Cloud Pak for Integration Platform Navigation**. From here, you are able to navigate to all the integration runtimes and capabilities available in the platform. Capabilities include: API Connect, App Connect Dashboard, App Connect Designer , Asset Repository and Operations Dashboard. Let's explore the Message Runtime. IBM MQ for Cloud Pak for Integration has a web GUI, which the Integration Developer, with security authorization, is able to manage the different MQ objects (queues, channels, topics and so on). On the *Cloud Pak for Integration Home*, scroll down to see the **Message** box, and click to open your **MQ Queue Manager Runtime**.\n\n![](images/mq-runtime-home.png)\n\n7.Now you are on the IBM MQ Welcome Page. Let's create a queue: click **Create a queue**.\n\n![](images/ace-mq-createaqueue.png)\n\n8.In Create a queue page. Choose **Local** as your queue type.\n\n![](images/ace-mq-localqueue.png)\n\n9.Enter the queue name: **NEWORDER**, keep the default values and the click **Create**.\n\n![](images/ace-mq-neworder.png)\n\n10.In the **Manage** page, locate the queues and click **NEWORDER** queue link.\n\n![](images/ace-mq-check-neworder.png)\n\n11.Here, you can see that the **NEWORDER** queue is empty. Ok, let's return to the queue manager screen. On the breadcrumbs, click **QUICKSTART** link.\n\n![](images/ace-mq-neworder-empty.png)\n\n***\n\n## Working with App Connect Enterprise toolkit\n\n### Task 2 - Configuring the app integration flow\n\nIn this task, take an existing integration flow in ACE and modify it to send only the payload data to the NEWORDER queue.\n\n1.Open a **Terminal** window.\n\n2.Before starting App Connect Enterprise toolkit, letâ€™s check IBM MQ IP address. In th terminal window, enter the OpenShift command, **oc get svc -n cp4i | grep mq** to get a list of services in the namespaces. and copy the IP address (**172.30.152.157**) which the port is **1414**.\n\n![](images/lab2-task2.2.png)\n\n3.Open your App Connect Enterprise Toolkit by clicking the icon on the Launchapad (MAC OS) or Desktop (Windows) or executing **ace toolkit** in terminal window.\n\n4.In the Workspace Launcher window, create the workspace **/IBM/ACET11/workspace/ace-mq**. Click **OK**.\n\n![](images/ace-mq-create-ace-mq-workspace.png)\n\n5.The toolkit opens the project (if necessary closes the Welcome screen). Now, let's import the ace-mq.zip file that you downloaded ( available on ~/Downloads/ace-mq.zip ). Select **File->Import->Project Interchange** and click **Next**.\n\n![](images/ace-mq-import-zipfile.png)\n\n![](images/ace-mq-projectinterchange.png)\n\n6.Select **ace-mq.zip** in Downloads folder and then click **Ok**.\n\n![](images/lab2-task2.6.png)\n\n7.Verify **neworder** project is checked and click **Finish**. To view the integration flow that you deploy, click **neworder -> Resources -> Subflows -> getid.subflow**.\n\n![](images/ace-mq-opengetid.png)\n\n8.Click the **MQ Output** tile. In the lower-right of the Properties pane, open the Properties tab and click **Basic**. Enter the queue name: **NEWORDER**.\n\n![](images/ace-mq-basic-neworder.png)\n\n9.Open the **MQ Connection** tab. On the *Connection* field, select **MQ client connection properties** (1). On *Destination queue manager name*, enter **QUICKSTART** (case-sensitive) (2). On *Queue manager host name*, enter the **MQ ip** identified in the previous step, when you entered *oc get svc* (3). On *Listener port number*, enter **1414** (4). On *Channel name* field, enter **SYSTEM.DEF.SRVCONN** (5). **Save** the flow (**CRTL+S**).\n\n![](images/ace-mq-mqconnection.png)\n\n10.Now, you need to generate a BAR (broker archive) file. The App Connect Enterprise server uses BAR files to save compiled message flows, libraries, etc. In the Application Development window in the upper-left, on *neworder application*, right-click and select **New** then **BAR file**.\n\n![](images/ace-mq-create-bar-file.png)\n\n11.On the Window New Bar file, type the name of bar file: **neworder**.\n\n![](images/ace-mq-neworder-bar-file.png)\n\n12.On the *Prepare* screen, mark the **REST APIs** checkbox (1). Check **Compile and in-line resources** (2). Click **Build and Save** (3). Now, a popup window displays *Operation completed successfully*. Click **Ok**.\n\n![](images/ace-mq-save-bar-file.png)\n\nCongratulations! You have the BAR file. Next section you will deploy the file as container in Cloud Pak for Integration. Now, you are welcome to **close** the Toolkit.\n\n***\n\n## Deploying a BAR file\n\n### Task 3 - Deploy Integration BAR file as containers\n\n\nIn this task, deploy the integration flow as App Connect Enterprise containers running in Kubernetes on the Cloud Pak for Integration. You then test the integration API by calling the API to create a new order and confirm the response payload and data in the queue.\n\n1.Back to the **Cloud Pak Platform Navigator** in the browser. Open the **Menu** and on the **Run** section, open the **Integrations** dashboard.\n\n  ![](images/open-ace-dashboard.png)\n\n2.To deploy a BAR file, you need to create an Integration server. Let's do it! Click **Create a server**.\n\n![](images/ace-mq-create-server.png)\n\n3.In the *Create an Integration Server* page, you have two options to deploy a BAR file: Deploy a BAR file from *App Connect Toolkit* or from *App Connect Designer*. In this lab you use the App Connect Toolkit. Select **Quick start toolkit integration** option and click **NEXT**.\n\n![](images/create-integration-server.png)\n\n4.Click to upload your BAR File. And select the **neworders.bar** (~/IBM/ACET11/workspace/ace-mq/BARfiles). And click **Next**.\n\n![](images/neworder-integration-server.png)\n\n5.You do not need to use the configuration package (*configuration package contains the files that you can use for App Connect Enterprise works with Databases, Event Streams, etc*) click **Next**.\n\n![](images/ace-mq-configuration.png)\n\n6.On *Create an Integration Server* page, enter the Integration Server name as **neworder** (1). Switch to **ON** to use *Operations Dashboard tracing* (2). Enter Operational Dashboard instance namespace as **cp4i** (3). Then click **Create** (4).\n\n![](images/neworder-server-details.png)\n\n7.Here you can see the **App Connect Enterprise Dashboard** with the Integration Server **neworder** deployed and started. Click the **neworder** server icon.\n\n**Note:** The deployment process takes up to 5 minutes, refresh the browser to see the BAR file deployed and started.\n\n![](images/ace-mq-neworder-server.png)\n\n8.Click the **neworder API** icon.\n\n![](images/ace-mq-neworder-api.png)\n\n9.This page displays the **Endpoint** URL (for example :  http://neworder-http-cp4i.mycluster-dal12-c3c-32x-4e85092308b6e4e8c206c47df210f622-0000.us-south.containers.appdomain.cloud:80/neworder/v1/).\nIn this page, you can download a swagger file. But in this lab, you just need the Endpoint URL.\n\n![](images/neworder-endpoint.png)\n\n10.Now let's test it. Open a terminal window and enter the curl command below:\n```\ncurl -G -k  http://neworder-http-cp4i.mycluster-dal12-c3c-32x-4e85092308b6e4e8c206c47df210f622-0000.us-south.containers.appdomain.cloud:80/neworder/v1/00000\n```\n*Note: Replace the API URL with your Endpoint snd don't forget to include 0000 as order number at the end of the URL.*\n\n![](images/ace-mq-curl-result.png)\n\n11.Now, let's check the message arrived in the *NEWORDER* queue in IBM MQ. Let's use IBM MQ Console to check it. Open the **Menu** again, and on **Run** section, click on **Messaging**.\n\n![](images/open-mq.png)\n\n12.Click **Manage QUICKSTART**.\n\n![](images/manage-quickstart.png)\n\n13.Here you can see that a new message has arrived in *NEWORDER* queue.\n\n![](images/ace-mq-ckeck-message-neworder.png)\n\n14.You are welcome, to click on the *NEWORDER* queue, to explore the message.\n\n![](images/ace-mq-message-arrived.png)\n\n***\n\n## Using Operational Dashboard\n\nCloud Pak for Integration - Operations Dashboard Add-on is based on Jaeger open source project and the OpenTracing standard to monitor and troubleshoot microservices-based distributed systems. Operations Dashboard can distinguish call paths and latencies. DevOps personnel, developers, and performance engineers now have one tool to visualize throughput and latency across integration components that run on Cloud Pak for Integration. Cloud Pak for Integration - Operations Dashboard Add-on is designed to help organizations that need to meet and ensure maximum service availability and react quickly to any variations in their systems.\n\n1.Let's explore the Operations Dashboard. Open again the **Menu**, and on the **Administration** section, open **Integration capabilities**.\n\n![](images/integration-capabilities.png)\n\n2.From the Capabilities list, open *Integration tracing* link: **tracing-demo**.\n\n![](images/tracing-demo.png)\n\n3.In the Tracing page, check the **Overview page**. Here you are able to select the product that you want to trace: APIC ,APP Connect and MQ. (more tracing products will add in the future releases).\n\n![](images/ace-mq-tracing-overview.png)\n\n4.Let's see the MQ tracing, click **MQ Overview** in Dashboard.\n\n![](images/ace-mq-tracing-mq-overview.png)\n\n5.You can see **App C tracing**, click **App C Overview** in Dashboard.\n\n![](images/ace-mq-tracing-appc-overview.png)\n\n6.In the tracing page in **Dashboards**, select **Traces** the menu on the left.\n\n![](images/ace-mq-tracing-traces.png)\n\n7.Operations Dashboard generated a list of tracing. Select a line to analyze the trace of MQ and App Connect Enterprise.\n\n![](images/ace-mq-tracing-trace-chart.png)\n\n  Congratulations!! Here you finished this lab!\n***\n\n## Summary\n\nYou've completed this tutorial. In this lab you learned how to:\n1.\tIncrease efficiency by creating, testing, and debugging an integration flow with a message queue within a single, unified experience\n2.\tIncrease scale by deploying integration flows and message queues as containers on Kubernetes.\n","fileAbsolutePath":"/Users/rafaelosorio/Documents/GitHub/cp4i-demohub/src/pages/tutorials/AccessBackendSystems/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}