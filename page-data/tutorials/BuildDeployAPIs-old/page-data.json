{"componentChunkName":"component---src-pages-tutorials-build-deploy-ap-is-old-index-mdx","path":"/tutorials/BuildDeployAPIs-old/","result":{"pageContext":{"frontmatter":{"title":"Build and deploy new integrations and securely expose them as APIs"},"relativePagePath":"/tutorials/BuildDeployAPIs-old/index.mdx","titleType":"page","MdxNode":{"id":"37b2aac9-d3b6-5f53-8dce-2d4a4463abe6","children":[],"parent":"5e15854e-a1ea-51d9-b42f-a57a3c41bcd5","internal":{"content":"---\r\ntitle: Build and deploy new integrations and securely expose them as APIs\r\n---\r\n\r\nimport ArticleDetails from '../../../../src/gatsby-theme-carbon/components/ArticleDetails'\r\n\r\nIn this tutorial, you use the IBM Cloud Pak for Integration 2020.4.1 to deploy an App Integration flow on containers and expose it as a secure rate-limited API on RedHat OpenShift 4.6.\r\n\r\nExtend your back-end integrations securely to partners and developers.\r\nExtending access via APIs to your back-end integrations empower your partners and developer community to create new business value, technical value, and customer experiences for your products and offerings. Spur innovations where a number of technologies are combined to create something new, for example, extending the ability apply for loan pre-approvals that can be used within apps that search for cars or real estate. To do this, you must first create the back-end integrations, which combine data from existing core systems, disparate assets, or SaaS services with the ability to send critical data between systems reliably. Second, you need to provide APIs to your back-end integrations that secure access and apply rate limits.\r\nIn this tutorial, you learn how to deploy an app integration flow that takes data from one source and sends it to a message queue for reliable delivery. Then, you expose this integration as a rate-limited API secured by a key and secret. This integration flow is deployed quickly and easily as an independent, auto-scalable microservice running on containers. By using RedHat OpenShift as a foundation.\r\n\r\n\r\n<AnchorLinks>\r\n  <AnchorLink>Configuring IBM MQ</AnchorLink>\r\n  <AnchorLink>Creating a BAR File</AnchorLink>\r\n  <AnchorLink>Deploying a BAR file</AnchorLink>\r\n  <AnchorLink>Configuring API Connect</AnchorLink>\r\n  <AnchorLink>Sharing the API</AnchorLink>\r\n  <AnchorLink>Using Operations Dashboard</AnchorLink>\r\n  <AnchorLink>Summary</AnchorLink>\r\n</AnchorLinks>\r\n\r\n## Introduction\r\n\r\nImplement enterprise grade messaging that is secure and reliable for any application across your backend integration architecture. Modern applications and APIs all need the ability to communicate data reliably between mission critical systems across internal/external data sources, networks, and regions. In mission critical environments your messaging infrastructure must be robust, reliable, and secure with the ability to integrate into your applications and APIs at pace and scale. In this tutorial, you create a message queue that receives order data from an API call to a retail ordering system. The red box in the diagram shows what you are creating and where it fits in the overall architecture of a mobile retail buying application.\r\n\r\n### Takeaways\r\n\r\n- Exploring multiple integration capabilities within a single platform\r\n- Configuring IBM MQ\r\n- Creating an integration flow that connects to a message queue\r\n- Deploy the integration flow as a container in Kubernetes\r\n- Checking the message using MQ Web Console\r\n- Configuring API in API connect\r\n- Sharing API in Asset Repository\r\n- Checking this message using Operational Dashboard (tracing)\r\n\r\n\r\n\r\n## Configuring IBM MQ\r\n\r\n\r\n### Task 1 - Configure Message Queue (MQ) to Authorize and Accept Data.\r\n\r\nAs this is a brand-new deployment of the Cloud Pak for Integration, all instances of integrations, message queues, and event streams are deployed as microservices. We need to authorize the Message Queue service to accept incoming data from the integration running on a separate server.\r\nCloud Pak for Integration provides a single solution for all of your enterprise integration needs. The platform provides a comprehensive set of industry-leading capabilities. Use any of them on their own or together through a single interface. Create, manage, and monitor all of your integrations across SaaS applications, messaging, streams, APIs, high-speed transfer, and more.\r\nUnlock the power of your data and support the scale required for all of your integration and digital transformation initiatives.\r\n\r\n\r\n1.You need to configure the MQ security .Open a browser and enter https://github.com/ibm-cloudintegration/dte-labs/tree/master/Lab1-BuildAndDeployAPIs/resources .\r\n\r\n![](images/lab1-task2.1-github.png)\r\n\r\n2.Select **ace-apic.zip** and the click **Download**.\r\n\r\n![](images/lab1-task2.2-select-apic-download.png)\r\n\r\n3.Repeat step 2 and download **mqconf.zip**.\r\n\r\n4.The files **ace-apic.zip** and **mqconf.zip** are in **~/Downloads**. Uncompress the **mqconf.zip** (use **unzip mqconf.zip**), the unzip generates a directory **mqconf** with two files **loadmq.sh** and **mq_ace_lab.mqsc**.\r\n\r\n![](images/lab1-task2.4-unzip-mqconf.png)\r\n\r\n5.Go to **mqconf** directory and execute the shell script **loadmq.sh**. (use **./loadmq.sh**). You are already logged in Openshift cluster and mq configuration is loaded .\r\n\r\n![](images/lab1-task2.5.png)\r\n\r\n6.Click the IBM Cloud Pak for Integration Platform Navigation. Locate MQ and click the MQ instance name: **mq-demo**.\r\n\r\n![](images/lab1-task2.6-accessing-mq.png)\r\n\r\n7.You might need to login screen for IBM Cloud Pak might be displayed, enter the username: **admin** and Password (**Enter the 32 characters password that you created when you made the Cloud Pak provisioning**) and Click **Log in**.\r\n\r\n![](images/lab1-task1.2-userid-password.png)\r\n\r\n8.In the **Welcome IBM MQ page** (**QUICKSTART** is the name of queue manager). This page, you can manage queue manager, create queues, learn MQ basics, and get more information about IBM MQ. Click **Create a queue**.\r\n\r\n![](images/lab1-task2.8-access-mq-console.png)\r\n\r\n9.In Create a queue page. You can choose queue type: Local, Alias, Remote, and Model. Click **local** to create a queue.\r\n\r\n![](images/lab1-task2.9-create-a-queue.png)\r\n\r\n10.Enter the queue name: **ORDERS (this is case-sensitive)** and keep the default values and the click **Create**.\r\n\r\n![](images/lab1-task2.10-queue-orders.png)\r\n\r\n11.Click **Manage QUICKSTART** and You see the queues window. You see queue names, type and queue depth.\r\n\r\n![](images/lab1-task2.11-show-queues.png)\r\n\r\n## Creating a BAR file\r\n\r\n### Task 2 – Configuring the integration flow using App Connect Enterprise Toolkit\r\n\r\nThis task covers opening and examining an application integration flow in the IBM App Connect Enterprise Toolkit. With the Toolkit you can build powerful and complex integration applications, services, and APIs quickly and easily using a visual designer. Your integration solutions can be directly deployed to the Cloud Pak for Integration on IBM Cloud Pak running on-premise, in any cloud, or combinations of both.\r\n\r\n1.In the desktop click the right mouse to open a terminal window. If you are using MAC click App Connect Enterprise Toolkit icon and go to the Step 3.\r\n\r\n2.In the terminal window, type ace toolkit to open the App Connect Enterprise Toolkit.\r\n\r\n![](images/lab1-task3.2.png)\r\n\r\n3.In the Workspace Launcher window, choose the workspace **~/IBM/ACET11/workspace/ace-apic**. Create the path routes to the folder: **ace-apic**. **Click OK**.\r\n\r\n![](images/lab1-task3.3.png)\r\n\r\n4.If you are using MAC OS, you need to import **ace-apic.zip** into App Connect Enterprise toolkit (the **ace-apic.zip** should be in your **~/Downloads** directory). The toolkit opens the project. To view the integration flow that you deploy, click **orders -> Resources -> Subflows -> getOrder.subflow** .\r\n\r\n![](images/lab1-task3.4.png)\r\n\r\n5.Check the MQ node by clicking the MQ Output Node. Click Properties and select **Basic**, and enter the queue name (you created in MQ Task) **ORDERS**.\r\n\r\n![](images/lab1-task3.5.png)\r\n\r\n6.Select the MQ connection tab. App Connect Enterprise uses a mq client connection:\r\n\r\n```\r\n\r\n1.\tSelect MQ client connection properties.\r\n2.\tType Destination queue manager name: QUICKSTART.\r\n3.\tType Queue manager host name: 172.21.157.216 .\r\n4.\tType port number: 1414.\r\n5.\tType Channel name: SYSTEM.DEF.SVRCONN.\r\n6.\tSave the flow (Control + S)\r\n\r\n```\r\n\r\n![](images/lab1-task3.7.png)\r\n\r\n7.In the Application Development view on the left, on orders flow, right-click and then select **New -> BAR file**.\r\n\r\n![](images/lab1-task3.8.png)\r\n\r\n8.Enter the name of BAR file: **orders** and click **Finish**. App Connect Enterprise is creating an empty BAR file.\r\n\r\n![](images/lab1-task3.9.png)\r\n\r\n9.You need to configure which artifacts are compiled in the BAR file. Check **orders** and check **Compile and in-line resources**, then click the **Build and Save** button. A pop-up window displays “Operation completed successfully.” Click **OK**.\r\n\r\n![](images/lab1-task3.10.png)\r\n\r\n## Deploying a BAR file\r\n\r\n### Task 3 – Deploy Integration BAR file as containers\r\n\r\nIn this task, you deploy a BAR file in App Connect Enterprise Dashboard.\r\n\r\n1.Open **Cloud Pak Platform Navigator** in the browser. Open Capabilities and click **ace-dashboard** link to open App Connect Enterprise Dashboard.\r\n\r\n![](images/cloud-pak-capabilities.png)\r\n\r\n2.In the App Connect Enterprise Dashboard, you see the Integration Server deployed. To deploy the **orders.bar** file you saved and complied above click **Create a server**.\r\n\r\n![](images/lab1-task4.2.png)\r\n\r\n3.In the **Create an integration server page**. You have two option to deploy a BAR file. Deploy a BAR file from **App Connect Toolkit** or from **App Connect Designer**. In this lab you deploy BAR file from App Connect Toolkit. Select Toolkit link and then click **NEXT**.\r\n\r\n![](images/lab1-task4.3.png)\r\n\r\n4.You see that **orders.bar** (~/IBM/ACET11/workspace/ace-apic/BARfiles) has uploaded to be deployed. Click **Open**.\r\n\r\n![](images/lab1-task4.4.png)\r\n\r\n5.You see orders.bar in to be imported and click **Next**.\r\n\r\n![](images/lab1-task4.5.png)\r\n\r\n6.You don’t need to download configuration package (Configuration package contains the files that you can use for App Connect Enterprise works with Databases, Event Streams, etc) click **Next**.\r\n\r\n![](images/lab1-task4.6.png)\r\n\r\n7.In Create an App Connect Integration Server page, enter the following:\r\n\r\n```\r\n\r\n1\tIntegration Server name: **orders**.\r\n2\tSwitch to **On** to **Enable Operations Dashboard tracing**.\r\n3\tEnter OO tracing instance namespace: **cp4i**.\r\n4\tClick **Create**.\r\n\r\n```\r\n\r\n![](images/lab1-task4.7.png)\r\n\r\n8.During the deployment process, App Connect Enterprise opens the servers page. You see the App Connect Enterprise Dashboard with the Integration Server orders deployed and started .Click the **orders server** icon.\r\nNote: The deployment process takes 2-3 minutes, refresh the browser to see the BAR file.\r\n\r\n![](images/lab1-task4.8.png)\r\n\r\n9.Click **orders API**.\r\n\r\n![](images/lab1-task4.9.png)\r\n\r\n10.This page displays the REST API Base URL. Copy the base URL (in the example below:\r\nhttp://orders-http-cp4i.playgrowth-integr-694940-8946bbc006b7c6eb0829d088919818bb-0000.us-east.containers.appdomain.cloud:80/orders/v1 ).\r\n\r\n### Keep the browser opened\r\n\r\n![](images/lab1-task4.10.png)\r\n\r\n11.From the terminal window, execute the following curl command and complete with 0000. Enter: curl -k --request GET http://orders-http-cp4i.playgrowth-integr-694940-8946bbc006b7c6eb0829d088919818bb-0000.us-east.containers.appdomain.cloud:80/orders/v1 /0000.\r\nIf the API call is successful, you see JSON reply with {\"accountid\":\"ABC-1234567890\",\"orderid\":\"0000000\"}\r\n\r\n![](images/lab1-task4.11.png)\r\n\r\n12.You check the message arrived in queue **ORDERS** in MQ You can check using MQ Console. Open a browser and go to **Cloud Pak Platform Navigator** and click **mq link**. Click **Manage QUICKSTART**.\r\n\r\n![](images/lab1-task4.12.png)\r\n\r\n13.You see in the queues on QUICKSTART. The queue ORDERS has a message (look at Queue Depth)\r\n\r\n![](images/lab1-task4.13.png)\r\n\r\n## Configuring API Connect\r\n\r\n### Task 4  – Configuring API Connect to test the integration\r\n\r\nYou've created an application integration flow and successfully called it via a REST API call! Now, to make it accessible to the rest of the world, it's important to add security around it—at least in the form of a client ID .This way, in addition to access control, you can get insights into which teams or customers are the least and most active. Adding security to an API is simply done via an OpenAPI configuration parameter. We can add rate limits to the API to increase the calls per second, minute, or hour to scale up as much as you need.\r\n\r\n1.Open the browser window opened where you have the orders API window open. Click the Download **Open API Document** icon. You save as **orders-1.0.0.yaml** file in **~/Downloads** directory.\r\n\r\n![](images/lab1-task6.1.png)\r\n\r\n2.In **Welcome IBM Cloud Pak for Integration** – **Capabilities**, click **API Connect** link name.\r\n\r\n![](images/lab1-task6.2.png)\r\n\r\n3.You might receive a Warning: Potential Security Risk Ahead. Click Advanced and then Accept the Risk and Continue.\r\n\r\n![](images/lab1-task6.3.png)\r\n\r\n4.In the **API Connect** page, click **IBM Common Services user registry**.\r\n\r\n![](images/lab1-task6.4.png)\r\n\r\n5.Click **Develop APIs and Products**.\r\n\r\n![](images/lab1-task6.5.png)\r\n\r\n6.Click **Add**, then choose **API** from the drop-down menu.\r\n\r\n![](images/lab1-task6.6.png)\r\n\r\n7.Choose **From an existing OpenAPI service**, scroll down and click **Next**.\r\n\r\n![](images/lab1-task6.7.png)\r\n\r\n8.Click **Drag and drop files here or click to upload** to load **order-1.0.0.yaml** in **~/Downloads** directory. And then click **Next**.\r\n\r\n![](images/lab1-task6.8.png)\r\n\r\n9.Confirm the Info about API and click **Next**.\r\n\r\n![](images/lab1-task6.9.png)\r\n\r\n10.Keep the security settings and click **Next**.\r\n\r\n![](images/lab1-task6.10.png)\r\n\r\n11.Your API with Client ID is created! Click **Edit API**.\r\n\r\n![](images/lab1-task6.11.png)\r\n\r\n12.In the API Setup page. You have configured your API and you need to switch Online. Switch **Online** and click **Save**.\r\n\r\n![](images/lab1-task6.12.png)\r\n\r\n13.To test the API, Click **Assemble**, then click the **Test** link and replace **{order}** for **0000** in **GET** command. Click **Send**.\r\n\r\n![](images/lab1-task6.13.png)\r\n\r\n14.Scroll down and see Body and check the results. You see a status code: **200** created with a response body containing the results details.\r\n\r\n![](images/lab1-task6.14.png)\r\n\r\n15.You need to get the Developer Portal and go to **Welcome to API Manager** page, click **Manage** on the left.\r\n\r\n![](images/lab1-task6.15.png)\r\n\r\n16.\tSelect the **Catalog Sandbox**.\r\n\r\n![](images/lab1-task6.16.png)\r\n\r\n17.We already configure the portal for you.In Sandbox page, click Catalog settings and click Portal and copy the Portal URL:  https://ademo-ptl-portal-web-cp4i.playgrowth-integr-694940-8946bbc006b7c6eb0829d088919818bb-0000.us-east.containers.appdomain.cloud/ddd-demo-test/sandbox.\r\n\r\n![](images/lab1-task6.17.png)\r\n\r\n18.\tLogin to Developer Portal server using the link you copied in the browser.\r\n\r\n![](images/lab1-task6.18.png)\r\n\r\n19.\tSign in using ibmuser and password Passw0rd!.\r\n\r\n![](images/lab1-task6.19.png)\r\n\r\n20.In the Developer Portal, explore products clicking **orders auto product 1.0.0** icon.\r\n\r\n![](images/lab1-task6.20.png)\r\n\r\n21.You need to subscribe to Default Plan, clicking **Subscribe**.\r\n\r\n![](images/lab1-task6.21.png)\r\n\r\n22.Create an Application, clicking **Create Application**.\r\n\r\n![](images/lab1-task6.22.png)\r\n\r\n23.Create an application called **myapp** and click **Save**. You will be this application for testing the API.\r\n\r\n![](images/lab1-task6.23.png)\r\n\r\n24.You receive credentials API Key and secret. You don’t need to use for this lab, just close the window.\r\n\r\n![](images/lab1-task6.24.png)\r\n\r\n25.Click **myapp** icon to select Application.\r\n\r\n![](images/lab1-task6.25.png)\r\n\r\n26.Confirm the subscription for **orders auto product**. Click **Next**.\r\n\r\n![](images/lab1-task6.26.png)\r\n\r\n27.The subscription is completed and then click **Done**.\r\n\r\n![](images/lab1-task6.27.png)\r\n\r\n28.Click the icon **orders 1.0.0**, to open the API.\r\n\r\n![](images/lab1-task6.28.png)\r\n\r\n29.In orders 1.0.0 page:\r\n\r\n```\r\n1.Select GET/{order}\r\n2.Select Try it\r\n3.Enter order numbering 0000\r\n4.Click Send.\r\n\r\n```\r\n\r\n![](images/lab1-task6.29.png)\r\n\r\n30.The results are shown in the response string.\r\n\r\n![](images/lab1-task6.30.png)\r\n\r\n\r\n## Sharing the API\r\n\r\n### Task 5 - Share the API\r\n\r\nNow that you've built, secured, published, and tested your API, the last step is to add it to the Asset Repository. With the Asset Repository, your organization can store, manage, and share all of your integration assets in one central location. Sharing assets in this way increases collaboration between teams, avoids unnecessary duplication and boosts productivity.\r\n\r\n1.If you using the Asset Repository for the first time, it must be initialized. Open assetrepo link from the **Capabilities** and select **Initialize**.\r\n\r\n![](images/lab1-task7.1.png)\r\n\r\n2.To push our new API to **Asset Repository** we must return to the API Manager. In **Welcome IBM Cloud Pak for Integration – Capabilities**, click **API Connect** link name.\r\n\r\n![](images/lab1-task6.2.png)\r\n\r\n3.In the API Manager screen, click **Develop APIs and Products**.\r\n\r\n![](images/lab1-task7.3.png)\r\n\r\n4.Returning to the Develop Screen, select the menu next to your API and from the drop-down, click **Push to asset repository**.\r\n\r\n![](images/lab1-task7.4.png)\r\n\r\n5.Once the upload completes, you see a success dialogue at top-right.\r\n\r\n![](images/lab1-task7.5.png)\r\n\r\n6.To access the **Asset Repository**, click asset-repo link.\r\n\r\n![](images/lab1-task7.6.png)\r\n\r\n7.You see the orders asset you pushed from API Connect in the previous tasks. Click the ellipsis and choose **Open** from the drop-down menu.to check orders API.\r\n\r\n![](images/lab1-task7.7.png)\r\n\r\n8.You check the API overview.\r\n\r\n![](images/lab1-task7.8.png)\r\n\r\n9.Click **Get/{order}** link you see the API parameters.\r\n\r\n![](images/lab1-task7.9.png)\r\n\r\n10.Click Definitions and then click the Arrow (Order). You see an example of results.\r\n\r\n![](images/lab1-task7.10.png)\r\n\r\nYou’ve successfully added a review. Now your teammates know that this asset is reusable and reliable. Additional information about the asset is available in the sidebar including when the file was created, a description that explains the purpose and use, and any relevant tags\r\n\r\n## Using Operations Dashboard\r\n\r\n### Task 6 – Using Operations Dashboard (tracing)\r\n\r\n\r\nCloud Pak for Integration - Operations Dashboard Add-on is based on Jaeger open source project and the OpenTracing standard to monitor and troubleshoot microservices-based distributed systems. Operations Dashboard can distinguish call paths and latencies. DevOps personnel, developers, and performance engineers now have one tool to visualize throughput and latency across integration components that run on Cloud Pak for Integration. Cloud Pak for Integration - Operations Dashboard Add-on is designed to help organizations that need to meet and ensure maximum service availability and react quickly to any variations in their systems.\r\n\r\n1.Go to the IBM Pak Cloud Integration main page  select View events and  click tracing to open the Operations Dashboard instance.\r\n\r\n![](images/lab1-task8.1.png)\r\n\r\n2.In the Tracing page, check the **Overview page**. You see all products that you can use this tool: APIC ,APP Connect and MQ. (more tracing products will add in the future releases).\r\n\r\n![](images/lab1-task8.2.png)\r\n\r\n3.You can monitor each product separately. Click **App C overview**.\r\n\r\n![](images/lab1-task8.3.png)\r\n\r\n4.See API Connect overview.\r\n\r\n![](images/lab1-task8.4.png)\r\n\r\n5.Operations Dashboard generated a list of tracing. Select a line to analyze the trace of MQ  App Connect Enterprise, and API Connect. select **Traces** icon the menu on the left. Select the line that you want to see the trace. Enter the name of App Connect server name: **ORDERS** and click the line (**gen.orders**).\r\n\r\n![](images/lab1-task8.5.png)\r\n\r\n6.Take look at the charts for each component for these labs.\r\n\r\n![](images/lab1-task8.6.png)\r\n\r\n## Summary\r\n\r\n### Summary\r\n\r\nYou have successfully completed this lab. In this lab you learned how to:\r\n\r\n - Deploy a back-end integration to containers that are readily available as a scalable web service.\r\n - Secure access to the back-end integration by creating a secure, governed API using the OpenAPI definition of the integration.\r\n - Use Operations Dashboard to tracing  MQ, APIC and APPC\r\n\r\n### Now that you’ve made your back-end integrations ready for external distribution, your developer community is able to access the APIs via a developer portal. The developer portal is included in the platform and provides a full-featured experience to onboard and nurture your API consumers. To try out more labs, go to Cloud Pak for Integration Demos. For more information about Cloud Pak for Integration, go to https://www.ibm.com/cloud/cloud-pak-for-integration\r\n","type":"Mdx","contentDigest":"6d59634bac977cd262d547b9a711d823","counter":1594,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Build and deploy new integrations and securely expose them as APIs"},"exports":{},"rawBody":"---\r\ntitle: Build and deploy new integrations and securely expose them as APIs\r\n---\r\n\r\nimport ArticleDetails from '../../../../src/gatsby-theme-carbon/components/ArticleDetails'\r\n\r\nIn this tutorial, you use the IBM Cloud Pak for Integration 2020.4.1 to deploy an App Integration flow on containers and expose it as a secure rate-limited API on RedHat OpenShift 4.6.\r\n\r\nExtend your back-end integrations securely to partners and developers.\r\nExtending access via APIs to your back-end integrations empower your partners and developer community to create new business value, technical value, and customer experiences for your products and offerings. Spur innovations where a number of technologies are combined to create something new, for example, extending the ability apply for loan pre-approvals that can be used within apps that search for cars or real estate. To do this, you must first create the back-end integrations, which combine data from existing core systems, disparate assets, or SaaS services with the ability to send critical data between systems reliably. Second, you need to provide APIs to your back-end integrations that secure access and apply rate limits.\r\nIn this tutorial, you learn how to deploy an app integration flow that takes data from one source and sends it to a message queue for reliable delivery. Then, you expose this integration as a rate-limited API secured by a key and secret. This integration flow is deployed quickly and easily as an independent, auto-scalable microservice running on containers. By using RedHat OpenShift as a foundation.\r\n\r\n\r\n<AnchorLinks>\r\n  <AnchorLink>Configuring IBM MQ</AnchorLink>\r\n  <AnchorLink>Creating a BAR File</AnchorLink>\r\n  <AnchorLink>Deploying a BAR file</AnchorLink>\r\n  <AnchorLink>Configuring API Connect</AnchorLink>\r\n  <AnchorLink>Sharing the API</AnchorLink>\r\n  <AnchorLink>Using Operations Dashboard</AnchorLink>\r\n  <AnchorLink>Summary</AnchorLink>\r\n</AnchorLinks>\r\n\r\n## Introduction\r\n\r\nImplement enterprise grade messaging that is secure and reliable for any application across your backend integration architecture. Modern applications and APIs all need the ability to communicate data reliably between mission critical systems across internal/external data sources, networks, and regions. In mission critical environments your messaging infrastructure must be robust, reliable, and secure with the ability to integrate into your applications and APIs at pace and scale. In this tutorial, you create a message queue that receives order data from an API call to a retail ordering system. The red box in the diagram shows what you are creating and where it fits in the overall architecture of a mobile retail buying application.\r\n\r\n### Takeaways\r\n\r\n- Exploring multiple integration capabilities within a single platform\r\n- Configuring IBM MQ\r\n- Creating an integration flow that connects to a message queue\r\n- Deploy the integration flow as a container in Kubernetes\r\n- Checking the message using MQ Web Console\r\n- Configuring API in API connect\r\n- Sharing API in Asset Repository\r\n- Checking this message using Operational Dashboard (tracing)\r\n\r\n\r\n\r\n## Configuring IBM MQ\r\n\r\n\r\n### Task 1 - Configure Message Queue (MQ) to Authorize and Accept Data.\r\n\r\nAs this is a brand-new deployment of the Cloud Pak for Integration, all instances of integrations, message queues, and event streams are deployed as microservices. We need to authorize the Message Queue service to accept incoming data from the integration running on a separate server.\r\nCloud Pak for Integration provides a single solution for all of your enterprise integration needs. The platform provides a comprehensive set of industry-leading capabilities. Use any of them on their own or together through a single interface. Create, manage, and monitor all of your integrations across SaaS applications, messaging, streams, APIs, high-speed transfer, and more.\r\nUnlock the power of your data and support the scale required for all of your integration and digital transformation initiatives.\r\n\r\n\r\n1.You need to configure the MQ security .Open a browser and enter https://github.com/ibm-cloudintegration/dte-labs/tree/master/Lab1-BuildAndDeployAPIs/resources .\r\n\r\n![](images/lab1-task2.1-github.png)\r\n\r\n2.Select **ace-apic.zip** and the click **Download**.\r\n\r\n![](images/lab1-task2.2-select-apic-download.png)\r\n\r\n3.Repeat step 2 and download **mqconf.zip**.\r\n\r\n4.The files **ace-apic.zip** and **mqconf.zip** are in **~/Downloads**. Uncompress the **mqconf.zip** (use **unzip mqconf.zip**), the unzip generates a directory **mqconf** with two files **loadmq.sh** and **mq_ace_lab.mqsc**.\r\n\r\n![](images/lab1-task2.4-unzip-mqconf.png)\r\n\r\n5.Go to **mqconf** directory and execute the shell script **loadmq.sh**. (use **./loadmq.sh**). You are already logged in Openshift cluster and mq configuration is loaded .\r\n\r\n![](images/lab1-task2.5.png)\r\n\r\n6.Click the IBM Cloud Pak for Integration Platform Navigation. Locate MQ and click the MQ instance name: **mq-demo**.\r\n\r\n![](images/lab1-task2.6-accessing-mq.png)\r\n\r\n7.You might need to login screen for IBM Cloud Pak might be displayed, enter the username: **admin** and Password (**Enter the 32 characters password that you created when you made the Cloud Pak provisioning**) and Click **Log in**.\r\n\r\n![](images/lab1-task1.2-userid-password.png)\r\n\r\n8.In the **Welcome IBM MQ page** (**QUICKSTART** is the name of queue manager). This page, you can manage queue manager, create queues, learn MQ basics, and get more information about IBM MQ. Click **Create a queue**.\r\n\r\n![](images/lab1-task2.8-access-mq-console.png)\r\n\r\n9.In Create a queue page. You can choose queue type: Local, Alias, Remote, and Model. Click **local** to create a queue.\r\n\r\n![](images/lab1-task2.9-create-a-queue.png)\r\n\r\n10.Enter the queue name: **ORDERS (this is case-sensitive)** and keep the default values and the click **Create**.\r\n\r\n![](images/lab1-task2.10-queue-orders.png)\r\n\r\n11.Click **Manage QUICKSTART** and You see the queues window. You see queue names, type and queue depth.\r\n\r\n![](images/lab1-task2.11-show-queues.png)\r\n\r\n## Creating a BAR file\r\n\r\n### Task 2 – Configuring the integration flow using App Connect Enterprise Toolkit\r\n\r\nThis task covers opening and examining an application integration flow in the IBM App Connect Enterprise Toolkit. With the Toolkit you can build powerful and complex integration applications, services, and APIs quickly and easily using a visual designer. Your integration solutions can be directly deployed to the Cloud Pak for Integration on IBM Cloud Pak running on-premise, in any cloud, or combinations of both.\r\n\r\n1.In the desktop click the right mouse to open a terminal window. If you are using MAC click App Connect Enterprise Toolkit icon and go to the Step 3.\r\n\r\n2.In the terminal window, type ace toolkit to open the App Connect Enterprise Toolkit.\r\n\r\n![](images/lab1-task3.2.png)\r\n\r\n3.In the Workspace Launcher window, choose the workspace **~/IBM/ACET11/workspace/ace-apic**. Create the path routes to the folder: **ace-apic**. **Click OK**.\r\n\r\n![](images/lab1-task3.3.png)\r\n\r\n4.If you are using MAC OS, you need to import **ace-apic.zip** into App Connect Enterprise toolkit (the **ace-apic.zip** should be in your **~/Downloads** directory). The toolkit opens the project. To view the integration flow that you deploy, click **orders -> Resources -> Subflows -> getOrder.subflow** .\r\n\r\n![](images/lab1-task3.4.png)\r\n\r\n5.Check the MQ node by clicking the MQ Output Node. Click Properties and select **Basic**, and enter the queue name (you created in MQ Task) **ORDERS**.\r\n\r\n![](images/lab1-task3.5.png)\r\n\r\n6.Select the MQ connection tab. App Connect Enterprise uses a mq client connection:\r\n\r\n```\r\n\r\n1.\tSelect MQ client connection properties.\r\n2.\tType Destination queue manager name: QUICKSTART.\r\n3.\tType Queue manager host name: 172.21.157.216 .\r\n4.\tType port number: 1414.\r\n5.\tType Channel name: SYSTEM.DEF.SVRCONN.\r\n6.\tSave the flow (Control + S)\r\n\r\n```\r\n\r\n![](images/lab1-task3.7.png)\r\n\r\n7.In the Application Development view on the left, on orders flow, right-click and then select **New -> BAR file**.\r\n\r\n![](images/lab1-task3.8.png)\r\n\r\n8.Enter the name of BAR file: **orders** and click **Finish**. App Connect Enterprise is creating an empty BAR file.\r\n\r\n![](images/lab1-task3.9.png)\r\n\r\n9.You need to configure which artifacts are compiled in the BAR file. Check **orders** and check **Compile and in-line resources**, then click the **Build and Save** button. A pop-up window displays “Operation completed successfully.” Click **OK**.\r\n\r\n![](images/lab1-task3.10.png)\r\n\r\n## Deploying a BAR file\r\n\r\n### Task 3 – Deploy Integration BAR file as containers\r\n\r\nIn this task, you deploy a BAR file in App Connect Enterprise Dashboard.\r\n\r\n1.Open **Cloud Pak Platform Navigator** in the browser. Open Capabilities and click **ace-dashboard** link to open App Connect Enterprise Dashboard.\r\n\r\n![](images/cloud-pak-capabilities.png)\r\n\r\n2.In the App Connect Enterprise Dashboard, you see the Integration Server deployed. To deploy the **orders.bar** file you saved and complied above click **Create a server**.\r\n\r\n![](images/lab1-task4.2.png)\r\n\r\n3.In the **Create an integration server page**. You have two option to deploy a BAR file. Deploy a BAR file from **App Connect Toolkit** or from **App Connect Designer**. In this lab you deploy BAR file from App Connect Toolkit. Select Toolkit link and then click **NEXT**.\r\n\r\n![](images/lab1-task4.3.png)\r\n\r\n4.You see that **orders.bar** (~/IBM/ACET11/workspace/ace-apic/BARfiles) has uploaded to be deployed. Click **Open**.\r\n\r\n![](images/lab1-task4.4.png)\r\n\r\n5.You see orders.bar in to be imported and click **Next**.\r\n\r\n![](images/lab1-task4.5.png)\r\n\r\n6.You don’t need to download configuration package (Configuration package contains the files that you can use for App Connect Enterprise works with Databases, Event Streams, etc) click **Next**.\r\n\r\n![](images/lab1-task4.6.png)\r\n\r\n7.In Create an App Connect Integration Server page, enter the following:\r\n\r\n```\r\n\r\n1\tIntegration Server name: **orders**.\r\n2\tSwitch to **On** to **Enable Operations Dashboard tracing**.\r\n3\tEnter OO tracing instance namespace: **cp4i**.\r\n4\tClick **Create**.\r\n\r\n```\r\n\r\n![](images/lab1-task4.7.png)\r\n\r\n8.During the deployment process, App Connect Enterprise opens the servers page. You see the App Connect Enterprise Dashboard with the Integration Server orders deployed and started .Click the **orders server** icon.\r\nNote: The deployment process takes 2-3 minutes, refresh the browser to see the BAR file.\r\n\r\n![](images/lab1-task4.8.png)\r\n\r\n9.Click **orders API**.\r\n\r\n![](images/lab1-task4.9.png)\r\n\r\n10.This page displays the REST API Base URL. Copy the base URL (in the example below:\r\nhttp://orders-http-cp4i.playgrowth-integr-694940-8946bbc006b7c6eb0829d088919818bb-0000.us-east.containers.appdomain.cloud:80/orders/v1 ).\r\n\r\n### Keep the browser opened\r\n\r\n![](images/lab1-task4.10.png)\r\n\r\n11.From the terminal window, execute the following curl command and complete with 0000. Enter: curl -k --request GET http://orders-http-cp4i.playgrowth-integr-694940-8946bbc006b7c6eb0829d088919818bb-0000.us-east.containers.appdomain.cloud:80/orders/v1 /0000.\r\nIf the API call is successful, you see JSON reply with {\"accountid\":\"ABC-1234567890\",\"orderid\":\"0000000\"}\r\n\r\n![](images/lab1-task4.11.png)\r\n\r\n12.You check the message arrived in queue **ORDERS** in MQ You can check using MQ Console. Open a browser and go to **Cloud Pak Platform Navigator** and click **mq link**. Click **Manage QUICKSTART**.\r\n\r\n![](images/lab1-task4.12.png)\r\n\r\n13.You see in the queues on QUICKSTART. The queue ORDERS has a message (look at Queue Depth)\r\n\r\n![](images/lab1-task4.13.png)\r\n\r\n## Configuring API Connect\r\n\r\n### Task 4  – Configuring API Connect to test the integration\r\n\r\nYou've created an application integration flow and successfully called it via a REST API call! Now, to make it accessible to the rest of the world, it's important to add security around it—at least in the form of a client ID .This way, in addition to access control, you can get insights into which teams or customers are the least and most active. Adding security to an API is simply done via an OpenAPI configuration parameter. We can add rate limits to the API to increase the calls per second, minute, or hour to scale up as much as you need.\r\n\r\n1.Open the browser window opened where you have the orders API window open. Click the Download **Open API Document** icon. You save as **orders-1.0.0.yaml** file in **~/Downloads** directory.\r\n\r\n![](images/lab1-task6.1.png)\r\n\r\n2.In **Welcome IBM Cloud Pak for Integration** – **Capabilities**, click **API Connect** link name.\r\n\r\n![](images/lab1-task6.2.png)\r\n\r\n3.You might receive a Warning: Potential Security Risk Ahead. Click Advanced and then Accept the Risk and Continue.\r\n\r\n![](images/lab1-task6.3.png)\r\n\r\n4.In the **API Connect** page, click **IBM Common Services user registry**.\r\n\r\n![](images/lab1-task6.4.png)\r\n\r\n5.Click **Develop APIs and Products**.\r\n\r\n![](images/lab1-task6.5.png)\r\n\r\n6.Click **Add**, then choose **API** from the drop-down menu.\r\n\r\n![](images/lab1-task6.6.png)\r\n\r\n7.Choose **From an existing OpenAPI service**, scroll down and click **Next**.\r\n\r\n![](images/lab1-task6.7.png)\r\n\r\n8.Click **Drag and drop files here or click to upload** to load **order-1.0.0.yaml** in **~/Downloads** directory. And then click **Next**.\r\n\r\n![](images/lab1-task6.8.png)\r\n\r\n9.Confirm the Info about API and click **Next**.\r\n\r\n![](images/lab1-task6.9.png)\r\n\r\n10.Keep the security settings and click **Next**.\r\n\r\n![](images/lab1-task6.10.png)\r\n\r\n11.Your API with Client ID is created! Click **Edit API**.\r\n\r\n![](images/lab1-task6.11.png)\r\n\r\n12.In the API Setup page. You have configured your API and you need to switch Online. Switch **Online** and click **Save**.\r\n\r\n![](images/lab1-task6.12.png)\r\n\r\n13.To test the API, Click **Assemble**, then click the **Test** link and replace **{order}** for **0000** in **GET** command. Click **Send**.\r\n\r\n![](images/lab1-task6.13.png)\r\n\r\n14.Scroll down and see Body and check the results. You see a status code: **200** created with a response body containing the results details.\r\n\r\n![](images/lab1-task6.14.png)\r\n\r\n15.You need to get the Developer Portal and go to **Welcome to API Manager** page, click **Manage** on the left.\r\n\r\n![](images/lab1-task6.15.png)\r\n\r\n16.\tSelect the **Catalog Sandbox**.\r\n\r\n![](images/lab1-task6.16.png)\r\n\r\n17.We already configure the portal for you.In Sandbox page, click Catalog settings and click Portal and copy the Portal URL:  https://ademo-ptl-portal-web-cp4i.playgrowth-integr-694940-8946bbc006b7c6eb0829d088919818bb-0000.us-east.containers.appdomain.cloud/ddd-demo-test/sandbox.\r\n\r\n![](images/lab1-task6.17.png)\r\n\r\n18.\tLogin to Developer Portal server using the link you copied in the browser.\r\n\r\n![](images/lab1-task6.18.png)\r\n\r\n19.\tSign in using ibmuser and password Passw0rd!.\r\n\r\n![](images/lab1-task6.19.png)\r\n\r\n20.In the Developer Portal, explore products clicking **orders auto product 1.0.0** icon.\r\n\r\n![](images/lab1-task6.20.png)\r\n\r\n21.You need to subscribe to Default Plan, clicking **Subscribe**.\r\n\r\n![](images/lab1-task6.21.png)\r\n\r\n22.Create an Application, clicking **Create Application**.\r\n\r\n![](images/lab1-task6.22.png)\r\n\r\n23.Create an application called **myapp** and click **Save**. You will be this application for testing the API.\r\n\r\n![](images/lab1-task6.23.png)\r\n\r\n24.You receive credentials API Key and secret. You don’t need to use for this lab, just close the window.\r\n\r\n![](images/lab1-task6.24.png)\r\n\r\n25.Click **myapp** icon to select Application.\r\n\r\n![](images/lab1-task6.25.png)\r\n\r\n26.Confirm the subscription for **orders auto product**. Click **Next**.\r\n\r\n![](images/lab1-task6.26.png)\r\n\r\n27.The subscription is completed and then click **Done**.\r\n\r\n![](images/lab1-task6.27.png)\r\n\r\n28.Click the icon **orders 1.0.0**, to open the API.\r\n\r\n![](images/lab1-task6.28.png)\r\n\r\n29.In orders 1.0.0 page:\r\n\r\n```\r\n1.Select GET/{order}\r\n2.Select Try it\r\n3.Enter order numbering 0000\r\n4.Click Send.\r\n\r\n```\r\n\r\n![](images/lab1-task6.29.png)\r\n\r\n30.The results are shown in the response string.\r\n\r\n![](images/lab1-task6.30.png)\r\n\r\n\r\n## Sharing the API\r\n\r\n### Task 5 - Share the API\r\n\r\nNow that you've built, secured, published, and tested your API, the last step is to add it to the Asset Repository. With the Asset Repository, your organization can store, manage, and share all of your integration assets in one central location. Sharing assets in this way increases collaboration between teams, avoids unnecessary duplication and boosts productivity.\r\n\r\n1.If you using the Asset Repository for the first time, it must be initialized. Open assetrepo link from the **Capabilities** and select **Initialize**.\r\n\r\n![](images/lab1-task7.1.png)\r\n\r\n2.To push our new API to **Asset Repository** we must return to the API Manager. In **Welcome IBM Cloud Pak for Integration – Capabilities**, click **API Connect** link name.\r\n\r\n![](images/lab1-task6.2.png)\r\n\r\n3.In the API Manager screen, click **Develop APIs and Products**.\r\n\r\n![](images/lab1-task7.3.png)\r\n\r\n4.Returning to the Develop Screen, select the menu next to your API and from the drop-down, click **Push to asset repository**.\r\n\r\n![](images/lab1-task7.4.png)\r\n\r\n5.Once the upload completes, you see a success dialogue at top-right.\r\n\r\n![](images/lab1-task7.5.png)\r\n\r\n6.To access the **Asset Repository**, click asset-repo link.\r\n\r\n![](images/lab1-task7.6.png)\r\n\r\n7.You see the orders asset you pushed from API Connect in the previous tasks. Click the ellipsis and choose **Open** from the drop-down menu.to check orders API.\r\n\r\n![](images/lab1-task7.7.png)\r\n\r\n8.You check the API overview.\r\n\r\n![](images/lab1-task7.8.png)\r\n\r\n9.Click **Get/{order}** link you see the API parameters.\r\n\r\n![](images/lab1-task7.9.png)\r\n\r\n10.Click Definitions and then click the Arrow (Order). You see an example of results.\r\n\r\n![](images/lab1-task7.10.png)\r\n\r\nYou’ve successfully added a review. Now your teammates know that this asset is reusable and reliable. Additional information about the asset is available in the sidebar including when the file was created, a description that explains the purpose and use, and any relevant tags\r\n\r\n## Using Operations Dashboard\r\n\r\n### Task 6 – Using Operations Dashboard (tracing)\r\n\r\n\r\nCloud Pak for Integration - Operations Dashboard Add-on is based on Jaeger open source project and the OpenTracing standard to monitor and troubleshoot microservices-based distributed systems. Operations Dashboard can distinguish call paths and latencies. DevOps personnel, developers, and performance engineers now have one tool to visualize throughput and latency across integration components that run on Cloud Pak for Integration. Cloud Pak for Integration - Operations Dashboard Add-on is designed to help organizations that need to meet and ensure maximum service availability and react quickly to any variations in their systems.\r\n\r\n1.Go to the IBM Pak Cloud Integration main page  select View events and  click tracing to open the Operations Dashboard instance.\r\n\r\n![](images/lab1-task8.1.png)\r\n\r\n2.In the Tracing page, check the **Overview page**. You see all products that you can use this tool: APIC ,APP Connect and MQ. (more tracing products will add in the future releases).\r\n\r\n![](images/lab1-task8.2.png)\r\n\r\n3.You can monitor each product separately. Click **App C overview**.\r\n\r\n![](images/lab1-task8.3.png)\r\n\r\n4.See API Connect overview.\r\n\r\n![](images/lab1-task8.4.png)\r\n\r\n5.Operations Dashboard generated a list of tracing. Select a line to analyze the trace of MQ  App Connect Enterprise, and API Connect. select **Traces** icon the menu on the left. Select the line that you want to see the trace. Enter the name of App Connect server name: **ORDERS** and click the line (**gen.orders**).\r\n\r\n![](images/lab1-task8.5.png)\r\n\r\n6.Take look at the charts for each component for these labs.\r\n\r\n![](images/lab1-task8.6.png)\r\n\r\n## Summary\r\n\r\n### Summary\r\n\r\nYou have successfully completed this lab. In this lab you learned how to:\r\n\r\n - Deploy a back-end integration to containers that are readily available as a scalable web service.\r\n - Secure access to the back-end integration by creating a secure, governed API using the OpenAPI definition of the integration.\r\n - Use Operations Dashboard to tracing  MQ, APIC and APPC\r\n\r\n### Now that you’ve made your back-end integrations ready for external distribution, your developer community is able to access the APIs via a developer portal. The developer portal is included in the platform and provides a full-featured experience to onboard and nurture your API consumers. To try out more labs, go to Cloud Pak for Integration Demos. For more information about Cloud Pak for Integration, go to https://www.ibm.com/cloud/cloud-pak-for-integration\r\n","fileAbsolutePath":"C:/Users/ruffa/Documents/GitHub/cp4i-demohub/src/pages/tutorials/BuildDeployAPIs-old/index.mdx"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550","768070550"]}