{"componentChunkName":"component---src-pages-apic-dev-jam-lab-5-index-md","path":"/APICDevJam/Lab5/","result":{"pageContext":{"frontmatter":{"title":"APIC Dev Jam Lab 5 - Advanced API Assembly"},"relativePagePath":"/APICDevJam/Lab5/index.md","titleType":"page","MdxNode":{"id":"8938e0b0-67f8-5d44-add5-9d9361961271","children":[],"parent":"a3a49401-f229-5fc0-ac99-4977de11caa4","internal":{"content":"---\ntitle: APIC Dev Jam Lab 5 - Advanced API Assembly\n---\n\nIn the previous labs, you have been working with an API that acts as a\npass-through to a microservice application.\n\nIn this lab, you will expand the product offerings for ThinkIBM. In\naddition to the Inventory API, ThinkIBM wishes to provide APIs that\noffer financing and shipping logistics to consumer applications. Your\ngoal is to utilize existing enterprise and public assets to create these\nAPI offerings.\n\nIn this tutorial, you will explore the following key capabilities:\n\n-   Create a new API, including object definitions and paths.\n\n-   Configure an API to access an existing SOAP service.\n\n-   Import an existing API from an OpenAPI definition document (a.k.a\n    Swagger).\n\n-   Map data retrieved from multiple API calls into an aggregate\n    response.\n\n-   Use GatewayScript directly within an API assembly.\n\n## APIC Dev Jam Series\n\nThe APIC Dev Jam Series is a hands-on workshop with lab exercises that\nwalk you through designing, publishing, and securing APIs. This workshop\nis for API developers, architects, and line of business people who want\nto create a successful API strategy. There are 8 labs and each is 30\nminutes long. Make sure you choose enough time in your reservation to\nget through all the labs! \n\n[NOTE: ]**[This demo environment contains a\nfull API Connect installation in Cloud Pak for Integration. The login\ninformation to the APIC cluster will be sent in a separate email when\nyou reserve the instance. Use Google Chrome, Firefox or Microsoft Edge\nto access the cluster using the credentials supplied. Make sure you\nlogin using API Manager User Registry not Common Services\nregistry.]**\n\nPrerequisites: Labs 1-4\n\n## Create and Define the Financing API (REST to SOAP)\n\nThinkIBM wants to give its customers the ability to calculate financing\npayments. There is already a legacy SOAP-based application which will do\nthe calculation, but it should be exposed to consumers as a modern\nRESTful API. In this section, you will create a new OpenAPI definition\nfor the financing API.\n\n1. From the left navigation menu,\n  click **[Develop.]**\n\n2. Click **[Add]** and\n  choose **[API]**.\n\n    ![](images/tutorial_html_35bc8347ebf9f3c4.png)\n\n3. Select **[New OpenAPI]** and click [[Next.]]\n\n    ![](images/tutorial_html_8027761d9675e244.png)\n\n4. Fill in the form for **Create New OpenAPI** with the following values: \n\n    **[Title: financing]**\n\n    **Name: financing**\n\n    **Base Path: /financing**\n\n    **Version: 1.0.0**\n\n    Click **Next**.\n\n    ![](images/tutorial_html_6dab5b579d7af76.png)\n\n5. Leave all default values and click [[Next. ]]API\n    Connect will generate a new OpenAPI definition for the financing API and\n    provide a summary with the performed activities.\n\n    ![](images/tutorial_html_fb454c7ee948008d.png)\n\n6.  Click  **[Edit API ]**to customize the API.**\n\n7. Create the model definition for the new API. These definitions are\n    used in a few places. Their primary role is to serve as documentation in\n    the developer portal on expected input and output parameters. However,\n    they can also be used for data mapping actions.\n    Click **[Definitions]** from the API\n    Designer menu on the left. Then,\n    click **[Add]** to create a new definition.\n\n    ![](images/tutorial_html_f584c2696c3ce084.png)\n\n8. Enter **[paymentAmount]** for **[Name]** and\n    leave the definition **[Type]** set\n    to **[object]**.\n\n9. Click **[Add]** in\n    the **[Properties]** section.\n\n    ![](images/tutorial_html_332203efe7e366f5.png)\n\n10. Edit the **property values** using the following values:\n\n    **Property Name: paymentAmount**\n\n    **Type: float**\n\n    **Example: 199.99**\n\n    **Description: Monthly payment amount**\n\n    The page will look like this:\n\n   ![](images/tutorial_html_c600b4bb8ec6adee.png)\n\n    The property will be utilized in the Path you create next.\n    Click **[Save]** to go back to the main API\n    Editor.\n\n11. Click [[Paths]] in\n    the navigation menu on the left. Then\n    click **[Add]** to create a new path.\n\n    ![](images/tutorial_html_f3f04d5e1fde784d.png)\n\n12. The Path screen is loaded. Edit the [[Path name]] to be **[/calculate]**. **[Note:]** [Recall that our Base\n    Path for this API is \\`financing\\`. This new path will be appended to\n    the base, creating a final path of       \n    /financing/calculate.]**\n\n13. Click [[Add]] in\n    the Operations section to define the operation to support under the\n    path.\n\n    ![](images/tutorial_html_32f5ad5e80b58cd5.png)\n\n14. From the **[Add Operation]** menu,\n    select the **[Get]** operation and then\n    click **[Add]**. \n\n    ![](images/tutorial_html_aae3e2ff9be52791.png)\n\n15. Click **[Save]**. You will be\n    redirected to the main API Editor to continue.\n\n    ![](images/tutorial_html_66cc80ef2c7d855b.png)\n\n16. Click the **[/calculate]** path we just created.\n\n    ![](images/tutorial_html_864cc1225031590a.png)\n\n17. Click the **[GET]** operation to add\n    the request parameters. This defines the input to the API request. Since\n    this is a GET request, you will add the required request parameters to\n    the query component of the URI.\n\n    ![](images/tutorial_html_2cf0c1234fbd4aa3.png)\n\n18. Scroll down to the Parameters section within the operation config.\n    Click [[Add]] in the [[Parameters]] section.\n    You are actually going to need three total parameters for this\n    operation, so go ahead and click the \\`**Add**\\` button **two more\n    times** to add the parameter templates.\n\n    ![](images/tutorial_html_1e46988677afe0a.png)\n\n19. Edit the **parameters** to set the values:\n\n```\n  **Required**   **Name**   **Located In**   **Type**   **Description**\n  -------------- ---------- ---------------- ---------- --------------------------\n  yes            amount     Query            float      amount to finance\n  yes            duration   Query            int 32     length of term in months\n  yes            rate       Query            float      interest rate\n\n```\n  Once you have entered the values, the screen will look like this:\n\n  ![](images/tutorial_html_2fc0008e5f75928e.png)\n\n20. Set the schema for the response. Click **Add** in\n    the **[Response]** section.\n    Enter [[200]] for [[STATUS CODE]].\n    Since we already defined\n    the **[paymentAmount]** definition, select\n    it from the drop down list\n    for [[SCHEMA]].\n    You will find\n    the **[paymentAmount]** definition at the\n    bottom of the list.\n    For [[DESCRIPTION]] enter [[amount\n    calculated\n    successfully]]\n    ![](images/tutorial_html_f51180a01dc389af.png)\n\n21. Click [[Save]] to\n    save the API definition.\n\n    ![](images/tutorial_html_a0106fbcef024d0.png)\n\n## Map the API to a Service WSDL\n\nImport the legacy Financing SOAP service WSDL and map it to the RESTful\nAPI definition.\n\n### Attach a Service WSDL\n\n1.  Click the **[Target Services]** option\n    in the left column menu palette from the **[financing\n    1.0.0]** API Design screen\n\n2.  Click **[Add]** to import the web\n    service from the legacy financing service.\n\n    ![](images/tutorial_html_ebb6419fc4fb979a.png)\n\n3.  Download the [calculate.wsdl](https://integrationsuperhero.github.io/techcon2020/APICDevJam/resources/calculate.wsdl) and then Click **[Browse]** to\n    select [[calculate.wsdl]] located\n    in where you downloaded it on your machine.\n\n    ![](images/tutorial_html_e10ec45733dfce99.png)\n\n    You will get a success message and the service included in the WSDL\n    will be displayed.\n\n    ![](images/tutorial_html_6a8444e050b87ad3.png)\n\n5. Select **[financingService.]** Then click **[Submit]**.\n\n   ### Build the Financing API Assembly\n\n1. Click [[Assemble]] to\n    access the assembly editor.\n\n    ![](images/tutorial_html_7ecdd003a7db2e23.png)\n\n2. In the processing pipeline, mouse over\n    the [[invoke]] policy\n    and click\n    the [[trashcan]] icon\n    to delete it.\n\n    ![](images/tutorial_html_d05e099dd7e132b4.png)\n\n3. Scroll down to the bottom of the policy menu and drag and drop\n    the **[financing web service\n    operations]** to processing pipeline.\n\n    ![](images/tutorial_html_771de22ad92a31fb.png)\n\n4. Now you are going to modify the input and output map policy for\n    mapping your REST API into SOAP.\n\n    ![](images/tutorial_html_4a933c8c317bbd97.png)\n\n5. Since we are using the new API Gateway, we will need to instruct it\n    to use the newer version of the policies in the flow (map, invoke, map).\n    Click Source to go to the OpenAPI definition of your API.\n\n    ![](images/tutorial_html_35460e46cf085196.png)\n\n6. Scroll down to map and insert [[version: 2.0.0]] right\n    below it. \n\n    ![](images/tutorial_html_66473f670a224c38.png)\n\n7. Scroll down to invoke and insert [[version 2.0.0]] right\n    below it. Skip if the version 2.0.0 is already populated.\n\n    ![](images/tutorial_html_d480dfb5896607c6.png)\n\n8. Now go to the last map and insert **[version: 2.0.0]** right below it.\n    Click [[Assemble]] to\n    go back to the gateway flow designer. Skip if the version 2.0.0 is already populated.\n\n    ![](images/tutorial_html_80b968197ef6f435.png)\n\n9. In order to consume a SOAP-based service from your REST-based API,\n    you need to map the query parameter inputs that were previously defined\n    as part of the GET /calculate operation to a SOAP payload. To do so,\n    click the [[financing\n    input]] map\n    policy on our pipeline to open the map editor.\n\n    [[Tip: Click on the \\`+\\` icon to make the editor window fill the\n    screen.]]\n\n10. Click on\n    the [[pencil icon]] in\n    the [[Input column]].\n\n    ![](images/tutorial_html_9d82765fc8e50237.png)\n\n11. Click [[+ parameters for operation\\...]] and\n    select the **[GET Calculate operation]**.\n\n    ![](images/tutorial_html_9dad0a59d5e53a96.png)\n\n    The Map editor will automatically pull in the request parameters\n    that you defined earlier.\n\n12. Click **[Done]** to return to the map\n    editor.\n\n13. For each of the Input query parameters, map them to their\n    respective SOAP Output elements.\n\n    To map from an input field to an output field, click the circle next\n    to the source element once, then click the circle next to the target\n    element. A line will be drawn between the two, indicating a mapping from\n    the source to the target.\n\n![](images/tutorial_html_e18d417ab873efe0.png)\n    \n14. Click [[\\`X\\`]] in\n    the map editor to return to the policy pipeline.\n\n15. Click\n    the [[invoke policy]] to\n    open its editor.\n\n16. The SOAP service URL has already been set for you during the\n    service import when we create the API.\n\n    ![](images/tutorial_html_8d30f4d88ab4c2bf.png)\n\n17. Click [[\\`X\\`]] to\n    return to the policy pipeline.\n\n18. After the Financing Web Service is invoked, you need to map the\n    SOAP response into a JSON object.\n\n    You already defined the response object\n    called [[paymentAmount]].\n    To do the map, click the **[financing\n    output]** map policy on the pipeline to\n    open the map editor.\n\n19. Click the [[pencil icon]] to set the output object schema.\n\n20. Click the **[+ outputs for\n    operation\\...]** option and select\n    the [[GET /calculate operation]].\n\n21. Set the [[Content type]] configuration\n    option\n    to [[application/json]],\n    and then\n    click [[Done]] to\n    return to the map editor.\n\n    ![](images/tutorial_html_4e9aa0f663bd6c06.png)\n\n22. Click the [[circle next to the paymentAmount source\n    element]] once,\n    then click the [[circle next to the target\n    element]].\n    A line will be drawn between the two, indicating a mapping from the\n    source to the target.\n\n    ![](images/tutorial_html_f2e452da44248e01.png)\n\n23. Click [[\\`X\\`]] in\n    the map editor to return to the policy pipeline.\n\n24. Click [[Save]] the API definition.\n\n25. Click **[Develop]** in the navigation\n    menu to return to the list of APIs and Products in your system.\n\n    ![](images/tutorial_html_a810481f55373ff0.png)\n\n## Import Logistics API\n\nIn this lab section, we will be adding a new API called logistics which\nwill provide helper services around calculating shipping rates and\nlocating nearby stores. Rather than require you to build the entire API\nfrom scratch again, you will see how you can import and modify an\nexisting OpenAPI definition.\n\n### Import the OpenAPI Definition\n\n1.  Click **[Add]** and\n    select **[API.]**  \n\n    ![](images/tutorial_html_44524c2a518bf56e.png)\n\n2.  From the Create API wizard, select [[Import: Existing\n    OpenAPI]].\n    Then\n    click [[Next]].  ![](images/tutorial_html_5515164592670a5f.png)\n\n3.  You will need logistics.yaml file for this step. Fron another browser window download the file using this link\n    [logistics.yaml](https://integrationsuperhero.github.io/techcon2020/APICDevJam/resources/logistics.yaml)\n\n    Click \\`**Browse**\\` in the [[Import from\n    file]] window, and select the downloaded logistics.yaml file.\n\n    ![](images/tutorial_html_2ec43e484c5482b0.png)\n\n4.  Click [[Next]] in\n    the confirmation window.\n\n5.  Click [[Next]] one\n    more time [[without selecting the option Activate\n    API]] since\n    we still need to make some updates.\n\n6.  Click [[Edit\n    API]] in\n    the [[Summary]] page\n    to go to the API editor.\n\n### Configure payload to be stored in Analytics\n\n1.  From the API menu, select [[Activity\n    Log]].\n    In\n    the [[Content]] drop-down,\n    select [[payload]].\n    A pop up window will be displayed, asking to enable buffering.\n    Click [[Continue]].\n\n    ![](images/tutorial_html_e8ffcd636704e49b.png)\n\n2.  Set the [[Content on\n    error]] drop-down\n    to [[activity]].\n    Click [[Save]].\n\n    ![](images/tutorial_html_1b4e90745e45c224.png)\n\n## Create an Orchestration Assembly\n\nThe logistics API provides resources for calculating shipping costs and\nlocating the nearest store for pickup. In this section, you will\nconfigure the assembly for the shipping calculation resource. Your API\nassembly will call out to two separate shipping vendors and provide a\nconsolidated response back to the consumer.\n\n### Create the Logistics API Assembly\n\n1.  Switch to\n    the [[Assemble]] tab\n    and remove\n    the [[invoke]] policy\n    by hovering over it and selecting the [[trashcan\n    icon]].\n\n2.  Click and drag\n    the [[Operation switch]] policy\n    to flow pipeline in the right.\n\n3.  The switch editor will open with a single case with case 0 created\n    by default.\n\n4.  Next to case 0, click **[search\n    operations\\...]** to show the drop-down\n    list of available operations.\n\n5.  Select\n    the **[shipping.calc]** operation.\n\n6.  Click the **[+ Case]** button to add a\n    second case for\n    the [[get.stores]] operation.\n\n7.  Click **[X]** to close the operation\n    switch configuration editor and then\n    click [[Save]].\n    You should see two new processing pipelines created on your\n    \\`operation-switch\\` step - one for each case:\n\n    ![](images/tutorial_html_2805ad613d2ba436.png)\n\n \n\n### Configure the `shipping.calc` Case\n\nThis operation will end up invoking two separate back-end services to\nacquire shipping rates for the respective companies, then utilize a map\naction to combine the two separate responses back into a single,\nconsolidated message for our consumers.\n\n1.  Add an [[invoke\n    policy]] to\n    the [[shipping.calc case]].\n\n2.  Edit the **[invoke]** action with the\n    following properties:\n\n    -   [[Title:\n        invoke_xyz]]\n\n    -   [[URL: $(shipping_svc_url)?company=xyz&from_zip=90210&to_zip=\\{zip\\}]]\n\n    -   [[Stop on error: unchecked]]\n\n    -   [[Response object variable (scroll to the bottom):\n        xyz_response]]  ![](images/tutorial_html_8c4d5816115227c1.png)  \n         ![](images/tutorial_html_3a71962c80162408.png)\n\n    -   **[Note: The  parameter provided here is a reference to the\n        zip parameter defined as input to the operation. The\n        portion of the URL will get replaced by the actual zip code\n        provided by the API consumers. ]**\n\n3.  Hover over\n    the [[invoke\\_xyz policy]] and\n    click [[clone]] to\n    add another invoke action:  \n\n    ![](images/tutorial_html_c099b7fb4e29d1ef.png)  \n\n4.  Edit the new invoke policy with the following properties:\n\n    -   [[Title:\n        invoke\\_cek]]\n\n    -   [[URL:\n        \\$(shipping\\_svc\\_url)?company=cek&from\\_zip=90210&to\\_zip= ]]\n\n    -   [[Response object variable:\n        cek\\_response]]  \n\n        ![](images/tutorial_html_84608c0a3a93f935.png)\n\n        ![](images/tutorial_html_e4fed02337332021.png)\n\n5.  Add\n    a [[map policy]] after\n    the last invoke and then click it to open the\n    editor.  ![](images/tutorial_html_df80d082c629e3eb.png)  \n\n6.  Click\n    the [[pencil]] at\n    the top of the Input column, then click on the [[+\n    input]] button.\n    Enter the following input configuration:\n\n    -   [[Context variable:\n        xyz\\_response.body]]\n\n    -   [[Name:\n        xyz]]\n\n    -   [[Content type:\n        application/json]]\n\n    -   [[Definition:\n        #/definitions/xyz_shipping_rsp]]\n\n7.  Click the [[+\n    input]] button\n    again to add another input. Specify the following input\n    configuration:\n\n    -   [[Context variable:\n        cek_response.body]]\n\n    -   [[Name:cek]]\n\n    -   [[Content type:\n        application/json]]\n\n    -   [[Definition:\n        #/definitions/cek_shipping_rsp]]\n\n8.  You now have two inputs assigned to the\n    map policy:  ![](images/tutorial_html_1cecd20554b4f15b.png)\n\n9.  Click [[Done]] to\n    return to the editor.\n\n10. Click the [[pencil\n    icon]] at\n    the top of\n    the [[Output]] column\n    and then click [[+ outputs for\n    operation\\...]] and\n    choose\n    the [[shipping.calc]] operation.\n\n11. Set **[Content\n    type]** to [[application/json]].\n\n12. Click [[Done]] to\n    return to the editor.\n\n13. Complete the mapping. To map from an input field to an output field,\n    click the circle next to the source element once, then click the\n    circle next to the target element. A line will be drawn between the\n    two, indicating a mapping from the source to the\n    target. ![](images/tutorial_html_c7529b39125204de.png)\n\n14. Click **X** to close the map editor. Your assembly policy for the\n    shipping.calc operation is now complete.\n\n    ![](images/tutorial_html_60e39f1d04c62b0b.png)\n\n15. Save your changes.\n\n    ![](images/tutorial_html_8eaea845d79feb97.png)\n\n## Use GatewayScript in an Assembly\n\nIn this section, you will configure the assembly for the store locator\nresource. You will use GatewayScript to modify the response to your\nconsumers, providing them a maps link to the nearest store location.\n\n### Configure the `get.stores` Case\n\nThis operation will call out to the Google Geocode API to obtain\nlocation information about the provided zip code, and will then utilize\na simple gatewayscript to modify the response and provide a formatted\nGoogle Maps link.\n\n1.  Add an invoke policy to\n    the [[get.stores case]].  ![](images/tutorial_html_8fcccda10f7fbc1e.png)\n\n2.  Edit the\n    new [[invoke action]] with\n    the following properties:\n\n    -   [[Title:\n        invoke\\_google\\_geolocate  ]]\n\n    -   [[URL:\n        https://maps.googleapis.com/maps/api/geocode/json?&address=]]\n\n    -   [[Stop on error:\n        unchecked ]]\n\n    -   [[Response object variable (scroll to the bottom):\n        google\\_geocode\\_response]]  ![](images/tutorial_html_c230669eaa51ffee.png)  \n          ![](images/tutorial_html_bcc946b43e8188.png)\n\n3.  Click [[X]] to\n    close the invoke editor.\n\n4.  Add\n    a [[gatewayscript policy]] with\n    the following properties:\n\n    -   **[Title:\n        gws\\_format\\_maps\\_link]**\n\n    -   Copy the following GatewayScript snippet and paste it into the\n        text area:\n\n```\n// Save the Google Geocode response body to variable\nvar mapsApiRsp = apim.getvariable('google_geocode_response.body');\n\n// Get location attributes from geocode response body\nvar location = mapsApiRsp.results[0].geometry.location;\n\n// Set up the response data object, concat the latitude and longitude\nvar rspObj = {\"google_maps_link\": \"https://www.google.com/maps?q=\" + location.lat + \",\" + location.lng};\n\n// Save the output     \napim.setvariable('message.body', rspObj)\n\n```\n\n  ![](images/tutorial_html_d005e2f600ea91f1.png)\n\n-   **[Note: Take a quick look at line 5. Notice how our gateway script\n    file is reading the body portion of the google\\_geocode\\_response\n    variable which was assigned to the output of the invoke\n    action.]**\n\n    Click [[X]] to\n    close the gatewayscript editor.\n\n    Your assembly for the \\`logistics\\` API will now include two separate\n    operation policies:  \n\n    ![](images/tutorial_html_3e32e5d9e2c3d543.png)\n\n7.  **Save** your\n    changes.  ![](images/tutorial_html_8eaea845d79feb97.png)\n\n8.  Click [[Develop]] in\n    the navigation menu to return to the list of APIs and Products in\n    your system.\n\n    ![](images/tutorial_html_a810481f55373ff0.png)\n\n## Summary\n\nCongratulations! You have successfully configured two new API's with\nadvanced assemblies. Throughout the tutorial, you explored the key\ntakeaways:\n\n-   Create a new API, including object definitions and paths.\n\n-   Configure an API to access an existing SOAP service.\n\n-   Import an existing API from an OpenAPI definition document (a.k.a\n    Swagger).\n\n-   Map data retrieved from multiple API calls into an aggregate\n    response.\n\n-   Use GatewayScript directly within an API assembly.\n\nContinue with the APIC Dev Jam! Go\nto [APIC Dev Jam - Lab 6 - Working with API Products](../Lab6))] to\nlearn about bundling the API's into a Product and publishing it to the consumer portal.\n","type":"Mdx","contentDigest":"79b0ad27a115d145ff99c0d8712e3b36","counter":1650,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"APIC Dev Jam Lab 5 - Advanced API Assembly"},"exports":{},"rawBody":"---\ntitle: APIC Dev Jam Lab 5 - Advanced API Assembly\n---\n\nIn the previous labs, you have been working with an API that acts as a\npass-through to a microservice application.\n\nIn this lab, you will expand the product offerings for ThinkIBM. In\naddition to the Inventory API, ThinkIBM wishes to provide APIs that\noffer financing and shipping logistics to consumer applications. Your\ngoal is to utilize existing enterprise and public assets to create these\nAPI offerings.\n\nIn this tutorial, you will explore the following key capabilities:\n\n-   Create a new API, including object definitions and paths.\n\n-   Configure an API to access an existing SOAP service.\n\n-   Import an existing API from an OpenAPI definition document (a.k.a\n    Swagger).\n\n-   Map data retrieved from multiple API calls into an aggregate\n    response.\n\n-   Use GatewayScript directly within an API assembly.\n\n## APIC Dev Jam Series\n\nThe APIC Dev Jam Series is a hands-on workshop with lab exercises that\nwalk you through designing, publishing, and securing APIs. This workshop\nis for API developers, architects, and line of business people who want\nto create a successful API strategy. There are 8 labs and each is 30\nminutes long. Make sure you choose enough time in your reservation to\nget through all the labs! \n\n[NOTE: ]**[This demo environment contains a\nfull API Connect installation in Cloud Pak for Integration. The login\ninformation to the APIC cluster will be sent in a separate email when\nyou reserve the instance. Use Google Chrome, Firefox or Microsoft Edge\nto access the cluster using the credentials supplied. Make sure you\nlogin using API Manager User Registry not Common Services\nregistry.]**\n\nPrerequisites: Labs 1-4\n\n## Create and Define the Financing API (REST to SOAP)\n\nThinkIBM wants to give its customers the ability to calculate financing\npayments. There is already a legacy SOAP-based application which will do\nthe calculation, but it should be exposed to consumers as a modern\nRESTful API. In this section, you will create a new OpenAPI definition\nfor the financing API.\n\n1. From the left navigation menu,\n  click **[Develop.]**\n\n2. Click **[Add]** and\n  choose **[API]**.\n\n    ![](images/tutorial_html_35bc8347ebf9f3c4.png)\n\n3. Select **[New OpenAPI]** and click [[Next.]]\n\n    ![](images/tutorial_html_8027761d9675e244.png)\n\n4. Fill in the form for **Create New OpenAPI** with the following values: \n\n    **[Title: financing]**\n\n    **Name: financing**\n\n    **Base Path: /financing**\n\n    **Version: 1.0.0**\n\n    Click **Next**.\n\n    ![](images/tutorial_html_6dab5b579d7af76.png)\n\n5. Leave all default values and click [[Next. ]]API\n    Connect will generate a new OpenAPI definition for the financing API and\n    provide a summary with the performed activities.\n\n    ![](images/tutorial_html_fb454c7ee948008d.png)\n\n6.  Click  **[Edit API ]**to customize the API.**\n\n7. Create the model definition for the new API. These definitions are\n    used in a few places. Their primary role is to serve as documentation in\n    the developer portal on expected input and output parameters. However,\n    they can also be used for data mapping actions.\n    Click **[Definitions]** from the API\n    Designer menu on the left. Then,\n    click **[Add]** to create a new definition.\n\n    ![](images/tutorial_html_f584c2696c3ce084.png)\n\n8. Enter **[paymentAmount]** for **[Name]** and\n    leave the definition **[Type]** set\n    to **[object]**.\n\n9. Click **[Add]** in\n    the **[Properties]** section.\n\n    ![](images/tutorial_html_332203efe7e366f5.png)\n\n10. Edit the **property values** using the following values:\n\n    **Property Name: paymentAmount**\n\n    **Type: float**\n\n    **Example: 199.99**\n\n    **Description: Monthly payment amount**\n\n    The page will look like this:\n\n   ![](images/tutorial_html_c600b4bb8ec6adee.png)\n\n    The property will be utilized in the Path you create next.\n    Click **[Save]** to go back to the main API\n    Editor.\n\n11. Click [[Paths]] in\n    the navigation menu on the left. Then\n    click **[Add]** to create a new path.\n\n    ![](images/tutorial_html_f3f04d5e1fde784d.png)\n\n12. The Path screen is loaded. Edit the [[Path name]] to be **[/calculate]**. **[Note:]** [Recall that our Base\n    Path for this API is \\`financing\\`. This new path will be appended to\n    the base, creating a final path of       \n    /financing/calculate.]**\n\n13. Click [[Add]] in\n    the Operations section to define the operation to support under the\n    path.\n\n    ![](images/tutorial_html_32f5ad5e80b58cd5.png)\n\n14. From the **[Add Operation]** menu,\n    select the **[Get]** operation and then\n    click **[Add]**. \n\n    ![](images/tutorial_html_aae3e2ff9be52791.png)\n\n15. Click **[Save]**. You will be\n    redirected to the main API Editor to continue.\n\n    ![](images/tutorial_html_66cc80ef2c7d855b.png)\n\n16. Click the **[/calculate]** path we just created.\n\n    ![](images/tutorial_html_864cc1225031590a.png)\n\n17. Click the **[GET]** operation to add\n    the request parameters. This defines the input to the API request. Since\n    this is a GET request, you will add the required request parameters to\n    the query component of the URI.\n\n    ![](images/tutorial_html_2cf0c1234fbd4aa3.png)\n\n18. Scroll down to the Parameters section within the operation config.\n    Click [[Add]] in the [[Parameters]] section.\n    You are actually going to need three total parameters for this\n    operation, so go ahead and click the \\`**Add**\\` button **two more\n    times** to add the parameter templates.\n\n    ![](images/tutorial_html_1e46988677afe0a.png)\n\n19. Edit the **parameters** to set the values:\n\n```\n  **Required**   **Name**   **Located In**   **Type**   **Description**\n  -------------- ---------- ---------------- ---------- --------------------------\n  yes            amount     Query            float      amount to finance\n  yes            duration   Query            int 32     length of term in months\n  yes            rate       Query            float      interest rate\n\n```\n  Once you have entered the values, the screen will look like this:\n\n  ![](images/tutorial_html_2fc0008e5f75928e.png)\n\n20. Set the schema for the response. Click **Add** in\n    the **[Response]** section.\n    Enter [[200]] for [[STATUS CODE]].\n    Since we already defined\n    the **[paymentAmount]** definition, select\n    it from the drop down list\n    for [[SCHEMA]].\n    You will find\n    the **[paymentAmount]** definition at the\n    bottom of the list.\n    For [[DESCRIPTION]] enter [[amount\n    calculated\n    successfully]]\n    ![](images/tutorial_html_f51180a01dc389af.png)\n\n21. Click [[Save]] to\n    save the API definition.\n\n    ![](images/tutorial_html_a0106fbcef024d0.png)\n\n## Map the API to a Service WSDL\n\nImport the legacy Financing SOAP service WSDL and map it to the RESTful\nAPI definition.\n\n### Attach a Service WSDL\n\n1.  Click the **[Target Services]** option\n    in the left column menu palette from the **[financing\n    1.0.0]** API Design screen\n\n2.  Click **[Add]** to import the web\n    service from the legacy financing service.\n\n    ![](images/tutorial_html_ebb6419fc4fb979a.png)\n\n3.  Download the [calculate.wsdl](https://integrationsuperhero.github.io/techcon2020/APICDevJam/resources/calculate.wsdl) and then Click **[Browse]** to\n    select [[calculate.wsdl]] located\n    in where you downloaded it on your machine.\n\n    ![](images/tutorial_html_e10ec45733dfce99.png)\n\n    You will get a success message and the service included in the WSDL\n    will be displayed.\n\n    ![](images/tutorial_html_6a8444e050b87ad3.png)\n\n5. Select **[financingService.]** Then click **[Submit]**.\n\n   ### Build the Financing API Assembly\n\n1. Click [[Assemble]] to\n    access the assembly editor.\n\n    ![](images/tutorial_html_7ecdd003a7db2e23.png)\n\n2. In the processing pipeline, mouse over\n    the [[invoke]] policy\n    and click\n    the [[trashcan]] icon\n    to delete it.\n\n    ![](images/tutorial_html_d05e099dd7e132b4.png)\n\n3. Scroll down to the bottom of the policy menu and drag and drop\n    the **[financing web service\n    operations]** to processing pipeline.\n\n    ![](images/tutorial_html_771de22ad92a31fb.png)\n\n4. Now you are going to modify the input and output map policy for\n    mapping your REST API into SOAP.\n\n    ![](images/tutorial_html_4a933c8c317bbd97.png)\n\n5. Since we are using the new API Gateway, we will need to instruct it\n    to use the newer version of the policies in the flow (map, invoke, map).\n    Click Source to go to the OpenAPI definition of your API.\n\n    ![](images/tutorial_html_35460e46cf085196.png)\n\n6. Scroll down to map and insert [[version: 2.0.0]] right\n    below it. \n\n    ![](images/tutorial_html_66473f670a224c38.png)\n\n7. Scroll down to invoke and insert [[version 2.0.0]] right\n    below it. Skip if the version 2.0.0 is already populated.\n\n    ![](images/tutorial_html_d480dfb5896607c6.png)\n\n8. Now go to the last map and insert **[version: 2.0.0]** right below it.\n    Click [[Assemble]] to\n    go back to the gateway flow designer. Skip if the version 2.0.0 is already populated.\n\n    ![](images/tutorial_html_80b968197ef6f435.png)\n\n9. In order to consume a SOAP-based service from your REST-based API,\n    you need to map the query parameter inputs that were previously defined\n    as part of the GET /calculate operation to a SOAP payload. To do so,\n    click the [[financing\n    input]] map\n    policy on our pipeline to open the map editor.\n\n    [[Tip: Click on the \\`+\\` icon to make the editor window fill the\n    screen.]]\n\n10. Click on\n    the [[pencil icon]] in\n    the [[Input column]].\n\n    ![](images/tutorial_html_9d82765fc8e50237.png)\n\n11. Click [[+ parameters for operation\\...]] and\n    select the **[GET Calculate operation]**.\n\n    ![](images/tutorial_html_9dad0a59d5e53a96.png)\n\n    The Map editor will automatically pull in the request parameters\n    that you defined earlier.\n\n12. Click **[Done]** to return to the map\n    editor.\n\n13. For each of the Input query parameters, map them to their\n    respective SOAP Output elements.\n\n    To map from an input field to an output field, click the circle next\n    to the source element once, then click the circle next to the target\n    element. A line will be drawn between the two, indicating a mapping from\n    the source to the target.\n\n![](images/tutorial_html_e18d417ab873efe0.png)\n    \n14. Click [[\\`X\\`]] in\n    the map editor to return to the policy pipeline.\n\n15. Click\n    the [[invoke policy]] to\n    open its editor.\n\n16. The SOAP service URL has already been set for you during the\n    service import when we create the API.\n\n    ![](images/tutorial_html_8d30f4d88ab4c2bf.png)\n\n17. Click [[\\`X\\`]] to\n    return to the policy pipeline.\n\n18. After the Financing Web Service is invoked, you need to map the\n    SOAP response into a JSON object.\n\n    You already defined the response object\n    called [[paymentAmount]].\n    To do the map, click the **[financing\n    output]** map policy on the pipeline to\n    open the map editor.\n\n19. Click the [[pencil icon]] to set the output object schema.\n\n20. Click the **[+ outputs for\n    operation\\...]** option and select\n    the [[GET /calculate operation]].\n\n21. Set the [[Content type]] configuration\n    option\n    to [[application/json]],\n    and then\n    click [[Done]] to\n    return to the map editor.\n\n    ![](images/tutorial_html_4e9aa0f663bd6c06.png)\n\n22. Click the [[circle next to the paymentAmount source\n    element]] once,\n    then click the [[circle next to the target\n    element]].\n    A line will be drawn between the two, indicating a mapping from the\n    source to the target.\n\n    ![](images/tutorial_html_f2e452da44248e01.png)\n\n23. Click [[\\`X\\`]] in\n    the map editor to return to the policy pipeline.\n\n24. Click [[Save]] the API definition.\n\n25. Click **[Develop]** in the navigation\n    menu to return to the list of APIs and Products in your system.\n\n    ![](images/tutorial_html_a810481f55373ff0.png)\n\n## Import Logistics API\n\nIn this lab section, we will be adding a new API called logistics which\nwill provide helper services around calculating shipping rates and\nlocating nearby stores. Rather than require you to build the entire API\nfrom scratch again, you will see how you can import and modify an\nexisting OpenAPI definition.\n\n### Import the OpenAPI Definition\n\n1.  Click **[Add]** and\n    select **[API.]**  \n\n    ![](images/tutorial_html_44524c2a518bf56e.png)\n\n2.  From the Create API wizard, select [[Import: Existing\n    OpenAPI]].\n    Then\n    click [[Next]].  ![](images/tutorial_html_5515164592670a5f.png)\n\n3.  You will need logistics.yaml file for this step. Fron another browser window download the file using this link\n    [logistics.yaml](https://integrationsuperhero.github.io/techcon2020/APICDevJam/resources/logistics.yaml)\n\n    Click \\`**Browse**\\` in the [[Import from\n    file]] window, and select the downloaded logistics.yaml file.\n\n    ![](images/tutorial_html_2ec43e484c5482b0.png)\n\n4.  Click [[Next]] in\n    the confirmation window.\n\n5.  Click [[Next]] one\n    more time [[without selecting the option Activate\n    API]] since\n    we still need to make some updates.\n\n6.  Click [[Edit\n    API]] in\n    the [[Summary]] page\n    to go to the API editor.\n\n### Configure payload to be stored in Analytics\n\n1.  From the API menu, select [[Activity\n    Log]].\n    In\n    the [[Content]] drop-down,\n    select [[payload]].\n    A pop up window will be displayed, asking to enable buffering.\n    Click [[Continue]].\n\n    ![](images/tutorial_html_e8ffcd636704e49b.png)\n\n2.  Set the [[Content on\n    error]] drop-down\n    to [[activity]].\n    Click [[Save]].\n\n    ![](images/tutorial_html_1b4e90745e45c224.png)\n\n## Create an Orchestration Assembly\n\nThe logistics API provides resources for calculating shipping costs and\nlocating the nearest store for pickup. In this section, you will\nconfigure the assembly for the shipping calculation resource. Your API\nassembly will call out to two separate shipping vendors and provide a\nconsolidated response back to the consumer.\n\n### Create the Logistics API Assembly\n\n1.  Switch to\n    the [[Assemble]] tab\n    and remove\n    the [[invoke]] policy\n    by hovering over it and selecting the [[trashcan\n    icon]].\n\n2.  Click and drag\n    the [[Operation switch]] policy\n    to flow pipeline in the right.\n\n3.  The switch editor will open with a single case with case 0 created\n    by default.\n\n4.  Next to case 0, click **[search\n    operations\\...]** to show the drop-down\n    list of available operations.\n\n5.  Select\n    the **[shipping.calc]** operation.\n\n6.  Click the **[+ Case]** button to add a\n    second case for\n    the [[get.stores]] operation.\n\n7.  Click **[X]** to close the operation\n    switch configuration editor and then\n    click [[Save]].\n    You should see two new processing pipelines created on your\n    \\`operation-switch\\` step - one for each case:\n\n    ![](images/tutorial_html_2805ad613d2ba436.png)\n\n \n\n### Configure the `shipping.calc` Case\n\nThis operation will end up invoking two separate back-end services to\nacquire shipping rates for the respective companies, then utilize a map\naction to combine the two separate responses back into a single,\nconsolidated message for our consumers.\n\n1.  Add an [[invoke\n    policy]] to\n    the [[shipping.calc case]].\n\n2.  Edit the **[invoke]** action with the\n    following properties:\n\n    -   [[Title:\n        invoke_xyz]]\n\n    -   [[URL: $(shipping_svc_url)?company=xyz&from_zip=90210&to_zip=\\{zip\\}]]\n\n    -   [[Stop on error: unchecked]]\n\n    -   [[Response object variable (scroll to the bottom):\n        xyz_response]]  ![](images/tutorial_html_8c4d5816115227c1.png)  \n         ![](images/tutorial_html_3a71962c80162408.png)\n\n    -   **[Note: The  parameter provided here is a reference to the\n        zip parameter defined as input to the operation. The\n        portion of the URL will get replaced by the actual zip code\n        provided by the API consumers. ]**\n\n3.  Hover over\n    the [[invoke\\_xyz policy]] and\n    click [[clone]] to\n    add another invoke action:  \n\n    ![](images/tutorial_html_c099b7fb4e29d1ef.png)  \n\n4.  Edit the new invoke policy with the following properties:\n\n    -   [[Title:\n        invoke\\_cek]]\n\n    -   [[URL:\n        \\$(shipping\\_svc\\_url)?company=cek&from\\_zip=90210&to\\_zip= ]]\n\n    -   [[Response object variable:\n        cek\\_response]]  \n\n        ![](images/tutorial_html_84608c0a3a93f935.png)\n\n        ![](images/tutorial_html_e4fed02337332021.png)\n\n5.  Add\n    a [[map policy]] after\n    the last invoke and then click it to open the\n    editor.  ![](images/tutorial_html_df80d082c629e3eb.png)  \n\n6.  Click\n    the [[pencil]] at\n    the top of the Input column, then click on the [[+\n    input]] button.\n    Enter the following input configuration:\n\n    -   [[Context variable:\n        xyz\\_response.body]]\n\n    -   [[Name:\n        xyz]]\n\n    -   [[Content type:\n        application/json]]\n\n    -   [[Definition:\n        #/definitions/xyz_shipping_rsp]]\n\n7.  Click the [[+\n    input]] button\n    again to add another input. Specify the following input\n    configuration:\n\n    -   [[Context variable:\n        cek_response.body]]\n\n    -   [[Name:cek]]\n\n    -   [[Content type:\n        application/json]]\n\n    -   [[Definition:\n        #/definitions/cek_shipping_rsp]]\n\n8.  You now have two inputs assigned to the\n    map policy:  ![](images/tutorial_html_1cecd20554b4f15b.png)\n\n9.  Click [[Done]] to\n    return to the editor.\n\n10. Click the [[pencil\n    icon]] at\n    the top of\n    the [[Output]] column\n    and then click [[+ outputs for\n    operation\\...]] and\n    choose\n    the [[shipping.calc]] operation.\n\n11. Set **[Content\n    type]** to [[application/json]].\n\n12. Click [[Done]] to\n    return to the editor.\n\n13. Complete the mapping. To map from an input field to an output field,\n    click the circle next to the source element once, then click the\n    circle next to the target element. A line will be drawn between the\n    two, indicating a mapping from the source to the\n    target. ![](images/tutorial_html_c7529b39125204de.png)\n\n14. Click **X** to close the map editor. Your assembly policy for the\n    shipping.calc operation is now complete.\n\n    ![](images/tutorial_html_60e39f1d04c62b0b.png)\n\n15. Save your changes.\n\n    ![](images/tutorial_html_8eaea845d79feb97.png)\n\n## Use GatewayScript in an Assembly\n\nIn this section, you will configure the assembly for the store locator\nresource. You will use GatewayScript to modify the response to your\nconsumers, providing them a maps link to the nearest store location.\n\n### Configure the `get.stores` Case\n\nThis operation will call out to the Google Geocode API to obtain\nlocation information about the provided zip code, and will then utilize\na simple gatewayscript to modify the response and provide a formatted\nGoogle Maps link.\n\n1.  Add an invoke policy to\n    the [[get.stores case]].  ![](images/tutorial_html_8fcccda10f7fbc1e.png)\n\n2.  Edit the\n    new [[invoke action]] with\n    the following properties:\n\n    -   [[Title:\n        invoke\\_google\\_geolocate  ]]\n\n    -   [[URL:\n        https://maps.googleapis.com/maps/api/geocode/json?&address=]]\n\n    -   [[Stop on error:\n        unchecked ]]\n\n    -   [[Response object variable (scroll to the bottom):\n        google\\_geocode\\_response]]  ![](images/tutorial_html_c230669eaa51ffee.png)  \n          ![](images/tutorial_html_bcc946b43e8188.png)\n\n3.  Click [[X]] to\n    close the invoke editor.\n\n4.  Add\n    a [[gatewayscript policy]] with\n    the following properties:\n\n    -   **[Title:\n        gws\\_format\\_maps\\_link]**\n\n    -   Copy the following GatewayScript snippet and paste it into the\n        text area:\n\n```\n// Save the Google Geocode response body to variable\nvar mapsApiRsp = apim.getvariable('google_geocode_response.body');\n\n// Get location attributes from geocode response body\nvar location = mapsApiRsp.results[0].geometry.location;\n\n// Set up the response data object, concat the latitude and longitude\nvar rspObj = {\"google_maps_link\": \"https://www.google.com/maps?q=\" + location.lat + \",\" + location.lng};\n\n// Save the output     \napim.setvariable('message.body', rspObj)\n\n```\n\n  ![](images/tutorial_html_d005e2f600ea91f1.png)\n\n-   **[Note: Take a quick look at line 5. Notice how our gateway script\n    file is reading the body portion of the google\\_geocode\\_response\n    variable which was assigned to the output of the invoke\n    action.]**\n\n    Click [[X]] to\n    close the gatewayscript editor.\n\n    Your assembly for the \\`logistics\\` API will now include two separate\n    operation policies:  \n\n    ![](images/tutorial_html_3e32e5d9e2c3d543.png)\n\n7.  **Save** your\n    changes.  ![](images/tutorial_html_8eaea845d79feb97.png)\n\n8.  Click [[Develop]] in\n    the navigation menu to return to the list of APIs and Products in\n    your system.\n\n    ![](images/tutorial_html_a810481f55373ff0.png)\n\n## Summary\n\nCongratulations! You have successfully configured two new API's with\nadvanced assemblies. Throughout the tutorial, you explored the key\ntakeaways:\n\n-   Create a new API, including object definitions and paths.\n\n-   Configure an API to access an existing SOAP service.\n\n-   Import an existing API from an OpenAPI definition document (a.k.a\n    Swagger).\n\n-   Map data retrieved from multiple API calls into an aggregate\n    response.\n\n-   Use GatewayScript directly within an API assembly.\n\nContinue with the APIC Dev Jam! Go\nto [APIC Dev Jam - Lab 6 - Working with API Products](../Lab6))] to\nlearn about bundling the API's into a Product and publishing it to the consumer portal.\n","fileAbsolutePath":"/Users/rafaelosorio/Documents/GitHub/cp4i-demohub/src/pages/APICDevJam/Lab5/index.md"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}