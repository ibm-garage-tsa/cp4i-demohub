{"componentChunkName":"component---src-pages-apic-dev-jam-lab-1-index-md","path":"/APICDevJam/Lab1/","result":{"pageContext":{"frontmatter":{"title":"APIC Dev Jam Lab 1 - Create and Secure an API"},"relativePagePath":"/APICDevJam/Lab1/index.md","titleType":"page","MdxNode":{"id":"873be910-b5ad-5175-abc9-f7ccf2cf0824","children":[],"parent":"8733ecf2-d29a-5426-abd7-5235d4dfadd1","internal":{"content":"---\ntitle: APIC Dev Jam Lab 1 - Create and Secure an API\n---\n\n\nIn this lab, you will get a chance to use the online APIC Developer\nToolkit and its intuitive interface to create a new API using the\nOpenAPI definition (YAML) of the existing product inventory RESTful\nweb-service.\n\nIn this tutorial, you will explore the following key capabilities:\n\n-   Creating an API by importing an OpenAPI definition for an existing\n    REST service.\n\n-   Configuring ClientID/Secret Security, endpoints, and proxy to invoke\n    endpoint.\n\n-   Testing a REST API in the online developer toolkit.\n\n-   Publish an API for developers.\n\n## APIC Dev Jam Series\n\nThe APIC Dev Jam Series is a hands-on workshop with lab exercises that\nwalk you through designing, publishing, and securing APIs. This workshop\nis for API developers, architects, and line of business people who want\nto create a successful API strategy. There are 8 labs and each is 30\nminutes long. Make sure you choose enough time in your reservation to\nget through all the labs! \n\n[NOTE: ]**[This demo environment contains a\nfull API Connect installation in Cloud Pak for Integration. The login\ninformation to the APIC cluster will be sent in a separate email when\nyou reserve the instance. Use Google Chrome, Firefox or Microsoft Edge\nto access the cluster using the credentials supplied. Make sure you\nlogin using API Manager User Registry not Common Services\nregistry.]**\n\n## Import API to the Developer Workspace\n\nFirst, we will download the OpenApi file for the existing REST service\nfor Inventory. Then, we will import it to the online workspace.\n\n1.  Open a browser window to the API Manager Portal. If the screen\n    displays [[\\\"Your connection is not\n    private\\\"]] click\n    Advanced, and then Accept the to continue. Log in with the username\n    ad credentials supplied.\n\n    ![](images/tutorial_html_c7010880ec6f2b94.png)\n\n    ![](images/tutorial_html_228c6cdfd6f4d489.png)\n\n    When you login for the first time you will see What's new in API Connect\n    10. Click **Done** after reviewing.\n\n    ![](images/tutorial_html_db2469619b74ee90.png)\n\n2.  Click on the [[Develop APIs and\n    Products]] tile\n    to enter the online development workspace.\n\n    ![](images/tutorial_html_61b4022571d0a4a3.png)  \n\n3.  Now you are in the home screen of the online developer tool. From\n    here, you can begin to create APIs and Products.\n\n    ![](images/tutorial_html_333c6b76e2638b45.png)  \n\n4.  Click [[ADD-\\>API.]]\n\n    ![](images/tutorial_html_993047b3f798317c.png)  \n\n5.  On the next screen, select [[Existing OpenAPI]] under\n    Import**,** as in the image below. Then\n    click **[Next.]**\n\n    ![](images/tutorial_html_b219e12b9ba30a1c.png)  \n\n6.  Now download the[[Inventory.yaml]] \n    file the dte-labs git repository using the following command.\n\n    ```\n    curl -OL https://raw.githubusercontent.com/ibm-cloudintegration/dte-labs/master/APICv10/inventory.yaml\n\n    ```\n\n    You can also down the file using this link : [inventory.yaml](https://integrationsuperhero.github.io/techcon2020/APICDevJam/resources/inventory.yaml)\n\n    Choose the downloaded\n    [[Inventory.yaml]] OpenAPI\n    definition and Click **[Next.]**\n\n    ![](images/tutorial_html_64514a49c35e90d4.png)  \n\n7.  **[Do not ]**select **[Activate\n    API]**.\n    Click [[Next]].\n\n    ![](images/tutorial_html_3e51d8ec0929f2b5.png)  \n\n8.  The API should be imported successfully as shown in the image below.\n    Click [[Edit\n    API]].\n\n    ![](images/tutorial_html_83ece115b799d430.png)\n\n## Configure API\n\nAfter importing the existing API, the first step is to configure basic\nsecurity before exposing it to other developers. By creating a client\nkey and secret security, you are able to identify the app using the\nservices. Next, we will define the backend endpoints where the API is\nactually running. API Connect supports pointing to multiple backend\nendpoints to match your multiple build stage environments. Finally, we\nwill configure the proxy call to invoke the endpoint.\n\n### Configure API Key security\n\n1.  Click [[Security\n    Definitions]].\n\n2.  In the [[Security\n    Definition]] section,\n    click\n    the [[Add]] button\n    on the right. This will open a new view titled [**[API Security\n    Definition]**[.]]\n\n3.  In the **[Name]** field,\n    type [[client-id]].\n\n4.  Under **[Type]**, choose [[API\n    Key]].\n    This will reveal additional settings.\n\n5.  For **[Located\n    In]** choose [[Header]].\n    For **[Key Type]** choose [[Client\n    ID]].\n    In [[Parameter\n    Name]] type [[X-IBM-Client-Id]].\n    Your screen should look like the image below. \n\n    ![](images/tutorial_html_9acabae1c0f045ea.png)\n\n6.  Click\n    the [[Save]] button\n    to return to the **[Security\n    Definitions]** section.\n\n7.  Click [[Add]] again\n    to add the client secret definition.\n\n8.  Under **[Name,]** type [[secret]].\n\n9.  For **[Located\n    In]** choose [[Header]].\n    For **[Key Type]** choose [[Client\n    Secret]].\n    In [[Parameter\n    Name]] type [[X-IBM-Client-Secret]].\n    Your screen should look like the image below. \n\n    ![](images/tutorial_html_c8364653a0d1e2f5.png)\n\n10. Click\n    the [[Save]] button\n    to return to the **[Security\n    Definitions]** section.\n\n11. Click [[Security]] in\n    the left menu.\n\n12. Click [[Add. ]]This will\n    populate the **[Security\n    Definitions]** table with secret and\n    client-id. Select both as shown in the image below. Then\n    click [[Save]]. \n\n    ![](images/tutorial_html_41e66c41b43e89ac.png)\n\n13. Add security and enable secret and client-id. Click **Save** to save\n    the changes.\n\n    ![](images/tutorial_html_5bd00a842ec2bfff.png)\n\n### Define Target-URL for Sandbox environment\n\n1.  Click\n    on [[Properties]] in\n    the left menu.\n\n2.  Click on the target-url property. The target-url property is\n    automatically inserted to be able to define multiple run-time\n    targets for the service.\n\n3.  In the **[Default value]** text field,\n    type [https://apic-pot-inventory-api.mybluemix.net](https://apic-pot-inventory-api.mybluemix.net/)**[.]**\n\n4.  Click **[Add.]**\n\n5.  Choose the **[Sandbox catalog]** and\n    for the URL\n    type [https://apic-pot-inventory-api.mybluemix.net](https://apic-pot-inventory-api.mybluemix.net/)\n\n![](images/tutorial_html_f977429f6db6091a.png)\n\n6.  Click **[Save]** to complete the\n    configuration.\n\n### Configure Proxy Call in Designer\n\n\n1.  On the top Navigation,\n    click [[Assemble]].\n\n2.  Click [[Invoke]] in\n    the flow\n    designer.  ![](images/tutorial_html_eda46641cdf764e6.png)\n\n3.  This will open a window from the right to configure. In the URL\n    field, type [[**\\$(target-url)\\$(request.path)\\$(request.search)**]]. \n\n4.  Click [[Save]].\n\n## Test the API\n\nIn the API designer, you have the ability to test the API immediately\nafter creation in the Assemble view!\n\n1.  Click\n    the **[play]** **[icon]** as\n    indicated in the image below. \n\n    ![](images/tutorial_html_70e7e587c6be69d7.png)\n\n2.  Toggle\n    [[Offline]]\n    to activate API. to publish the API itself to the gateway for\n    testing.  \n\n    ![](images/tutorial_html_227e8350d01d16f9.png)\n\n3.  After the API is published, additional tabs appear your screen\n    should look like the image below.\n    ![](images/tutorial_html_a35d4b82b4aa8b10.png)\n\n4.  Choose **[Test]** tab and append **[/Items]** to the URL as shown below.\n\n    ![](images/tutorial_html_5e2c8cff09f77c58.png)\n\n5.  Your client Id  and client secret for the sandbox-test-app is\n    prefilled.\n\n6.  Scroll all the way to the bottom of the test view.\n\n    ![](images/tutorial_html_6400dc1e94d34fd8.png)\n\n7.  Click [[Send]].\n\n8.  If this is the first test of the API, you will see a certificate\n    exception. Simply click on the URL and choose the option to proceed.\n\n9.  Go back to the test view and\n    click [[Send]] again.\n\n10. Now you will see a Response section with Status code 200 OK and the\n    Body displaying all the inventory items.\n\n    ![](images/tutorial_html_d063fb9dba035b70.png)\n\n## Publish API\n\nIn this lab, we will make the API available to developers. In order to\ndo so, the API must be first put into a product and then published to\nthe sandbox catalog. A product dictates rate limits and API throttling.\nWhen the product is published, the Invoke policy defined in the previous\nlab is written to the gateway. \n\n### Create Inventory Product and Add API\n\n1.  From the vertical navigation menu on the left,\n    click **[Develop]** to return to the\n    Develop home screen.\n\n    ![](images/tutorial_html_fa935b3ea4222145.png)\n\n2.  Click **[Add]** and\n    select [Product]**.**\n\n3.  On the next screen, select **[New\n    Product]**. Then\n    click **[Next]**.\n\n4.  For the Title, enter [**[Inventory\n    APIs]**[.]] Click **[Next]**.\n\n5.  Select the **[inventory 1.0.0 API]** as\n    shown in the image below. Then\n    click **[Next]**.  \n\n    ![](images/tutorial_html_536925e23d552bb5.png)\n\n6.  Keep the **[Default Plan]** as is.\n    Click **[Next]**.  \n\n    ![](images/tutorial_html_333097bd27fa8fa7.png)\n\n7.  Under **[Publish]**, enable **[Publish\n    Product]** as shown in the image below.\n    Then\n    click [**[Next]**[.  ]]\n\n    ![](images/tutorial_html_850499fce1003aa7.png)\n\n8.  The Product is now published successfully with the API base URL\n    listed and available for developers from the developer portal. Go\n    to [APIC (v10) Dev Jam - Lab 2 - The Developer Portal\n    Experience](https://integrationsuperhero.github.io/techcon2020/APICDevJam/Lab2) to\n    see how to access this API as a developer.\n\n## Summary\n\nYou completed the APIC Dev Jam Lab 1 - Create and Secure an\nAPI. Throughout the tutorial, you explored the key takeaways:\n\n-   Create an API by importing an OpenAPI definition for an existing\n    REST service.\n\n-   Configure ClientID/Secret Security, endpoints, and proxy to invoke\n    endpoint.\n\n-   Test a REST API in the online developer toolkit.\n\n-   Publish an API for developers.\n\nContinue the APIC Dev Jam! Go to [APIC Dev Jam Lab 2 - The Developer\nPortal\nExperience](../Lab2) to\nlearn how to socialize this API and make it available to developers.\n","type":"Mdx","contentDigest":"2618b7b0f35f43c26bedde76a03ea52d","counter":1651,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"APIC Dev Jam Lab 1 - Create and Secure an API"},"exports":{},"rawBody":"---\ntitle: APIC Dev Jam Lab 1 - Create and Secure an API\n---\n\n\nIn this lab, you will get a chance to use the online APIC Developer\nToolkit and its intuitive interface to create a new API using the\nOpenAPI definition (YAML) of the existing product inventory RESTful\nweb-service.\n\nIn this tutorial, you will explore the following key capabilities:\n\n-   Creating an API by importing an OpenAPI definition for an existing\n    REST service.\n\n-   Configuring ClientID/Secret Security, endpoints, and proxy to invoke\n    endpoint.\n\n-   Testing a REST API in the online developer toolkit.\n\n-   Publish an API for developers.\n\n## APIC Dev Jam Series\n\nThe APIC Dev Jam Series is a hands-on workshop with lab exercises that\nwalk you through designing, publishing, and securing APIs. This workshop\nis for API developers, architects, and line of business people who want\nto create a successful API strategy. There are 8 labs and each is 30\nminutes long. Make sure you choose enough time in your reservation to\nget through all the labs! \n\n[NOTE: ]**[This demo environment contains a\nfull API Connect installation in Cloud Pak for Integration. The login\ninformation to the APIC cluster will be sent in a separate email when\nyou reserve the instance. Use Google Chrome, Firefox or Microsoft Edge\nto access the cluster using the credentials supplied. Make sure you\nlogin using API Manager User Registry not Common Services\nregistry.]**\n\n## Import API to the Developer Workspace\n\nFirst, we will download the OpenApi file for the existing REST service\nfor Inventory. Then, we will import it to the online workspace.\n\n1.  Open a browser window to the API Manager Portal. If the screen\n    displays [[\\\"Your connection is not\n    private\\\"]] click\n    Advanced, and then Accept the to continue. Log in with the username\n    ad credentials supplied.\n\n    ![](images/tutorial_html_c7010880ec6f2b94.png)\n\n    ![](images/tutorial_html_228c6cdfd6f4d489.png)\n\n    When you login for the first time you will see What's new in API Connect\n    10. Click **Done** after reviewing.\n\n    ![](images/tutorial_html_db2469619b74ee90.png)\n\n2.  Click on the [[Develop APIs and\n    Products]] tile\n    to enter the online development workspace.\n\n    ![](images/tutorial_html_61b4022571d0a4a3.png)  \n\n3.  Now you are in the home screen of the online developer tool. From\n    here, you can begin to create APIs and Products.\n\n    ![](images/tutorial_html_333c6b76e2638b45.png)  \n\n4.  Click [[ADD-\\>API.]]\n\n    ![](images/tutorial_html_993047b3f798317c.png)  \n\n5.  On the next screen, select [[Existing OpenAPI]] under\n    Import**,** as in the image below. Then\n    click **[Next.]**\n\n    ![](images/tutorial_html_b219e12b9ba30a1c.png)  \n\n6.  Now download the[[Inventory.yaml]] \n    file the dte-labs git repository using the following command.\n\n    ```\n    curl -OL https://raw.githubusercontent.com/ibm-cloudintegration/dte-labs/master/APICv10/inventory.yaml\n\n    ```\n\n    You can also down the file using this link : [inventory.yaml](https://integrationsuperhero.github.io/techcon2020/APICDevJam/resources/inventory.yaml)\n\n    Choose the downloaded\n    [[Inventory.yaml]] OpenAPI\n    definition and Click **[Next.]**\n\n    ![](images/tutorial_html_64514a49c35e90d4.png)  \n\n7.  **[Do not ]**select **[Activate\n    API]**.\n    Click [[Next]].\n\n    ![](images/tutorial_html_3e51d8ec0929f2b5.png)  \n\n8.  The API should be imported successfully as shown in the image below.\n    Click [[Edit\n    API]].\n\n    ![](images/tutorial_html_83ece115b799d430.png)\n\n## Configure API\n\nAfter importing the existing API, the first step is to configure basic\nsecurity before exposing it to other developers. By creating a client\nkey and secret security, you are able to identify the app using the\nservices. Next, we will define the backend endpoints where the API is\nactually running. API Connect supports pointing to multiple backend\nendpoints to match your multiple build stage environments. Finally, we\nwill configure the proxy call to invoke the endpoint.\n\n### Configure API Key security\n\n1.  Click [[Security\n    Definitions]].\n\n2.  In the [[Security\n    Definition]] section,\n    click\n    the [[Add]] button\n    on the right. This will open a new view titled [**[API Security\n    Definition]**[.]]\n\n3.  In the **[Name]** field,\n    type [[client-id]].\n\n4.  Under **[Type]**, choose [[API\n    Key]].\n    This will reveal additional settings.\n\n5.  For **[Located\n    In]** choose [[Header]].\n    For **[Key Type]** choose [[Client\n    ID]].\n    In [[Parameter\n    Name]] type [[X-IBM-Client-Id]].\n    Your screen should look like the image below. \n\n    ![](images/tutorial_html_9acabae1c0f045ea.png)\n\n6.  Click\n    the [[Save]] button\n    to return to the **[Security\n    Definitions]** section.\n\n7.  Click [[Add]] again\n    to add the client secret definition.\n\n8.  Under **[Name,]** type [[secret]].\n\n9.  For **[Located\n    In]** choose [[Header]].\n    For **[Key Type]** choose [[Client\n    Secret]].\n    In [[Parameter\n    Name]] type [[X-IBM-Client-Secret]].\n    Your screen should look like the image below. \n\n    ![](images/tutorial_html_c8364653a0d1e2f5.png)\n\n10. Click\n    the [[Save]] button\n    to return to the **[Security\n    Definitions]** section.\n\n11. Click [[Security]] in\n    the left menu.\n\n12. Click [[Add. ]]This will\n    populate the **[Security\n    Definitions]** table with secret and\n    client-id. Select both as shown in the image below. Then\n    click [[Save]]. \n\n    ![](images/tutorial_html_41e66c41b43e89ac.png)\n\n13. Add security and enable secret and client-id. Click **Save** to save\n    the changes.\n\n    ![](images/tutorial_html_5bd00a842ec2bfff.png)\n\n### Define Target-URL for Sandbox environment\n\n1.  Click\n    on [[Properties]] in\n    the left menu.\n\n2.  Click on the target-url property. The target-url property is\n    automatically inserted to be able to define multiple run-time\n    targets for the service.\n\n3.  In the **[Default value]** text field,\n    type [https://apic-pot-inventory-api.mybluemix.net](https://apic-pot-inventory-api.mybluemix.net/)**[.]**\n\n4.  Click **[Add.]**\n\n5.  Choose the **[Sandbox catalog]** and\n    for the URL\n    type [https://apic-pot-inventory-api.mybluemix.net](https://apic-pot-inventory-api.mybluemix.net/)\n\n![](images/tutorial_html_f977429f6db6091a.png)\n\n6.  Click **[Save]** to complete the\n    configuration.\n\n### Configure Proxy Call in Designer\n\n\n1.  On the top Navigation,\n    click [[Assemble]].\n\n2.  Click [[Invoke]] in\n    the flow\n    designer.  ![](images/tutorial_html_eda46641cdf764e6.png)\n\n3.  This will open a window from the right to configure. In the URL\n    field, type [[**\\$(target-url)\\$(request.path)\\$(request.search)**]]. \n\n4.  Click [[Save]].\n\n## Test the API\n\nIn the API designer, you have the ability to test the API immediately\nafter creation in the Assemble view!\n\n1.  Click\n    the **[play]** **[icon]** as\n    indicated in the image below. \n\n    ![](images/tutorial_html_70e7e587c6be69d7.png)\n\n2.  Toggle\n    [[Offline]]\n    to activate API. to publish the API itself to the gateway for\n    testing.  \n\n    ![](images/tutorial_html_227e8350d01d16f9.png)\n\n3.  After the API is published, additional tabs appear your screen\n    should look like the image below.\n    ![](images/tutorial_html_a35d4b82b4aa8b10.png)\n\n4.  Choose **[Test]** tab and append **[/Items]** to the URL as shown below.\n\n    ![](images/tutorial_html_5e2c8cff09f77c58.png)\n\n5.  Your client Id  and client secret for the sandbox-test-app is\n    prefilled.\n\n6.  Scroll all the way to the bottom of the test view.\n\n    ![](images/tutorial_html_6400dc1e94d34fd8.png)\n\n7.  Click [[Send]].\n\n8.  If this is the first test of the API, you will see a certificate\n    exception. Simply click on the URL and choose the option to proceed.\n\n9.  Go back to the test view and\n    click [[Send]] again.\n\n10. Now you will see a Response section with Status code 200 OK and the\n    Body displaying all the inventory items.\n\n    ![](images/tutorial_html_d063fb9dba035b70.png)\n\n## Publish API\n\nIn this lab, we will make the API available to developers. In order to\ndo so, the API must be first put into a product and then published to\nthe sandbox catalog. A product dictates rate limits and API throttling.\nWhen the product is published, the Invoke policy defined in the previous\nlab is written to the gateway. \n\n### Create Inventory Product and Add API\n\n1.  From the vertical navigation menu on the left,\n    click **[Develop]** to return to the\n    Develop home screen.\n\n    ![](images/tutorial_html_fa935b3ea4222145.png)\n\n2.  Click **[Add]** and\n    select [Product]**.**\n\n3.  On the next screen, select **[New\n    Product]**. Then\n    click **[Next]**.\n\n4.  For the Title, enter [**[Inventory\n    APIs]**[.]] Click **[Next]**.\n\n5.  Select the **[inventory 1.0.0 API]** as\n    shown in the image below. Then\n    click **[Next]**.  \n\n    ![](images/tutorial_html_536925e23d552bb5.png)\n\n6.  Keep the **[Default Plan]** as is.\n    Click **[Next]**.  \n\n    ![](images/tutorial_html_333097bd27fa8fa7.png)\n\n7.  Under **[Publish]**, enable **[Publish\n    Product]** as shown in the image below.\n    Then\n    click [**[Next]**[.  ]]\n\n    ![](images/tutorial_html_850499fce1003aa7.png)\n\n8.  The Product is now published successfully with the API base URL\n    listed and available for developers from the developer portal. Go\n    to [APIC (v10) Dev Jam - Lab 2 - The Developer Portal\n    Experience](https://integrationsuperhero.github.io/techcon2020/APICDevJam/Lab2) to\n    see how to access this API as a developer.\n\n## Summary\n\nYou completed the APIC Dev Jam Lab 1 - Create and Secure an\nAPI. Throughout the tutorial, you explored the key takeaways:\n\n-   Create an API by importing an OpenAPI definition for an existing\n    REST service.\n\n-   Configure ClientID/Secret Security, endpoints, and proxy to invoke\n    endpoint.\n\n-   Test a REST API in the online developer toolkit.\n\n-   Publish an API for developers.\n\nContinue the APIC Dev Jam! Go to [APIC Dev Jam Lab 2 - The Developer\nPortal\nExperience](../Lab2) to\nlearn how to socialize this API and make it available to developers.\n","fileAbsolutePath":"/Users/rafaelosorio/Documents/GitHub/cp4i-demohub/src/pages/APICDevJam/Lab1/index.md"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}