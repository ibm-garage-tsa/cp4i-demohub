{"componentChunkName":"component---src-pages-apic-dev-jam-lab-8-index-md","path":"/APICDevJam/Lab8/","result":{"pageContext":{"frontmatter":{"title":"APIC Dev Jam - Lab 8 -- Creating GraphQL Proxy API"},"relativePagePath":"/APICDevJam/Lab8/index.md","titleType":"page","MdxNode":{"id":"716efb34-987d-52b5-9111-b60a455ae648","children":[],"parent":"9bec4f98-bde8-5315-9c0a-93bd755fd6e6","internal":{"content":"---\r\ntitle: APIC Dev Jam - Lab 8 -- Creating GraphQL Proxy API\r\n---\r\n\r\nIn this lab, you will explore the how to define GraphQL APIs that proxy\r\nto a backend GraphQL server. GraphQL is a query language for APIs that\r\ngives an application client greater control over what data it retrieves\r\nin an API request when compared with a REST API request.\r\n\r\nAPI Connect GraphQL support also allows rate limiting and other controls\r\nusing API Gateway.\r\n\r\nIn this tutorial, you will explore the following key capabilities:\r\n\r\n-   Create a GraphQL Proxy API\r\n\r\n-   Learn about GraphQL introspection and Schema Editor\r\n\r\n-   Test APIs by using the built-in GraphQL editor\r\n\r\n-   Review API Assembly Policies for the cost end point\r\n\r\n## APIC Dev Jam Series\r\n\r\nThe APIC Dev Jam Series is a hands-on workshop with lab exercises that\r\nwalk you through designing, publishing, and securing APIs. This workshop\r\nis for API developers, architects, and line of business people who want\r\nto create a successful API strategy. There are 8 labs and each is 30\r\nminutes long. Make sure you choose enough time in your reservation to\r\nget through all the labs! \r\n\r\n \r\n\r\n[NOTE: ]**[This demo environment contains a\r\nfull API Connect installation in Cloud Pak for Integration. The login\r\ninformation to the APIC cluster will be sent in a separate email when\r\nyou reserve the instance. Use Google Chrome, Firefox or Microsoft Edge\r\nto access the cluster using the credentials supplied. Make sure you\r\nlogin using API Manager User Registry not Common Services\r\nregistry.]**\r\n\r\nPrerequisites: None\r\n\r\n## Create a GraphQL Proxy API\r\n\r\n1.  Select Develop API and click Add-\\>API\r\n\r\n    ![](images/tutorial_html_c0c5acec16e566bb.png)\r\n\r\n2.  Enter the following values and click Next. You To create a GraphQL\r\n    proxy definition, select From Existing GraphQL service. When you\r\n    point to an existing GraphQL server, API Connect introspects the\r\n    service and automatically creates a GraphQL proxy service.\r\n\r\n    ![](images/tutorial_html_797b2f887d77017c.png)\r\n\r\n3.  Enter the following values and click Next. You can use default\r\n    values for the rest.\r\n\r\n    Title: accounts\r\n\r\n    GraphQL server URL: https://graphql-test-server.us-east.cf.appdomain.cloud/accounts/graphql\r\n\r\n    ![](images/tutorial_html_f83e60ae96763438.png)\r\n\r\n    ![](images/tutorial_html_90e0cbad29eca5a.png)\r\n\r\n4.  The schema validator reports warning and errors if found. There is\r\n    one warning in the accounts schema imported from the server. You can\r\n    review the schema warning details and also select the end points\r\n    interested for this proxy. Select all the available end points.\r\n\r\n    ![](images/tutorial_html_3cc23a786c4f73c2.png)\r\n\r\n5.  A review of the schema shows that no limit is set on the size of the\r\n    list. You will fix this warning in later steps. Click Next to\r\n    continue.\r\n\r\n    ![](images/tutorial_html_8104c10fce21e609.png)\r\n\r\n6.  Keep both Secure Client ID and CORS checked and click Next\r\n\r\n    ![](images/tutorial_html_464f81f24c7d47dd.png)\r\n\r\n7.  API Connect successfully created a GraphQL proxy API. You can edit\r\n    the API to view more details on the proxy API just created. Click\r\n    EDIT API to continue.\r\n\r\n    ![](images/tutorial_html_e70bb58508f9b662.png)\r\n\r\n8.  GraphQL APIs are structured the same as REST APIs with some\r\n    additional options. Just like REST APIs, you will be able to add\r\n    security definitions, properties and Activity logs from the left\r\n    menu bar. You can also view the Source and Assemble tabs similar to\r\n    REST APIs. You will notice a new tab for GraphQL APIs. Click on\r\n    GraphQL Schema tab to view the schema.\r\n\r\n    ![](images/tutorial_html_b27d147e1a49276b.png)\r\n\r\n9.  GraphQL Schema editor displays Type and Weight information. The\r\n    weighting factor is used when calculating the type cost for a\r\n    request to the GraphQL API. For example, a field that requires\r\n    extensive CPU or memory use on the server to retrieve its value\r\n    would be given a higher cost.\r\n\r\n    ![](images/tutorial_html_ab0c11b157a7cd4b.png)\r\n\r\n10. Select Query to review the warning details for this type. In\r\n    addition to the warning details, the Warning window gives an option\r\n    to fix the warning by apply the limits. Click Apply to continue.\r\n\r\n    ![](images/tutorial_html_ed0f88002c9eb816.png)\r\n\r\n11. After applyting the recommendation the wanrning message is removed.\r\n    Click Save to save the API definition .\r\n\r\n    ![](images/tutorial_html_63ce76efdb0032d7.png)\r\n\r\n12. Select Assemble to view the API in Assembly view. The flow is\r\n    automatically created as part of the initial API creation. You may\r\n    apply addition logic by dragging and dropping items from the pallet\r\n    to the canvas. In this tutorial, you are not adding additional\r\n    logic.\r\n\r\n    ![](images/tutorial_html_a2cd4daada4f2ca5.png)\r\n\r\n13. To publish the API toggle the button from offline to online.\r\n\r\n    ![](images/tutorial_html_965b91d211caf432.png)\r\n\r\n14. After successfully publishing the API to API Gateway, additional\r\n    tabs appear on the screen. Select Test tab to test the API.\r\n\r\n    ![](images/tutorial_html_ccb982e24326f44f.png)\r\n\r\n15. To test the API select the end point by append graphql at the end of\r\n    the request URL for GET method. The URL should look like this (your\r\n    value may be different):\r\n\r\n    <https://apic-dev-gw-gateway-apic.cp4inew-138661-3195e5b101a2fc76b9c4875fb79cfa25-0000.us-south.containers.appdomain.cloud/org01/sandbox/accounts/graphql>\r\n\r\n    Click **Send** to test the API.\r\n\r\n    An empty string is returned since we have not specified query string yet.\r\n\r\n16. API Connect Test feature also includes GraphQL Editor. Enter the\r\n    following in in GraphQL Editor window. You may use Prettify option\r\n    to view formatting string.\r\n\r\n```\r\n{\r\n  accounts(limit: 2) {\r\n    name {\r\n      first\r\n      last\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n17. Click Run button to send the GraphQL request to the end point. An\r\n    exception window will appear when you use test the API for the first\r\n    time.\r\n\r\n\r\n18. Click accept Exception to continue.\r\n\r\n    ![](images/tutorial_html_98d8f253e9342c8b.png)\r\n\r\n    You may see an invalid certificate issue page when you continue. This is\r\n    because valid certificates are not applied in this test environment. If\r\n    you are using Chrome browser you can accept the exception by typing\r\n    \"thisisunsafe\" anywhere in the window. Similar workarounds are available\r\n    for other browsers. For firefox browser, follow the steps from here -\r\n    <https://support.mozilla.org/en-US/kb/error-codes-secure-websites>\r\n\r\n    ![](images/tutorial_html_ac0c773416db4db7.png)\r\n\r\n19. The results for GraphQL request are displayed on the right panel. In\r\n    the request we limited the values to 2, so only two accounts are\r\n    displayed. Change the value to 5 and submit the request again and\r\n    notice that more accounts are returned in the results window.\r\n\r\n    ![](images/tutorial_html_1d05935575c71f8e.png)\r\n\r\n20. You can request additional data fields (refer to the schema editor\r\n    for details), GraphQL may reject if certain fields are locked or\r\n    prohibited. To test this, enter CreditCard information in the\r\n    request field.\r\n\r\n    The complete request looks as follows:\r\n```\r\n{\r\n  accounts(limit: 2) {\r\n    name {\r\n      first\r\n      last\r\n    }\r\n    shippingAddress {\r\n      building\r\n      street\r\n    }\r\n  }\r\n  creditCard {\r\n    number\r\n    expirationDate\r\n  }\r\n}\r\n```\r\n\r\n  You will notice that an error message is displayed in the results window\r\n  instead of the account values as the server restricts the query field\r\n  creditCard.\r\n\r\n  (Note: The error message displayed may be different than what is shown\r\n    in the screenshot).\r\n\r\n  ![](images/tutorial_html_81c927163c9c11bb.png)\r\n\r\n21. Submit another request to get account and shipping address details.\r\n    This time the values are turned without errors.\r\n\r\n    ![](images/tutorial_html_e37331678c3d02b2.png)\r\n\r\n## Create a Product and apply GraphQL RateLimits\r\n\r\n1.  To create a product Select Develop icon from left menu bar and click\r\n    Add-\\>Product\r\n\r\n    ![](images/tutorial_html_4f43bda35452bd65.png)\r\n\r\n2.  Name the product as Accounts Product and click Next\r\n\r\n    ![](images/tutorial_html_d0c3992a4bd7bc24.png)\r\n\r\n3.  Add Accounts API to the product by selecting accounts. Click Next to\r\n    continue to create the accounts-product.\r\n\r\n    ![](images/tutorial_html_4ae09f5fddd82bab.png)\r\n\r\n4.  Edit the product accounts-product to review the details. The Default\r\n    Plan contains traditional rate limiting options but you will notice\r\n    another section that list GraphQL Rate Limits.\r\n\r\n    ![](images/tutorial_html_15d9c2582155eea8.png)\r\n\r\n5.  You will be able to adjust GraphQL cost parameters from this\r\n    section. You can set a limit or make it unlimited. You will not be\r\n    making any changes in this tutorial.\r\n\r\n    ![](images/tutorial_html_3c25f5d5dab1988e.png)\r\n\r\n6.  Publish the Product to Sandbox Catalog by selecting Publish\r\n\r\n    ![](images/tutorial_html_a1f1cf7707e31913.png)\r\n\r\n7.  Accept the default for Visibility and Subscribability\r\n\r\n    ![](images/tutorial_html_1adf1922464ea393.png)\r\n\r\n8.  Click Publish to complete publishing the product.\r\n\r\n    ![](images/tutorial_html_890ebcd8219b104.png)\r\n\r\n## Test GraphQL API from Developer Portal\r\n\r\n1.  Sign in to API Connect Developer Portal using the Developer Portal\r\n    URL, username and password provided by the instructor.\r\n\r\n    ![](images/tutorial_html_540cbe0b9202f4a7.png)\r\n\r\n    ![](images/tutorial_html_c34973eb377015ce.png)\r\n\r\n2.  Developer Portal displays all the products that are currently\r\n    published. Locate accounts-product and select the product.\r\n\r\n    ![](images/tutorial_html_2635d049f12d59c6.png)\r\n\r\n3.  The selected product lists one API (accounts api) and one Plan\r\n    (Default Plan). Select Subscribe option to subscribe to the plan.\r\n\r\n    ![](images/tutorial_html_bd0ea34d4f40d756.png)\r\n\r\n4.  The Plan subscription requires an Application. You can create a new\r\n    Application or select the IBM Consumer application that is already\r\n    created.\r\n\r\n    ![](images/tutorial_html_2fd3cf48168675e5.png)\r\n\r\n5.  Select accounts API to review and test the API. Click accounts to\r\n    continue\r\n\r\n    ![](images/tutorial_html_8a5975dd9780a924.png)\r\n\r\n6.  Developer Portal displays the type as GrahQL API. Currently Client\r\n    ID security is enforced. Since there is only on Plan and one\r\n    Consumer Application, the Consumer ID filed is already populated.\r\n\r\n    ![](images/tutorial_html_e8892b4b3da410fc.png)\r\n\r\n7.  To continue to test the API, use the GraphQL Editor. Submit requests\r\n    with different field names and watch how quickly the results are\r\n    returned in the results window. If this was a REST API multiple end\r\n    points will be needed to achieve the same result.\r\n\r\n    ![](images/tutorial_html_9575e27d8184b8fc.png)\r\n\r\n## Summary\r\n\r\nCongratulations! You have successfully created a GraphQL Proxy API,\r\npublished the API as part of a Product, applied controls and rate\r\nlimits, and tested using Developer Portal.\r\n\r\nTo learn more about Cloud Pak for Integration and API Life Cycle\r\nManagement, visit <https://www.ibm.com/cloud/cloud-pak-for-integration>\r\n","type":"Mdx","contentDigest":"cc7766a5bc7e58519ba99085eb35b8d8","counter":1564,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"APIC Dev Jam - Lab 8 -- Creating GraphQL Proxy API"},"exports":{},"rawBody":"---\r\ntitle: APIC Dev Jam - Lab 8 -- Creating GraphQL Proxy API\r\n---\r\n\r\nIn this lab, you will explore the how to define GraphQL APIs that proxy\r\nto a backend GraphQL server. GraphQL is a query language for APIs that\r\ngives an application client greater control over what data it retrieves\r\nin an API request when compared with a REST API request.\r\n\r\nAPI Connect GraphQL support also allows rate limiting and other controls\r\nusing API Gateway.\r\n\r\nIn this tutorial, you will explore the following key capabilities:\r\n\r\n-   Create a GraphQL Proxy API\r\n\r\n-   Learn about GraphQL introspection and Schema Editor\r\n\r\n-   Test APIs by using the built-in GraphQL editor\r\n\r\n-   Review API Assembly Policies for the cost end point\r\n\r\n## APIC Dev Jam Series\r\n\r\nThe APIC Dev Jam Series is a hands-on workshop with lab exercises that\r\nwalk you through designing, publishing, and securing APIs. This workshop\r\nis for API developers, architects, and line of business people who want\r\nto create a successful API strategy. There are 8 labs and each is 30\r\nminutes long. Make sure you choose enough time in your reservation to\r\nget through all the labs! \r\n\r\n \r\n\r\n[NOTE: ]**[This demo environment contains a\r\nfull API Connect installation in Cloud Pak for Integration. The login\r\ninformation to the APIC cluster will be sent in a separate email when\r\nyou reserve the instance. Use Google Chrome, Firefox or Microsoft Edge\r\nto access the cluster using the credentials supplied. Make sure you\r\nlogin using API Manager User Registry not Common Services\r\nregistry.]**\r\n\r\nPrerequisites: None\r\n\r\n## Create a GraphQL Proxy API\r\n\r\n1.  Select Develop API and click Add-\\>API\r\n\r\n    ![](images/tutorial_html_c0c5acec16e566bb.png)\r\n\r\n2.  Enter the following values and click Next. You To create a GraphQL\r\n    proxy definition, select From Existing GraphQL service. When you\r\n    point to an existing GraphQL server, API Connect introspects the\r\n    service and automatically creates a GraphQL proxy service.\r\n\r\n    ![](images/tutorial_html_797b2f887d77017c.png)\r\n\r\n3.  Enter the following values and click Next. You can use default\r\n    values for the rest.\r\n\r\n    Title: accounts\r\n\r\n    GraphQL server URL: https://graphql-test-server.us-east.cf.appdomain.cloud/accounts/graphql\r\n\r\n    ![](images/tutorial_html_f83e60ae96763438.png)\r\n\r\n    ![](images/tutorial_html_90e0cbad29eca5a.png)\r\n\r\n4.  The schema validator reports warning and errors if found. There is\r\n    one warning in the accounts schema imported from the server. You can\r\n    review the schema warning details and also select the end points\r\n    interested for this proxy. Select all the available end points.\r\n\r\n    ![](images/tutorial_html_3cc23a786c4f73c2.png)\r\n\r\n5.  A review of the schema shows that no limit is set on the size of the\r\n    list. You will fix this warning in later steps. Click Next to\r\n    continue.\r\n\r\n    ![](images/tutorial_html_8104c10fce21e609.png)\r\n\r\n6.  Keep both Secure Client ID and CORS checked and click Next\r\n\r\n    ![](images/tutorial_html_464f81f24c7d47dd.png)\r\n\r\n7.  API Connect successfully created a GraphQL proxy API. You can edit\r\n    the API to view more details on the proxy API just created. Click\r\n    EDIT API to continue.\r\n\r\n    ![](images/tutorial_html_e70bb58508f9b662.png)\r\n\r\n8.  GraphQL APIs are structured the same as REST APIs with some\r\n    additional options. Just like REST APIs, you will be able to add\r\n    security definitions, properties and Activity logs from the left\r\n    menu bar. You can also view the Source and Assemble tabs similar to\r\n    REST APIs. You will notice a new tab for GraphQL APIs. Click on\r\n    GraphQL Schema tab to view the schema.\r\n\r\n    ![](images/tutorial_html_b27d147e1a49276b.png)\r\n\r\n9.  GraphQL Schema editor displays Type and Weight information. The\r\n    weighting factor is used when calculating the type cost for a\r\n    request to the GraphQL API. For example, a field that requires\r\n    extensive CPU or memory use on the server to retrieve its value\r\n    would be given a higher cost.\r\n\r\n    ![](images/tutorial_html_ab0c11b157a7cd4b.png)\r\n\r\n10. Select Query to review the warning details for this type. In\r\n    addition to the warning details, the Warning window gives an option\r\n    to fix the warning by apply the limits. Click Apply to continue.\r\n\r\n    ![](images/tutorial_html_ed0f88002c9eb816.png)\r\n\r\n11. After applyting the recommendation the wanrning message is removed.\r\n    Click Save to save the API definition .\r\n\r\n    ![](images/tutorial_html_63ce76efdb0032d7.png)\r\n\r\n12. Select Assemble to view the API in Assembly view. The flow is\r\n    automatically created as part of the initial API creation. You may\r\n    apply addition logic by dragging and dropping items from the pallet\r\n    to the canvas. In this tutorial, you are not adding additional\r\n    logic.\r\n\r\n    ![](images/tutorial_html_a2cd4daada4f2ca5.png)\r\n\r\n13. To publish the API toggle the button from offline to online.\r\n\r\n    ![](images/tutorial_html_965b91d211caf432.png)\r\n\r\n14. After successfully publishing the API to API Gateway, additional\r\n    tabs appear on the screen. Select Test tab to test the API.\r\n\r\n    ![](images/tutorial_html_ccb982e24326f44f.png)\r\n\r\n15. To test the API select the end point by append graphql at the end of\r\n    the request URL for GET method. The URL should look like this (your\r\n    value may be different):\r\n\r\n    <https://apic-dev-gw-gateway-apic.cp4inew-138661-3195e5b101a2fc76b9c4875fb79cfa25-0000.us-south.containers.appdomain.cloud/org01/sandbox/accounts/graphql>\r\n\r\n    Click **Send** to test the API.\r\n\r\n    An empty string is returned since we have not specified query string yet.\r\n\r\n16. API Connect Test feature also includes GraphQL Editor. Enter the\r\n    following in in GraphQL Editor window. You may use Prettify option\r\n    to view formatting string.\r\n\r\n```\r\n{\r\n  accounts(limit: 2) {\r\n    name {\r\n      first\r\n      last\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n17. Click Run button to send the GraphQL request to the end point. An\r\n    exception window will appear when you use test the API for the first\r\n    time.\r\n\r\n\r\n18. Click accept Exception to continue.\r\n\r\n    ![](images/tutorial_html_98d8f253e9342c8b.png)\r\n\r\n    You may see an invalid certificate issue page when you continue. This is\r\n    because valid certificates are not applied in this test environment. If\r\n    you are using Chrome browser you can accept the exception by typing\r\n    \"thisisunsafe\" anywhere in the window. Similar workarounds are available\r\n    for other browsers. For firefox browser, follow the steps from here -\r\n    <https://support.mozilla.org/en-US/kb/error-codes-secure-websites>\r\n\r\n    ![](images/tutorial_html_ac0c773416db4db7.png)\r\n\r\n19. The results for GraphQL request are displayed on the right panel. In\r\n    the request we limited the values to 2, so only two accounts are\r\n    displayed. Change the value to 5 and submit the request again and\r\n    notice that more accounts are returned in the results window.\r\n\r\n    ![](images/tutorial_html_1d05935575c71f8e.png)\r\n\r\n20. You can request additional data fields (refer to the schema editor\r\n    for details), GraphQL may reject if certain fields are locked or\r\n    prohibited. To test this, enter CreditCard information in the\r\n    request field.\r\n\r\n    The complete request looks as follows:\r\n```\r\n{\r\n  accounts(limit: 2) {\r\n    name {\r\n      first\r\n      last\r\n    }\r\n    shippingAddress {\r\n      building\r\n      street\r\n    }\r\n  }\r\n  creditCard {\r\n    number\r\n    expirationDate\r\n  }\r\n}\r\n```\r\n\r\n  You will notice that an error message is displayed in the results window\r\n  instead of the account values as the server restricts the query field\r\n  creditCard.\r\n\r\n  (Note: The error message displayed may be different than what is shown\r\n    in the screenshot).\r\n\r\n  ![](images/tutorial_html_81c927163c9c11bb.png)\r\n\r\n21. Submit another request to get account and shipping address details.\r\n    This time the values are turned without errors.\r\n\r\n    ![](images/tutorial_html_e37331678c3d02b2.png)\r\n\r\n## Create a Product and apply GraphQL RateLimits\r\n\r\n1.  To create a product Select Develop icon from left menu bar and click\r\n    Add-\\>Product\r\n\r\n    ![](images/tutorial_html_4f43bda35452bd65.png)\r\n\r\n2.  Name the product as Accounts Product and click Next\r\n\r\n    ![](images/tutorial_html_d0c3992a4bd7bc24.png)\r\n\r\n3.  Add Accounts API to the product by selecting accounts. Click Next to\r\n    continue to create the accounts-product.\r\n\r\n    ![](images/tutorial_html_4ae09f5fddd82bab.png)\r\n\r\n4.  Edit the product accounts-product to review the details. The Default\r\n    Plan contains traditional rate limiting options but you will notice\r\n    another section that list GraphQL Rate Limits.\r\n\r\n    ![](images/tutorial_html_15d9c2582155eea8.png)\r\n\r\n5.  You will be able to adjust GraphQL cost parameters from this\r\n    section. You can set a limit or make it unlimited. You will not be\r\n    making any changes in this tutorial.\r\n\r\n    ![](images/tutorial_html_3c25f5d5dab1988e.png)\r\n\r\n6.  Publish the Product to Sandbox Catalog by selecting Publish\r\n\r\n    ![](images/tutorial_html_a1f1cf7707e31913.png)\r\n\r\n7.  Accept the default for Visibility and Subscribability\r\n\r\n    ![](images/tutorial_html_1adf1922464ea393.png)\r\n\r\n8.  Click Publish to complete publishing the product.\r\n\r\n    ![](images/tutorial_html_890ebcd8219b104.png)\r\n\r\n## Test GraphQL API from Developer Portal\r\n\r\n1.  Sign in to API Connect Developer Portal using the Developer Portal\r\n    URL, username and password provided by the instructor.\r\n\r\n    ![](images/tutorial_html_540cbe0b9202f4a7.png)\r\n\r\n    ![](images/tutorial_html_c34973eb377015ce.png)\r\n\r\n2.  Developer Portal displays all the products that are currently\r\n    published. Locate accounts-product and select the product.\r\n\r\n    ![](images/tutorial_html_2635d049f12d59c6.png)\r\n\r\n3.  The selected product lists one API (accounts api) and one Plan\r\n    (Default Plan). Select Subscribe option to subscribe to the plan.\r\n\r\n    ![](images/tutorial_html_bd0ea34d4f40d756.png)\r\n\r\n4.  The Plan subscription requires an Application. You can create a new\r\n    Application or select the IBM Consumer application that is already\r\n    created.\r\n\r\n    ![](images/tutorial_html_2fd3cf48168675e5.png)\r\n\r\n5.  Select accounts API to review and test the API. Click accounts to\r\n    continue\r\n\r\n    ![](images/tutorial_html_8a5975dd9780a924.png)\r\n\r\n6.  Developer Portal displays the type as GrahQL API. Currently Client\r\n    ID security is enforced. Since there is only on Plan and one\r\n    Consumer Application, the Consumer ID filed is already populated.\r\n\r\n    ![](images/tutorial_html_e8892b4b3da410fc.png)\r\n\r\n7.  To continue to test the API, use the GraphQL Editor. Submit requests\r\n    with different field names and watch how quickly the results are\r\n    returned in the results window. If this was a REST API multiple end\r\n    points will be needed to achieve the same result.\r\n\r\n    ![](images/tutorial_html_9575e27d8184b8fc.png)\r\n\r\n## Summary\r\n\r\nCongratulations! You have successfully created a GraphQL Proxy API,\r\npublished the API as part of a Product, applied controls and rate\r\nlimits, and tested using Developer Portal.\r\n\r\nTo learn more about Cloud Pak for Integration and API Life Cycle\r\nManagement, visit <https://www.ibm.com/cloud/cloud-pak-for-integration>\r\n","fileAbsolutePath":"C:/Users/ruffa/Documents/GitHub/cp4i-demohub/src/pages/APICDevJam/Lab8/index.md"}}},"staticQueryHashes":["1054721580","1054721580","1364590287","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550","768070550"]}